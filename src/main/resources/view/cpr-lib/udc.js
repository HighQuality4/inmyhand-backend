/// start - udc.footer
/*
 * UDC Qualified Name: udc.footer
 * App URI: udc/footer
 * Source Location: udc/footer.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5481), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_card", {
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_card.js
				 * Created at 2025. 4. 21. 오전 10:31:19.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.declareAppProperty("title", "-");
				app.declareAppProperty("typeCategory", "-");
				app.declareAppProperty("situationCategory", "-");
				app.declareAppProperty("methodCategory", "-");
				app.declareAppProperty("difficulty", "-");
				app.declareAppProperty("cookingTime", "-");
				app.declareAppProperty("author", "-");
				app.declareAppProperty("likesCount", "-");
				app.declareAppProperty("recipeImg", "../../theme/images/recipe.svg");
				app.declareAppProperty("authorImg", "../../theme/images/user.svg");
				app.declareAppProperty("calories", "-");
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
				container.setLayout(responsiveXYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image();
				image_1.style.css({
					"border-radius" : "5px",
					"box-shadow" : "0 2px 6px rgba(0, 0, 0, 0.1)"
				});
				image_1.bind("src").toAppProperty("recipeImg");
				container.addChild(image_1, {
					positions: [
						{
							"media": "all and (min-width: 1024px)",
							"top": "0px",
							"bottom": "150px",
							"width": "250px",
							"left": "calc(50% - 125px)"
						},
						{
							"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
							"top": "0px",
							"bottom": "150px",
							"width": "122px",
							"left": "calc(50% - 61px)"
						},
						{
							"media": "all and (max-width: 499.984px)",
							"top": "0px",
							"bottom": "150px",
							"width": "85px",
							"left": "calc(50% - 42px)"
						}
					]
				});

				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#FBF3EB",
					"box-shadow" : "0 2px 6px rgba(0, 0, 0, 0.1)"
				});
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_1);
				(function(container){
					var group_2 = new cpr.controls.Container();
					var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
					group_2.setLayout(verticalLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output("recipeTitle");
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "5px"
						});
						output_1.bind("value").toAppProperty("title");
						container.addChild(output_1, {
							"autoSize": "both",
							"width": "250px",
							"height": "25px"
						});
						var group_3 = new cpr.controls.Container();
						var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
						flowLayout_1.horizontalSpacing = 5;
						flowLayout_1.verticalSpacing = 0;
						flowLayout_1.verticalAlign = "middle";
						flowLayout_1.lineWrap = false;
						group_3.setLayout(flowLayout_1);
						(function(container){
							var output_2 = new cpr.controls.Output("recipeTypeCate");
							output_2.style.css({
								"border-right-style" : "solid",
								"padding-top" : "3px",
								"border-top-width" : "1px",
								"border-bottom-color" : "#856c66",
								"color" : "#856c66",
								"border-right-width" : "1px",
								"padding-left" : "7px",
								"border-left-color" : "#856c66",
								"font-size" : "12px",
								"padding-bottom" : "3px",
								"border-right-color" : "#856c66",
								"border-left-width" : "1px",
								"border-top-style" : "solid",
								"border-radius" : "5px",
								"border-left-style" : "solid",
								"border-bottom-width" : "1px",
								"border-top-color" : "#856c66",
								"border-bottom-style" : "solid",
								"padding-right" : "7px"
							});
							output_2.bind("value").toAppProperty("typeCategory");
							container.addChild(output_2, {
								"autoSize": "both",
								"width": "50px",
								"height": "20px"
							});
							var output_3 = new cpr.controls.Output("recipeSituationCate");
							output_3.style.css({
								"border-right-style" : "solid",
								"padding-top" : "3px",
								"border-top-width" : "1px",
								"border-bottom-color" : "#856c66",
								"color" : "#856c66",
								"border-right-width" : "1px",
								"padding-left" : "7px",
								"border-left-color" : "#856c66",
								"font-size" : "12px",
								"padding-bottom" : "3px",
								"border-right-color" : "#856c66",
								"border-left-width" : "1px",
								"border-top-style" : "solid",
								"border-radius" : "5px",
								"border-left-style" : "solid",
								"border-bottom-width" : "1px",
								"border-top-color" : "#856c66",
								"border-bottom-style" : "solid",
								"padding-right" : "7px"
							});
							output_3.bind("value").toAppProperty("situationCategory");
							container.addChild(output_3, {
								"autoSize": "both",
								"width": "50px",
								"height": "20px"
							});
							var output_4 = new cpr.controls.Output("recipeMethodCater");
							output_4.style.css({
								"border-right-style" : "solid",
								"padding-top" : "3px",
								"border-top-width" : "1px",
								"border-bottom-color" : "#856c66",
								"color" : "#856c66",
								"border-right-width" : "1px",
								"padding-left" : "7px",
								"border-left-color" : "#856c66",
								"font-size" : "12px",
								"padding-bottom" : "3px",
								"border-right-color" : "#856c66",
								"border-left-width" : "1px",
								"border-top-style" : "solid",
								"border-radius" : "5px",
								"border-left-style" : "solid",
								"border-bottom-width" : "1px",
								"border-top-color" : "#856c66",
								"border-bottom-style" : "solid",
								"padding-right" : "7px"
							});
							output_4.bind("value").toAppProperty("methodCategory");
							container.addChild(output_4, {
								"autoSize": "both",
								"width": "50px",
								"height": "20px"
							});
						})(group_3);
						container.addChild(group_3, {
							"autoSize": "both",
							"width": "100%",
							"height": "20px"
						});
						var group_4 = new cpr.controls.Container();
						var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
						flowLayout_2.horizontalSpacing = 5;
						flowLayout_2.verticalSpacing = 0;
						flowLayout_2.verticalAlign = "middle";
						flowLayout_2.lineWrap = false;
						group_4.setLayout(flowLayout_2);
						(function(container){
							var group_5 = new cpr.controls.Container();
							var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
							flowLayout_3.scrollable = false;
							flowLayout_3.horizontalSpacing = 3;
							flowLayout_3.verticalSpacing = 0;
							flowLayout_3.verticalAlign = "middle";
							flowLayout_3.lineWrap = false;
							group_5.setLayout(flowLayout_3);
							(function(container){
								var image_2 = new cpr.controls.Image();
								image_2.src = "theme/images/difficullty.svg";
								container.addChild(image_2, {
									"width": "13px",
									"height": "13px"
								});
								var output_5 = new cpr.controls.Output("recipeDifficulty");
								output_5.style.css({
									"color" : "#856C66",
									"font-size" : "12px"
								});
								output_5.bind("value").toAppProperty("difficulty");
								container.addChild(output_5, {
									"autoSize": "both",
									"width": "47px",
									"height": "20px",
									"allowNewLine": false
								});
							})(group_5);
							container.addChild(group_5, {
								"autoSize": "width",
								"width": "51px",
								"height": "20px",
								"allowNewLine": false
							});
							var group_6 = new cpr.controls.Container();
							var flowLayout_4 = new cpr.controls.layouts.FlowLayout();
							flowLayout_4.scrollable = false;
							flowLayout_4.horizontalSpacing = 3;
							flowLayout_4.verticalSpacing = 0;
							flowLayout_4.verticalAlign = "middle";
							flowLayout_4.lineWrap = false;
							group_6.setLayout(flowLayout_4);
							(function(container){
								var image_3 = new cpr.controls.Image();
								image_3.src = "theme/images/clock.svg";
								container.addChild(image_3, {
									"width": "15px",
									"height": "15px"
								});
								var output_6 = new cpr.controls.Output("recipeCookingTime");
								output_6.style.css({
									"color" : "#856C66",
									"font-size" : "12px"
								});
								output_6.bind("value").toAppProperty("cookingTime");
								container.addChild(output_6, {
									"autoSize": "both",
									"width": "47px",
									"height": "20px",
									"allowNewLine": false
								});
							})(group_6);
							container.addChild(group_6, {
								"autoSize": "width",
								"width": "71px",
								"height": "20px",
								"allowNewLine": false
							});
							var group_7 = new cpr.controls.Container();
							var flowLayout_5 = new cpr.controls.layouts.FlowLayout();
							flowLayout_5.scrollable = false;
							flowLayout_5.horizontalSpacing = 0;
							flowLayout_5.verticalSpacing = 0;
							flowLayout_5.verticalAlign = "middle";
							flowLayout_5.lineWrap = false;
							group_7.setLayout(flowLayout_5);
							(function(container){
								var image_4 = new cpr.controls.Image();
								image_4.src = "theme/images/calories.svg";
								container.addChild(image_4, {
									"width": "20px",
									"height": "20px"
								});
								var output_7 = new cpr.controls.Output("recipeCalories");
								output_7.style.css({
									"color" : "#856C66",
									"font-size" : "12px"
								});
								output_7.bind("value").toAppProperty("calories");
								container.addChild(output_7, {
									"autoSize": "both",
									"width": "47px",
									"height": "20px",
									"allowNewLine": false
								});
							})(group_7);
							container.addChild(group_7, {
								"autoSize": "width",
								"width": "71px",
								"height": "20px",
								"allowNewLine": false
							});
						})(group_4);
						container.addChild(group_4, {
							"autoSize": "both",
							"width": "210px",
							"height": "20px"
						});
						var group_8 = new cpr.controls.Container();
						var flowLayout_6 = new cpr.controls.layouts.FlowLayout();
						flowLayout_6.scrollable = false;
						flowLayout_6.horizontalSpacing = 0;
						flowLayout_6.verticalSpacing = 0;
						flowLayout_6.verticalAlign = "middle";
						flowLayout_6.lineWrap = false;
						group_8.setLayout(flowLayout_6);
						(function(container){
							var group_9 = new cpr.controls.Container();
							var flowLayout_7 = new cpr.controls.layouts.FlowLayout();
							flowLayout_7.verticalAlign = "middle";
							group_9.setLayout(flowLayout_7);
							(function(container){
								var image_5 = new cpr.controls.Image();
								image_5.style.css({
									"border-radius" : "100%"
								});
								image_5.bind("src").toAppProperty("authorImg");
								container.addChild(image_5, {
									"width": "20px",
									"height": "20px"
								});
								var output_8 = new cpr.controls.Output("recipeAuthor");
								output_8.bind("value").toAppProperty("author");
								container.addChild(output_8, {
									"autoSize": "both",
									"width": "50px",
									"height": "20px"
								});
							})(group_9);
							container.addChild(group_9, {
								"autoSize": "height",
								"width": "50%",
								"height": "30px"
							});
							var group_10 = new cpr.controls.Container();
							var flowLayout_8 = new cpr.controls.layouts.FlowLayout();
							flowLayout_8.horizontalAlign = "right";
							flowLayout_8.verticalAlign = "middle";
							group_10.setLayout(flowLayout_8);
							(function(container){
								var image_6 = new cpr.controls.Image();
								image_6.src = "theme/images/heart.svg";
								image_6.style.css({
									"border-radius" : "100%"
								});
								container.addChild(image_6, {
									"width": "20px",
									"height": "20px"
								});
								var output_9 = new cpr.controls.Output("recipeLikesCount");
								output_9.bind("value").toAppProperty("likesCount");
								container.addChild(output_9, {
									"autoSize": "both",
									"width": "50px",
									"height": "20px"
								});
							})(group_10);
							container.addChild(group_10, {
								"autoSize": "height",
								"width": "50%",
								"height": "30px"
							});
						})(group_8);
						container.addChild(group_8, {
							"autoSize": "both",
							"width": "100%",
							"height": "30px"
						});
					})(group_2);
					container.addChild(group_2, {
						"width": "210px",
						"height": "110px",
						"left": "calc(50% - 105px)",
						"top": "calc(50% - 55px)"
					});
				})(group_1);
				container.addChild(group_1, {
					positions: [
						{
							"media": "all and (min-width: 1024px)",
							"top": "250px",
							"bottom": "0px",
							"width": "250px",
							"left": "calc(50% - 125px)"
						},
						{
							"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
							"top": "250px",
							"bottom": "0px",
							"width": "122px",
							"left": "calc(50% - 61px)"
						},
						{
							"media": "all and (max-width: 499.984px)",
							"top": "250px",
							"bottom": "0px",
							"width": "85px",
							"left": "calc(50% - 42px)"
						}
					]
				});
			}
		});
	internalApp.title = "recipe_card";
	
	// Type declaration for recipe_card
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_card = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_card", internalApp, id);
	};
	
	udc.recipe.recipe_card.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_card.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_card";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.recipe_card.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "typeCategory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("typeCategory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("typeCategory", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "situationCategory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("situationCategory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("situationCategory", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "methodCategory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("methodCategory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("methodCategory", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "difficulty", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("difficulty");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("difficulty", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "cookingTime", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("cookingTime");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("cookingTime", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "author", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("author");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("author", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "likesCount", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("likesCount");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("likesCount", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "recipeImg", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("recipeImg");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("recipeImg", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "authorImg", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("authorImg");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("authorImg", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "calories", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("calories");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("calories", newValue, true);
		}
	});

	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.footer
/// start - udc.recipe.recipe_sort_select
/*
 * UDC Qualified Name: udc.recipe.recipe_sort_select
 * App URI: udc/recipe/recipe_sort_select
 * Source Location: udc/recipe/recipe_sort_select.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5481), Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/recipe/recipe_sort_select", {
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * recipe_sort_button.js
			 * Created at 2025. 4. 22. 오후 1:44:34.
			 *
			 * @author gyrud
			 ************************************************/
			/*
             * 루트 컨테이너에서 load 이벤트 발생 시 호출.
             * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
             */
			function onBodyLoad(e){
				const recipeSortSelectBox = app.lookup("recipeSortSelectBox");

				recipeSortSelectBox.addItem(new cpr.controls.Item("칼로리 낮은순", "value1"));
				recipeSortSelectBox.addItem(new cpr.controls.Item("칼로리 높은순", "value2"));
				recipeSortSelectBox.addItem(new cpr.controls.Item("소요시간 낮은순", "value3"));
				recipeSortSelectBox.addItem(new cpr.controls.Item("소요시간 높은순", "value4"));
				recipeSortSelectBox.addItem(new cpr.controls.Item("난이도 낮은순", "value5"));
				recipeSortSelectBox.addItem(new cpr.controls.Item("난이도 높은순", "value6"));

			};
			// End - User Script

			// Header
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
			app.supportMedia("all and (max-width: 499.984px)", "mobile");

			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});

			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);

			// UI Configuration
			var comboBox_1 = new cpr.controls.ComboBox("recipeSortSelectBox");
			container.addChild(comboBox_1, {
				"top": "0px",
				"bottom": "0px",
				"left": "0px",
				"width": "100px"
			});

			var button_1 = new cpr.controls.Button();
			button_1.value = "정렬 초기화";
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"width": "98px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "recipe_sort_select";

	// Type declaration for recipe_sort_select
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_sort_select = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_sort_select", internalApp, id);
	};

	udc.recipe.recipe_sort_select.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_sort_select.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_sort_select";
		},

		configurable: true
	});

	// App Properties

	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_sort_select
/// start - udc.recipe.recipe_title
/*
 * UDC Qualified Name: udc.recipe.recipe_title
 * App URI: udc/recipe/recipe_title
 * Source Location: udc/recipe/recipe_title.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5481), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_title", {
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_title.js
				 * Created at 2025. 4. 21. 오전 9:57:21.
				 *
				 * @author gyrud
				 ************************************************/;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var image_1 = new cpr.controls.Image();
					image_1.src = "theme/images/recipe.svg";
					container.addChild(image_1, {
						"top": "0px",
						"left": "0px",
						"width": "30px",
						"height": "30px"
					});
					var output_1 = new cpr.controls.Output("titleValue");
					output_1.style.css({
						"color" : "#856C66",
						"font-weight" : "bold",
						"font-size" : "16px"
					});
					output_1.bind("value").toAppProperty("value");
					container.addChild(output_1, {
						"top": "0px",
						"left": "40px",
						"width": "110px",
						"height": "30px"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "150px",
					"height": "30px",
					"left": "calc(50% - 75px)",
					"top": "calc(50% - 15px)"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "recipe_title";
	
	// Type declaration for recipe_title
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_title = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_title", internalApp, id);
	};
	
	udc.recipe.recipe_title.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_title.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_title";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.recipe_title.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});

	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_title
/// start - udc.register.confirm_form
/*
 * UDC Qualified Name: udc.register.confirm_form
 * App URI: udc/register/confirm_form
 * Source Location: udc/register/confirm_form.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/register/confirm_form", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * confirm_form.js
				 * Created at 2025. 4. 25. 오후 3:12:53.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var inputBox_1 = new cpr.controls.InputBox("code_input");
				inputBox_1.style.css({
					"text-align" : "center"
				});
				container.addChild(inputBox_1, {
					"top": "69px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
				
				var button_1 = new cpr.controls.Button();
				button_1.value = "확인";
				container.addChild(button_1, {
					"top": "131px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
				
				var userDefinedControl_1 = new udc.register.timer();
				container.addChild(userDefinedControl_1, {
					"top": "7px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
			}
		});
	internalApp.title = "confirm_form";
	
	// Type declaration for confirm_form
	cpr.utils.Util.ensurePackage("udc.register").confirm_form = function(id){
		cpr.controls.UDCBase.call(this, "udc.register.confirm_form", internalApp, id);
	};
	
	udc.register.confirm_form.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.register.confirm_form.prototype, "type", {
		get : function(){
			return "udc.register.confirm_form";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.register.confirm_form
/// start - udc.register.confirmForm
/*
 * UDC Qualified Name: udc.register.confirmForm
 * App URI: udc/register/confirmForm
 * Source Location: udc/register/confirmForm.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/register/confirmForm", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * confirmForm.js
				 * Created at 2025. 4. 25. 오후 3:42:17.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.startTimer = function () {
				    var timer = app.lookup("timer");
				    timer.callAppMethod("startTimer");  // 내부 timer로 중계
				};
	
				function onSubmitConfirmClick(e){
					var code = app.lookup("code_input").value;
					var email = localStorage.getItem("userEmail");
					
					var dm = app.lookup("dmEmailCode");
					var sms = app.lookup("smsEmailAuth");
					dm.setValue("email", email);
					dm.setValue("code", code);
					
					sms.send();
				}
	
				/*
				 * 서브미션에서 receive 이벤트 발생 시 호출.
				 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
				 */
				function onSmsEmailAuthReceive(e){
					var smsEmailAuth = e.control;
					var xhr = smsEmailAuth.xhr;
					var res = JSON.parse(xhr.responseText);
					console.log(res);
					if (res === true) {
						alert("인증되었습니다!");
						
					} else {
						alert("인증에 실패했습니다!");
					}
					exports.getRes = function() {
						return res;
					}
				};
				// End - User Script
				
				// Header
				var dataMap_1 = new cpr.data.DataMap("dmEmailCode");
				dataMap_1.parseData({
					"columns" : [
						{"name": "email"},
						{
							"name": "code",
							"dataType": "string"
						}
					]
				});
				app.register(dataMap_1);
				var submission_1 = new cpr.protocols.Submission("smsEmailAuth");
				submission_1.action = "/api/user/auth/verify-code";
				submission_1.mediaType = "application/json";
				submission_1.addRequestData(dataMap_1);
				if(typeof onSmsEmailAuthSubmitSuccess == "function") {
					submission_1.addEventListener("submit-success", onSmsEmailAuthSubmitSuccess);
				}
				if(typeof onSmsEmailAuthReceive == "function") {
					submission_1.addEventListener("receive", onSmsEmailAuthReceive);
				}
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var userDefinedControl_1 = new udc.register.timer("timer");
				container.addChild(userDefinedControl_1, {
					"top": "0px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
				
				var inputBox_1 = new cpr.controls.InputBox("code_input");
				inputBox_1.placeholder = "인증 코드를 입력하세요";
				inputBox_1.style.css({
					"text-align" : "center"
				});
				container.addChild(inputBox_1, {
					"top": "62px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
				
				var button_1 = new cpr.controls.Button("submitConfirm");
				button_1.value = "확인";
				if(typeof onSubmitConfirmClick == "function") {
					button_1.addEventListener("click", onSubmitConfirmClick);
				}
				container.addChild(button_1, {
					"top": "124px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
			}
		});
	internalApp.title = "confirmForm";
	
	// Type declaration for confirmForm
	cpr.utils.Util.ensurePackage("udc.register").confirmForm = function(id){
		cpr.controls.UDCBase.call(this, "udc.register.confirmForm", internalApp, id);
	};
	
	udc.register.confirmForm.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.register.confirmForm.prototype, "type", {
		get : function(){
			return "udc.register.confirmForm";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.register.confirmForm
/// start - udc.register.timer
/*
 * UDC Qualified Name: udc.register.timer
 * App URI: udc/register/timer
 * Source Location: udc/register/timer.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/register/timer", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * timer.js
				 * Created at 2025. 4. 25. 오후 1:31:13.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				//exports.getText = function(){
				//	// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				//	return "";
				//};
	
				// 전역 타이머 변수
				var timerInterval = null;
	
				/**
				 * 타이머 시작
				 * @param {number} duration 초 단위 시간
				 * @param {function=} onEnd 타이머 종료 시 콜백 함수 (선택)
				 */
				function start(duration, onEnd) {
				    if (timerInterval) clearInterval(timerInterval);
	
				    var label = app.lookup("timer_section");
				    var remainingTime = duration;
	
				    timerInterval = setInterval(function () {
				        var minutes = padZero(Math.floor(remainingTime / 60));
				        var seconds = padZero(remainingTime % 60);
	
				        label.value = "남은 시간: " + minutes + ":" + seconds;
	
				        if (--remainingTime < 0) {
				            clearInterval(timerInterval);
				            label.value = "⛔ 인증 시간이 만료되었습니다.";
	
				            // 종료 콜백 호출
				            if (typeof onEnd === "function") {
				                onEnd();
				            }
				        }
				    }, 1000);
				}
	
				/**
				 * 숫자 앞 0채우기 유틸
				 */
				function padZero(num) {
				    return (num < 10 ? '0' : '') + num;
				}
	
				/**
				 * 타이머 초기화 (중단)
				 */
				function stop() {
				    if (timerInterval) clearInterval(timerInterval);
				    app.lookup("timer_section").value = "";
				}
	
				exports.startTimer = function () {
				    start(180);  // 기존 타이머 함수
				};;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.readOnly = true;
				container.style.css({
					"text-align" : "center",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var inputBox_1 = new cpr.controls.InputBox("timer_section");
				inputBox_1.style.css({
					"text-align" : "center"
				});
				container.addChild(inputBox_1, {
					"right": "1px",
					"left": "0px",
					"height": "52px",
					"top": "calc(50% - 26px)"
				});
			}
		});
	internalApp.title = "timer";
	
	// Type declaration for timer
	cpr.utils.Util.ensurePackage("udc.register").timer = function(id){
		cpr.controls.UDCBase.call(this, "udc.register.timer", internalApp, id);
	};
	
	udc.register.timer.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.register.timer.prototype, "type", {
		get : function(){
			return "udc.register.timer";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.register.timer
/// start - udc.timer
/*
 * UDC Qualified Name: udc.timer
 * App URI: udc/timer
 * Source Location: udc/timer.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/timer", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * timer.js
				 * Created at 2025. 4. 25. 오후 1:31:13.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				//exports.getText = function(){
				//	// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				//	return "";
				//};
	
				// 전역 타이머 변수
				var timerInterval = null;
	
				/**
				 * 타이머 시작
				 * @param {number} duration 초 단위 시간
				 * @param {function=} onEnd 타이머 종료 시 콜백 함수 (선택)
				 */
				function start(duration, onEnd) {
				    if (timerInterval) clearInterval(timerInterval);
	
				    var label = app.lookup("timer_section");
				    var remainingTime = duration;
	
				    timerInterval = setInterval(function () {
				        var minutes = padZero(Math.floor(remainingTime / 60));
				        var seconds = padZero(remainingTime % 60);
	
				        label.value = "남은 시간: " + minutes + ":" + seconds;
	
				        if (--remainingTime < 0) {
				            clearInterval(timerInterval);
				            label.value = "⛔ 인증 시간이 만료되었습니다.";
	
				            // 종료 콜백 호출
				            if (typeof onEnd === "function") {
				                onEnd();
				            }
				        }
				    }, 1000);
				}
	
				/**
				 * 숫자 앞 0채우기 유틸
				 */
				function padZero(num) {
				    return (num < 10 ? '0' : '') + num;
				}
	
				/**
				 * 타이머 초기화 (중단)
				 */
				function stop() {
				    if (timerInterval) clearInterval(timerInterval);
				    app.lookup("lblTime").value = "";
				};
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var inputBox_1 = new cpr.controls.InputBox("timer_section");
				container.addChild(inputBox_1, {
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)",
					"top": "calc(50% - 26px)"
				});
			}
		});
	internalApp.title = "timer";
	
	// Type declaration for timer
	cpr.utils.Util.ensurePackage("udc").timer = function(id){
		cpr.controls.UDCBase.call(this, "udc.timer", internalApp, id);
	};
	
	udc.timer.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.timer.prototype, "type", {
		get : function(){
			return "udc.timer";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.timer
