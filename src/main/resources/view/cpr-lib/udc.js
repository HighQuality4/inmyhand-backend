/// start - udc.fridge.fridgeCRUD
/*
 * UDC Qualified Name: udc.fridge.fridgeCRUD
 * App URI: udc/fridge/fridgeCRUD
 * Source Location: udc/fridge/fridgeCRUD.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/fridge/fridgeCRUD", { 
			onPrepare: function(loader) {
				loader.addCSS("theme/custom/fridge/button.part.css");
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * fridgeCRUD.js
				 * Created at 2025. 4. 16. 오후 12:34:21.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				 
	
	
				/*
				 * "추가" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick2(e){
					var button = e.control;
	
					// ctrl + shift + / : (Grid,control,...) type 지정하기
					// 타입 지정 이유 -> 타입 지정을 안하면 관련 함수 사용이 안됨
					
					/** @type cpr.controls.Grid */
					var grd = app.getAppProperty("grdCtrl");
	
					// 전체 로우 수
					var totalIndex = grd.getContentRowCount();
					// 선택된 로우 수
					var rowIndex = grd.getSelectedRowIndex();
					
					if(rowIndex != -1){
						grd.insertRow(rowIndex,true);
					}else{
						grd.insertRow(totalIndex+1,true);
						console.log("totalIndex : "+totalIndex);
					}
					
				}
	
				/*
				 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					
					/** @type cpr.controls.Grid */
					var grd = app.getAppProperty("grdCtrl");
					
					console.log(grd);
					
					var rowIndex = grd.getSelectedRowIndex();
					grd.deleteRow(rowIndex);
					
					
				}
	
				/*
				 * "저장" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick3(e){
					var button = e.control;
					
					// 저장 이벤트 (save-click) 전파하기
					var saveClick = new cpr.events.CUIEvent("save-click");
					app.dispatchEvent(saveClick);	
					
				}
	
				//외부에서 해당 함수 사용하고 싶을때 
				function outBasicExample(){
					alert("외부에서 내가 정의한 api, 사용 방법");
					alert("exports.함수이름");
				}
	
				exports.outBasicExample = outBasicExample;
	
				/*
				 * "취소" 버튼(cancelDummy)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onCancelDummyClick(e){
					var cancelDummy = e.control;
					alert("데이터 입력/변경 전으로 돌아갑니다.");
					
					/** @type cpr.controls.Grid */
					var grd = app.getAppProperty("grdCtrl");
	
					grd.revertData(); 
				}
	
				/*
				 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
				 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
				 */
				function onBodyPropertyChange(e){
					// 로드 이벤트와 같이 이벤트 탐
					// udc 앱속성이 변경되는 경우
					if(e.property == "visibleAddButton"){
						if(app.getAppProperty("visibleAddButton")){
							// 추가버튼 보이게
							app.lookup("updateGroup").getLayout().setColumnVisible(0, true);
						}else{
							// 추가버튼 안보이게
							app.lookup("updateGroup").getLayout().setColumnVisible(0, false);
						}
					}
					
					if(e.property == "deleteStr"){
						if(app.getAppProperty("deleteStr").length > 0){
							app.lookup("deleteDummy").value("퇴출");
						}
					}
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("grdCtrl", null);
				app.declareAppProperty("addStr", "추가");
				app.declareAppProperty("delColor", "#FF0000");
				app.declareAppProperty("visibleAddButton", true);
				app.declareAppProperty("deleteStr", "퇴출");
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "10px";
				formLayout_1.verticalSpacing = "10px";
				formLayout_1.topMargin = "5px";
				formLayout_1.rightMargin = "5px";
				formLayout_1.bottomMargin = "5px";
				formLayout_1.leftMargin = "5px";
				formLayout_1.setColumns(["1fr"]);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container("updateGroup");
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "10px";
				formLayout_2.setColumns(["1fr", "1fr", "1fr", "1fr"]);
				formLayout_2.setRows(["1fr"]);
				group_1.setLayout(formLayout_2);
				(function(container){
					var button_1 = new cpr.controls.Button("addDummy");
					button_1.style.setClasses(["custom-button"]);
					button_1.bind("value").toAppProperty("addStr");
					if(typeof onButtonClick2 == "function") {
						button_1.addEventListener("click", onButtonClick2);
					}
					container.addChild(button_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var button_2 = new cpr.controls.Button("deleteDummy");
					button_2.value = "삭제";
					button_2.style.setClasses(["custom-button"]);
					button_2.style.bind("color").toAppProperty("delColor");
					if(typeof onButtonClick == "function") {
						button_2.addEventListener("click", onButtonClick);
					}
					container.addChild(button_2, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_3 = new cpr.controls.Button("cancelDummy");
					button_3.value = "취소";
					button_3.style.setClasses(["custom-button"]);
					if(typeof onCancelDummyClick == "function") {
						button_3.addEventListener("click", onCancelDummyClick);
					}
					container.addChild(button_3, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var button_4 = new cpr.controls.Button("saveDummy");
					button_4.value = "저장";
					button_4.style.setClasses(["custom-button"]);
					if(typeof onButtonClick3 == "function") {
						button_4.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_4, {
						"colIndex": 3,
						"rowIndex": 0
					});
				})(group_1);
				container.addChild(group_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
				if(typeof onBodyPropertyChange == "function"){
					app.addEventListener("property-change", onBodyPropertyChange);
				}
			}
		});
	internalApp.title = "fridgeCRUD";
	
	// Type declaration for fridgeCRUD
	cpr.utils.Util.ensurePackage("udc.fridge").fridgeCRUD = function(id){
		cpr.controls.UDCBase.call(this, "udc.fridge.fridgeCRUD", internalApp, id);
	};
	
	udc.fridge.fridgeCRUD.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.fridge.fridgeCRUD.prototype, "type", {
		get : function(){
			return "udc.fridge.fridgeCRUD";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.fridge.fridgeCRUD.prototype, "grdCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grdCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grdCtrl", newValue, true);
		}
	});
	Object.defineProperty(udc.fridge.fridgeCRUD.prototype, "addStr", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("addStr");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("addStr", newValue, true);
		}
	});
	Object.defineProperty(udc.fridge.fridgeCRUD.prototype, "delColor", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("delColor");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("delColor", newValue, true);
		}
	});
	Object.defineProperty(udc.fridge.fridgeCRUD.prototype, "visibleAddButton", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("visibleAddButton");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("visibleAddButton", newValue, true);
		}
	});
	Object.defineProperty(udc.fridge.fridgeCRUD.prototype, "deleteStr", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("deleteStr");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("deleteStr", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.fridge.fridgeCRUD
/// start - udc.fridge.fridgeUD
/*
 * UDC Qualified Name: udc.fridge.fridgeUD
 * App URI: udc/fridge/fridgeUD
 * Source Location: udc/fridge/fridgeUD.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/fridge/fridgeUD", { 
			onPrepare: function(loader) {
				loader.addCSS("theme/custom/fridge/button.part.css");
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * fridgeUD.js
				 * Created at 2025. 4. 24. 오전 9:29:13.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
						
					/** @type cpr.controls.Grid */
					var grd = app.getAppProperty("grdUDCtrl");
					
					console.log(grd);
					
					var rowIndex = grd.getSelectedRowIndex();
					grd.deleteRow(rowIndex);
					
					
				}
	
				/*
				 * "저장" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick3(e){
					var button = e.control;
					
					// 저장 이벤트 (save-update-click) 전파하기
					var saveUpdateClick = new cpr.events.CUIEvent("save-update-click");
					app.dispatchEvent(saveUpdateClick);	
					
				}
	
				/*
				 * "취소" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick4(e){
					var button = e.control;
						
					alert("데이터 입력/변경 전으로 돌아갑니다.");
					
					/** @type cpr.controls.Grid */
					var grd = app.getAppProperty("grdUDCtrl");
					
					grd.revertData(); 
					
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("grdUDCtrl", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "1px";
				formLayout_1.verticalSpacing = "1px";
				formLayout_1.topMargin = "5px";
				formLayout_1.rightMargin = "5px";
				formLayout_1.bottomMargin = "5px";
				formLayout_1.leftMargin = "5px";
				formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var button_1 = new cpr.controls.Button();
				button_1.value = "삭제";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				
				var button_2 = new cpr.controls.Button();
				button_2.value = "수정";
				if(typeof onButtonClick3 == "function") {
					button_2.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				
				var button_3 = new cpr.controls.Button();
				button_3.value = "취소";
				if(typeof onButtonClick4 == "function") {
					button_3.addEventListener("click", onButtonClick4);
				}
				container.addChild(button_3, {
					"colIndex": 0,
					"rowIndex": 0
				});
			}
		});
	internalApp.title = "fridgeUD";
	
	// Type declaration for fridgeUD
	cpr.utils.Util.ensurePackage("udc.fridge").fridgeUD = function(id){
		cpr.controls.UDCBase.call(this, "udc.fridge.fridgeUD", internalApp, id);
	};
	
	udc.fridge.fridgeUD.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.fridge.fridgeUD.prototype, "type", {
		get : function(){
			return "udc.fridge.fridgeUD";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.fridge.fridgeUD.prototype, "grdUDCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grdUDCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grdUDCtrl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.fridge.fridgeUD
/// start - udc.fridge.UDCFridgeGrid
/*
 * UDC Qualified Name: udc.fridge.UDCFridgeGrid
 * App URI: udc/fridge/UDCFridgeGrid
 * Source Location: udc/fridge/UDCFridgeGrid.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/fridge/UDCFridgeGrid", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * UDCFridgeGrid.js
				 * Created at 2025. 4. 27. 오전 12:16:40.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * "x" 버튼(removeResult)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onRemoveResultClick(e){
					var removeResult = e.control;
					
					// 삭제이벤트 전파하기
					var event = new cpr.events.CUIEvent("removeResultCtrlBtn");
					app.dispatchEvent(event);
					
				}
	
				/*
				 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
				 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
				 */
				function onBodyPropertyChange(e){
					/** @type cpr.data.DataSet */
					var ds = app.getAppProperty("dataSet");
					/** @type cpr.data.DataSet */
					var originDs = app.lookup("insertFoodList");
					
					ds.copyToDataSet(originDs);
					app.lookup("grd1").redraw();
				//	var answer = app.getAppProperty("myDataset");
					
				}
	
				/*
				 * "Button" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					
					
					
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("changeGridCtrl", null);
				app.declareAppProperty("dataSet", null);
				var dataSet_1 = new cpr.data.DataSet("insertFoodList");
				dataSet_1.parseData({
					"columns": [
						{"name": "foodName"},
						{"name": "foodAmount"},
						{"name": "endDate"},
						{"name": "chargeDate"},
						{"name": "categoryName"}
					],
					"rows": []
				});
				app.register(dataSet_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "1px";
				formLayout_1.verticalSpacing = "1px";
				formLayout_1.topMargin = "5px";
				formLayout_1.rightMargin = "5px";
				formLayout_1.bottomMargin = "5px";
				formLayout_1.leftMargin = "5px";
				formLayout_1.setColumns(["1fr", "490px", "1fr"]);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.horizontalSpacing = "1px";
				formLayout_2.verticalSpacing = "1px";
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.setColumns(["1fr"]);
				formLayout_2.setRows(["1fr"]);
				group_1.setLayout(formLayout_2);
				(function(container){
					var grid_1 = new cpr.controls.Grid("grd1");
					grid_1.init({
						"dataSet": app.lookup("insertFoodList"),
						"columns": [
							{"width": "24px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "42px"},
							{"width": "100px"},
							{"width": "100px"}
						],
						"header": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "categoryName";
										cell.text = "카테고리이름";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "foodName";
										cell.text = "음식명";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "foodAmount";
										cell.text = "수량";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "endDate";
										cell.text = "유통기한";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "chargeDate";
										cell.text = "구매일";
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.columnType = "rowindex";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.columnName = "categoryName";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.columnName = "foodName";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.columnName = "foodAmount";
										cell.control = (function(){
											var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
											numberEditor_1.bind("value").toDataColumn("foodAmount");
											return numberEditor_1;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.columnName = "endDate";
										cell.control = (function(){
											var dateInput_1 = new cpr.controls.DateInput("dti1");
											dateInput_1.bind("value").toDataColumn("endDate");
											return dateInput_1;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.columnName = "chargeDate";
										cell.control = (function(){
											var dateInput_2 = new cpr.controls.DateInput("dti2");
											dateInput_2.bind("value").toDataColumn("chargeDate");
											return dateInput_2;
										})();
									}
								}
							]
						}
					});
					container.addChild(grid_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
				})(group_1);
				container.addChild(group_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
				if(typeof onBodyPropertyChange == "function"){
					app.addEventListener("property-change", onBodyPropertyChange);
				}
			}
		});
	internalApp.title = "UDCFridgeGrid";
	
	// Type declaration for UDCFridgeGrid
	cpr.utils.Util.ensurePackage("udc.fridge").UDCFridgeGrid = function(id){
		cpr.controls.UDCBase.call(this, "udc.fridge.UDCFridgeGrid", internalApp, id);
	};
	
	udc.fridge.UDCFridgeGrid.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.fridge.UDCFridgeGrid.prototype, "type", {
		get : function(){
			return "udc.fridge.UDCFridgeGrid";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.fridge.UDCFridgeGrid.prototype, "changeGridCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("changeGridCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("changeGridCtrl", newValue, true);
		}
	});
	Object.defineProperty(udc.fridge.UDCFridgeGrid.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.fridge.UDCFridgeGrid
/// start - udc.fridge.UDCFridgeSearch
/*
 * UDC Qualified Name: udc.fridge.UDCFridgeSearch
 * App URI: udc/fridge/UDCFridgeSearch
 * Source Location: udc/fridge/UDCFridgeSearch.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/fridge/UDCFridgeSearch", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * UDCFridgeSearch.js
				 * Created at 2025. 4. 27. 오후 10:33:47.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * "Button" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					
					// 검섹 이벤트 (search-click) 전파하기
					var searchClick = new cpr.events.CUIEvent("search-click-event");
					app.dispatchEvent(searchClick);	
					
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("searchGridCtrl", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "1px";
				formLayout_1.verticalSpacing = "1px";
				formLayout_1.topMargin = "5px";
				formLayout_1.rightMargin = "5px";
				formLayout_1.bottomMargin = "5px";
				formLayout_1.leftMargin = "5px";
				formLayout_1.setColumns(["1fr", "55px"]);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var button_1 = new cpr.controls.Button();
				button_1.value = "검색";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
			}
		});
	internalApp.title = "UDCFridgeSearch";
	
	// Type declaration for UDCFridgeSearch
	cpr.utils.Util.ensurePackage("udc.fridge").UDCFridgeSearch = function(id){
		cpr.controls.UDCBase.call(this, "udc.fridge.UDCFridgeSearch", internalApp, id);
	};
	
	udc.fridge.UDCFridgeSearch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.fridge.UDCFridgeSearch.prototype, "type", {
		get : function(){
			return "udc.fridge.UDCFridgeSearch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.fridge.UDCFridgeSearch.prototype, "searchGridCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("searchGridCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("searchGridCtrl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.fridge.UDCFridgeSearch
/// start - udc.image.UDCImageBox
/*
 * UDC Qualified Name: udc.image.UDCImageBox
 * App URI: udc/image/UDCImageBox
 * Source Location: udc/image/UDCImageBox.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/image/UDCImageBox", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * image.js
				 * Created at 2025. 4. 25. 오전 7:43:21.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
	
				/*
				 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
				 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onSelectFileInputValueChange2(e){
					var selectFileInput = e.control;
					
					
					// 파일 미리보기 이미지 구현 
					var vsFtype = selectFileInput.file.type;
					if (vsFtype.split("/")[0] == "image") {
						var voReader = new FileReader();
						voReader.onload = function(event) {
							var imgctl = app.lookup("sampleImg");
							imgctl.src = event.target.result;
						}
						
						voReader.readAsDataURL(selectFileInput.file);
					}	
					
					// 변경된 파일 객체 전달
					var event = new cpr.events.CUIEvent("test", {file:selectFileInput.file, control: selectFileInput} );
					var result = app.dispatchEvent(event); 
				}
	
	
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onSampleImgClick2(e){
					var sampleImg = e.control;
					var fileInput = app.lookup("selectFileInput");
	
					
					
					// fileInput에 포커스 이동
					fileInput.focus();
					fileInput.openFileChooser();
				}
	
				/*
				 * "x" 버튼(deleteBtn)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onDeleteBtnClick(e){
					var deleteBtn = e.control;
	
					// 이미지 보내기
				//	fileInput.send(app.lookup("sendImage"));
					
					var event = new cpr.events.CUIEvent("removeImageCtrlBtn");
					
					var result = app.dispatchEvent(event); // 이벤트를 던져보고
					
					// e.preventDefault() 하면 
					// - result = false
					// - 아무도 안 하면 result = undefined
					// preventDefault() 가 아닐때 기본동작 실행
					// - result => false가 아닐때
					if(result !== false){
						// 기본 동작 실행 (예: 진짜 삭제 코드)
						alert("기본 삭제 동작 실행!");
						
						var fileInput = app.lookup("selectFileInput");	
						fileInput.file = null;
						var sampleImg = app.lookup("sampleImg");
						// 기존 이미지 미리보기 제거 (기본 사진으로 변경)
						sampleImg.src = "theme/images/heart_empty.svg";
					}
				}
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad2(e){
					
					var event = new cpr.events.CUIEvent("mutiImagesCtrl");
					var result = app.dispatchEvent(event);
					
					
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("ImageCtrl", null);
				app.declareAppProperty("fileCtrl", null);
				var dataMap_1 = new cpr.data.DataMap("dm1");
				dataMap_1.parseData({});
				app.register(dataMap_1);
				var submission_1 = new cpr.protocols.Submission("sendImage");
				submission_1.action = "/api/files/upload-test";
				submission_1.mediaType = "multipart/form-data";
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"background-color" : "#FFFFFF",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "1px";
				formLayout_1.verticalSpacing = "1px";
				formLayout_1.topMargin = "5px";
				formLayout_1.rightMargin = "5px";
				formLayout_1.bottomMargin = "5px";
				formLayout_1.leftMargin = "5px";
				formLayout_1.setColumns(["90px"]);
				formLayout_1.setRows(["1fr", "20px"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("sampleImg");
				image_1.src = "theme/images/heart_empty.svg";
				image_1.style.css({
					"border-right-style" : "solid",
					"border-bottom-color" : "#856c66",
					"border-top-width" : "1px",
					"border-left-style" : "solid",
					"border-right-width" : "1px",
					"border-left-color" : "#856c66",
					"border-bottom-width" : "1px",
					"border-top-color" : "#856c66",
					"border-bottom-style" : "solid",
					"border-right-color" : "#856c66",
					"border-left-width" : "1px",
					"border-top-style" : "solid"
				});
				if(typeof onSampleImgClick2 == "function") {
					image_1.addEventListener("click", onSampleImgClick2);
				}
				container.addChild(image_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				
				var group_1 = new cpr.controls.Container();
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.horizontalSpacing = "1px";
				formLayout_2.verticalSpacing = "0px";
				formLayout_2.topMargin = "0px";
				formLayout_2.rightMargin = "0px";
				formLayout_2.bottomMargin = "0px";
				formLayout_2.leftMargin = "0px";
				formLayout_2.setColumns(["68px", "1fr"]);
				formLayout_2.setRows(["1fr"]);
				group_1.setLayout(formLayout_2);
				(function(container){
					var fileInput_1 = new cpr.controls.FileInput("selectFileInput");
					fileInput_1.style.css({
						"border-right-style" : "solid",
						"border-bottom-color" : "#856c66",
						"border-left-style" : "solid",
						"border-left-color" : "#856c66",
						"border-top-color" : "#856c66",
						"border-bottom-style" : "solid",
						"border-right-color" : "#856c66",
						"border-top-style" : "solid"
					});
					if(typeof onSelectFileInputValueChange2 == "function") {
						fileInput_1.addEventListener("value-change", onSelectFileInputValueChange2);
					}
					container.addChild(fileInput_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var button_1 = new cpr.controls.Button("deleteBtn");
					button_1.value = "x";
					button_1.style.css({
						"border-right-style" : "solid",
						"color" : "#856C66",
						"border-bottom-color" : "#856c66",
						"border-top-width" : "2px",
						"border-right-width" : "2px",
						"border-left-color" : "#856c66",
						"border-right-color" : "#856c66",
						"border-left-width" : "2px",
						"border-top-style" : "solid",
						"border-radius" : "2px",
						"background-color" : "white",
						"border-left-style" : "solid",
						"border-bottom-width" : "2px",
						"border-top-color" : "#856c66",
						"border-bottom-style" : "solid",
						"background-image" : "none"
					});
					if(typeof onDeleteBtnClick == "function") {
						button_1.addEventListener("click", onDeleteBtnClick);
					}
					container.addChild(button_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_1);
				container.addChild(group_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
				if(typeof onBodyLoad2 == "function"){
					app.addEventListener("load", onBodyLoad2);
				}
			}
		});
	internalApp.title = "UDCImageBox";
	
	// Type declaration for UDCImageBox
	cpr.utils.Util.ensurePackage("udc.image").UDCImageBox = function(id){
		cpr.controls.UDCBase.call(this, "udc.image.UDCImageBox", internalApp, id);
	};
	
	udc.image.UDCImageBox.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.image.UDCImageBox.prototype, "type", {
		get : function(){
			return "udc.image.UDCImageBox";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.image.UDCImageBox.prototype, "ImageCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ImageCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ImageCtrl", newValue, true);
		}
	});
	Object.defineProperty(udc.image.UDCImageBox.prototype, "fileCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("fileCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("fileCtrl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.image.UDCImageBox
/// start - udc.mypage.addListButton
/*
 * UDC Qualified Name: udc.mypage.addListButton
 * App URI: udc/mypage/addListButton
 * Source Location: udc/mypage/addListButton.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/addListButton", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * addListButton.js
				 * Created at 2025. 4. 28. 오전 11:07:44.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * "+" 버튼(addButton)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onAddButtonClick(e){
					var addButton = e.control;
					var listContainer = app.lookup("listForm");  
				    // 전체 리스트 묶는 큰 Group이나 Container ID (예: listContainer)
	
				    var newItem = new cpr.controls.Container();  // 새 줄 만들기 (혹은 Group)
				    newItem.addClass("list-item"); // CSS 있으면 클래스 추가
	
				    // 내부에 Output 추가
				    var output = new cpr.controls.Output();
				    output.value = "Output";
				    output.style.addClass("output-style"); // 필요하면 스타일링
	
				    // 내부에 X 버튼 추가
				    var deleteButton = new cpr.controls.Button();
				    deleteButton.value = "X";
				    deleteButton.addEventListener("click", onDeleteButtonClick); // 삭제 이벤트 연결
	
				    // 새 항목에 Output과 Button 추가
				    newItem.addChild(output, {
				        top: "calc(50% - 10px)", 
				        left: "20px", 
				        width: "200px", 
				        height: "20px"
				    });
				    newItem.addChild(deleteButton, {
				        top: "calc(50% - 10px)", 
				        right: "20px", 
				        width: "20px", 
				        height: "20px"
				    });
	
				    // 리스트에 새 항목 추가
				    listContainer.addChild(newItem, {
				        top: undefined,
				        left: undefined,
				        width: "100%",
				        height: "40px"
				    });
				};
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"border-radius" : "100%",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px",
					"font-weight" : "bold"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				xYLayout_1.scrollable = false;
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var button_1 = new cpr.controls.Button("addButton");
				button_1.value = "+";
				button_1.style.css({
					"border-radius" : "100%",
					"color" : "#000000",
					"font-weight" : "bold"
				});
				if(typeof onAddButtonClick == "function") {
					button_1.addEventListener("click", onAddButtonClick);
				}
				container.addChild(button_1, {
					"width": "24px",
					"height": "24px",
					"left": "calc(50% - 12px)",
					"top": "calc(50% - 12px)"
				});
			}
		});
	internalApp.title = "addListButton";
	
	// Type declaration for addListButton
	cpr.utils.Util.ensurePackage("udc.mypage").addListButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.addListButton", internalApp, id);
	};
	
	udc.mypage.addListButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.addListButton.prototype, "type", {
		get : function(){
			return "udc.mypage.addListButton";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.addListButton
/// start - udc.mypage.deleteButton
/*
 * UDC Qualified Name: udc.mypage.deleteButton
 * App URI: udc/mypage/deleteButton
 * Source Location: udc/mypage/deleteButton.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/deleteButton", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * deleteButton.js
				 * Created at 2025. 4. 28. 오후 4:00:56.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var button_1 = new cpr.controls.Button();
				button_1.value = "X";
				container.addChild(button_1, {
					"width": "24px",
					"height": "24px",
					"left": "calc(50% - 12px)",
					"top": "calc(50% - 12px)"
				});
			}
		});
	internalApp.title = "deleteButton";
	
	// Type declaration for deleteButton
	cpr.utils.Util.ensurePackage("udc.mypage").deleteButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.deleteButton", internalApp, id);
	};
	
	udc.mypage.deleteButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.deleteButton.prototype, "type", {
		get : function(){
			return "udc.mypage.deleteButton";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.deleteButton
/// start - udc.mypage.info_tag
/*
 * UDC Qualified Name: udc.mypage.info_tag
 * App URI: udc/mypage/info_tag
 * Source Location: udc/mypage/info_tag.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/info_tag", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * info_tag.js
				 * Created at 2025. 4. 27. 오후 5:20:55.
				 *
				 * @author seongkwan
				 ************************************************/
	
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				if (typeof exports === "undefined") exports = {};
	
				// ✅ UDC 스코프 전체에서 공유되는 상태
				var selectedTags = [];
	
	
				function onBodyLoad(e){
					
					cpr.core.Module.require("module/quicksearch/quickSearch");
					var sms = app.lookup("smsHealthInfoTags");
					sms.send();
					
				}
	
				function addHashtag(tagText) {
					
				    var grpHashtags = app.lookup("tagArea"); // 해시태그를 모아둘 Group
				    if (selectedTags.indexOf(tagText) !== -1) return; // 중복 방지
				    var tag = new cpr.controls.Output(); // 해시태그를 버튼으로
				    tag.value = "#" + tagText;
				    console.log("태그: " + tagText);
				    selectedTags.push(tagText);
				    exports.getSelectedTag=()=>{
						
							var res = selectedTags;
						
							return res;
						}
				    tag.style.css({
				        "background-color": "#ffe4e1",
				        "padding": "3px",
				        "border-radius": "12px",
				        "margin": "4px",
				        "font-size": "13px",
				        "border": "none",
				        "cursor": "pointer"
				    });
				    
				    // 3. 클릭 시 삭제 이벤트
				    tag.addEventListener("click", function(e2) {
				        var outputComp = e2.control;
				        var parent = outputComp.getParent();
	
				        // 태그 텍스트에서 "#" 제거 후 selectedTags에서 제거
				        var valueWithoutHash = outputComp.value.replace(/^#/, "");
				        selectedTags = selectedTags.filter(function(t) {
				            return t !== valueWithoutHash;
				        });
	
				        parent.removeChild(outputComp);
	
				        // 삭제 후 남은 태그 수 출력
				        var remaining = parent.getChildren().filter(function(child) {
				            return child instanceof cpr.controls.Output;
				        }).length;
	
				        console.log("❌ 태그 삭제됨. 현재 개수:", remaining);
				        console.log("🧾 현재 selectedTags:", selectedTags);
				        
				    });
	
				    grpHashtags.addChild(tag, {
				        width: "auto",
				        height: "30px"
				    });
				    
				    // ✅ 길이 3이면 출력
				    if (selectedTags.length === 3) {
				        console.log("✅ 태그 3개 완성됨:", selectedTags);
				    }
				    
				    
				}
	
				/*
				 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
				 * 사용자가 키를 누를 때 발생하는 이벤트. 키코드 관련 상수는 {@link cpr.events.KeyCode}에서 참조할 수 있습니다.
				 */
				function onIpbFirstKeydown2(e){
					var ipbFirst = e.control;
					if (e.keyCode == 13) {
						var ipbFirst = e.control;
						var selectedValue = ipbFirst.value;
						
						addHashtag(selectedValue);
						
						ipbFirst.value = "";
					}
				}
	
				/*
				 * 서브미션에서 receive 이벤트 발생 시 호출.
				 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
				 */
				function onSmsHealthInfoTagsReceive(e){
					var smsHealthInfoTags = e.control;
					var xhr = smsHealthInfoTags.xhr;
					var response = JSON.parse(xhr.responseText);
					
					response.forEach(function(tagText) {
						addHashtag(tagText);
					})
				};
				// End - User Script
				
				// Header
				var submission_1 = new cpr.protocols.Submission("smsHealthInfoTags");
				submission_1.action = "/api/healthInfo/health_interest";
				if(typeof onSmsHealthInfoTagsReceive == "function") {
					submission_1.addEventListener("receive", onSmsHealthInfoTagsReceive);
				}
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"text-align" : "center",
					"vertical-align" : "middle",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"border-radius" : "5px",
					"left" : "0px",
					"color" : "#FFFFFF"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				xYLayout_1.scrollable = false;
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#FFFFFF",
					"color" : "#FFFFFF"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				xYLayout_2.scrollable = false;
				group_1.setLayout(xYLayout_2);
				(function(container){
					var group_2 = new cpr.controls.Container("tagGroup");
					group_2.style.css({
						"border-radius" : "5px",
						"background-color" : "#FFFFFF",
						"color" : "#FFFFFF",
						"vertical-align" : "middle"
					});
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					group_2.setLayout(flowLayout_1);
					(function(container){
						var inputBox_1 = new cpr.controls.InputBox("ipbFirst");
						inputBox_1.value = "";
						inputBox_1.userAttr({
							"submit-action": "../api/healthInfo/search/health_interest",
							"showAssist": "Y"
						});
						inputBox_1.style.css({
							"background-position" : "top left",
							"text-align" : "center"
						});
						if(typeof onIpbFirstSelect == "function") {
							inputBox_1.addEventListener("select", onIpbFirstSelect);
						}
						if(typeof onIpbFirstKeydown2 == "function") {
							inputBox_1.addEventListener("keydown", onIpbFirstKeydown2);
						}
						container.addChild(inputBox_1, {
							"autoSize": "none",
							"width": "203px",
							"height": "20px"
						});
						var group_3 = new cpr.controls.Container("tagArea");
						group_3.style.css({
							"color" : "#FFFFFF",
							"vertical-align" : "middle",
							"text-align" : "center"
						});
						var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
						group_3.setLayout(flowLayout_2);
						container.addChild(group_3, {
							"width": "100%",
							"height": "auto"
						});
					})(group_2);
					container.addChild(group_2, {
						"top": "0px",
						"left": "99px",
						"width": "360px",
						"height": "80px"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"left": "0px",
					"width": "460px",
					"height": "80px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "info_tag";
	
	// Type declaration for info_tag
	cpr.utils.Util.ensurePackage("udc.mypage").info_tag = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.info_tag", internalApp, id);
	};
	
	udc.mypage.info_tag.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.info_tag.prototype, "type", {
		get : function(){
			return "udc.mypage.info_tag";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.info_tag
/// start - udc.mypage.info_tag2
/*
 * UDC Qualified Name: udc.mypage.info_tag2
 * App URI: udc/mypage/info_tag2
 * Source Location: udc/mypage/info_tag2.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/info_tag2", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * info_tag.js
				 * Created at 2025. 4. 27. 오후 5:20:55.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
	
				if (typeof exports === "undefined") exports = {};
	
				// ✅ UDC 스코프 전체에서 공유되는 상태
				var selectedTags = [];
	
	
				function onBodyLoad(e){
					
					cpr.core.Module.require("module/quicksearch/quickSearch");
					var sms = app.lookup("smsHateFoodTags");
					sms.send();
					
					
				}
	
				function addHashtag(tagText) {
					
				    var grpHashtags = app.lookup("tagArea"); // 해시태그를 모아둘 Group
				    if (selectedTags.indexOf(tagText) !== -1) return; // 중복 방지
				    var tag = new cpr.controls.Output(); // 해시태그를 버튼으로
				    tag.value = "#" + tagText;
				    console.log("태그: " + tagText);
				    selectedTags.push(tagText);
				    exports.getSelectedTag=()=>{
						
							var res = selectedTags;
						
							return res;
						}
				    tag.style.css({
				        "background-color": "#ffe4e1",
				        "padding": "3px",
				        "border-radius": "12px",
				        "margin": "4px",
				        "font-size": "13px",
				        "border": "none",
				        "cursor": "pointer"
				    });
				    
				    // 3. 클릭 시 삭제 이벤트
				    tag.addEventListener("click", function(e2) {
				        var outputComp = e2.control;
				        var parent = outputComp.getParent();
	
				        // 태그 텍스트에서 "#" 제거 후 selectedTags에서 제거
				        var valueWithoutHash = outputComp.value.replace(/^#/, "");
				        selectedTags = selectedTags.filter(function(t) {
				            return t !== valueWithoutHash;
				        });
	
				        parent.removeChild(outputComp);
	
				        // 삭제 후 남은 태그 수 출력
				        var remaining = parent.getChildren().filter(function(child) {
				            return child instanceof cpr.controls.Output;
				        }).length;
	
				        console.log("❌ 태그 삭제됨. 현재 개수:", remaining);
				        console.log("🧾 현재 selectedTags:", selectedTags);
				    });
	
				    grpHashtags.addChild(tag, {
				        width: "auto",
				        height: "30px"
				    });
				    
				    // ✅ 길이 3이면 출력
				    if (selectedTags.length === 3) {
				        console.log("✅ 태그 3개 완성됨:", selectedTags);
				    }
				    
				    
				}
	
				/*
				 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
				 * 사용자가 키를 누를 때 발생하는 이벤트. 키코드 관련 상수는 {@link cpr.events.KeyCode}에서 참조할 수 있습니다.
				 */
				function onIpbFirstKeydown2(e){
					var ipbFirst = e.control;
					if (e.keyCode == 13) {
						var ipbFirst = e.control;
						var selectedValue = ipbFirst.value;
						
						addHashtag(selectedValue);
						
						ipbFirst.value = "";
					}
				}
	
				/*
				 * 서브미션에서 receive 이벤트 발생 시 호출.
				 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
				 */
				function onSmsHateFoodTagsReceive(e){
					var smsHateFoodTags = e.control;
					var xhr = smsHateFoodTags.xhr;
					var response = JSON.parse(xhr.responseText);
					
					response.forEach(function(tagText) {
						addHashtag(tagText);
					})
					
				};
				// End - User Script
				
				// Header
				var submission_1 = new cpr.protocols.Submission("smsHateFoodTags");
				submission_1.action = "/api/healthInfo/hate_food";
				if(typeof onSmsHateFoodTagsReceive == "function") {
					submission_1.addEventListener("receive", onSmsHateFoodTagsReceive);
				}
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"text-align" : "center",
					"vertical-align" : "middle",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"border-radius" : "5px",
					"left" : "0px",
					"color" : "#FFFFFF"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				xYLayout_1.scrollable = false;
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#FFFFFF",
					"color" : "#FFFFFF"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				xYLayout_2.scrollable = false;
				group_1.setLayout(xYLayout_2);
				(function(container){
					var group_2 = new cpr.controls.Container("tagGroup");
					group_2.style.css({
						"border-radius" : "5px",
						"background-color" : "#FFFFFF",
						"color" : "#FFFFFF",
						"vertical-align" : "middle"
					});
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					group_2.setLayout(flowLayout_1);
					(function(container){
						var inputBox_1 = new cpr.controls.InputBox("ipbFirst");
						inputBox_1.value = "";
						inputBox_1.userAttr({
							"submit-action": "../api/healthInfo/search/ingredients",
							"showAssist": "Y"
						});
						inputBox_1.style.css({
							"background-position" : "top left",
							"text-align" : "center"
						});
						if(typeof onIpbFirstSelect == "function") {
							inputBox_1.addEventListener("select", onIpbFirstSelect);
						}
						if(typeof onIpbFirstKeydown2 == "function") {
							inputBox_1.addEventListener("keydown", onIpbFirstKeydown2);
						}
						container.addChild(inputBox_1, {
							"autoSize": "none",
							"width": "203px",
							"height": "20px"
						});
						var group_3 = new cpr.controls.Container("tagArea");
						group_3.style.css({
							"color" : "#FFFFFF",
							"vertical-align" : "middle",
							"text-align" : "center"
						});
						var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
						group_3.setLayout(flowLayout_2);
						container.addChild(group_3, {
							"width": "100%",
							"height": "auto"
						});
					})(group_2);
					container.addChild(group_2, {
						"top": "0px",
						"left": "99px",
						"width": "360px",
						"height": "80px"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"left": "0px",
					"width": "460px",
					"height": "80px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "info_tag2";
	
	// Type declaration for info_tag2
	cpr.utils.Util.ensurePackage("udc.mypage").info_tag2 = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.info_tag2", internalApp, id);
	};
	
	udc.mypage.info_tag2.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.info_tag2.prototype, "type", {
		get : function(){
			return "udc.mypage.info_tag2";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.info_tag2
/// start - udc.mypage.info_tag3
/*
 * UDC Qualified Name: udc.mypage.info_tag3
 * App URI: udc/mypage/info_tag3
 * Source Location: udc/mypage/info_tag3.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/info_tag3", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * info_tag.js
				 * Created at 2025. 4. 27. 오후 5:20:55.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
	
				if (typeof exports === "undefined") exports = {};
	
				// ✅ UDC 스코프 전체에서 공유되는 상태
				var selectedTags = [];
	
	
				function onBodyLoad(e){
					
					cpr.core.Module.require("module/quicksearch/quickSearch");
					
					var sms = app.lookup("smsAllergyTags");
					sms.send();
					
					
				}
	
				function addHashtag(tagText) {
					
				    var grpHashtags = app.lookup("tagArea"); // 해시태그를 모아둘 Group
				    if (selectedTags.indexOf(tagText) !== -1) return; // 중복 방지
				    var tag = new cpr.controls.Output(); // 해시태그를 버튼으로
				    tag.value = "#" + tagText;
				    console.log("태그: " + tagText);
				    selectedTags.push(tagText);
				    exports.getSelectedTag=()=>{
						
							var res = selectedTags;
						
							return res;
						}
				    tag.style.css({
				        "background-color": "#ffe4e1",
				        "padding": "3px",
				        "border-radius": "12px",
				        "margin": "4px",
				        "font-size": "13px",
				        "border": "none",
				        "cursor": "pointer"
				    });
				    
				    // 3. 클릭 시 삭제 이벤트
				    tag.addEventListener("click", function(e2) {
				        var outputComp = e2.control;
				        var parent = outputComp.getParent();
	
				        // 태그 텍스트에서 "#" 제거 후 selectedTags에서 제거
				        var valueWithoutHash = outputComp.value.replace(/^#/, "");
				        selectedTags = selectedTags.filter(function(t) {
				            return t !== valueWithoutHash;
				        });
	
				        parent.removeChild(outputComp);
	
				        // 삭제 후 남은 태그 수 출력
				        var remaining = parent.getChildren().filter(function(child) {
				            return child instanceof cpr.controls.Output;
				        }).length;
	
				        console.log("❌ 태그 삭제됨. 현재 개수:", remaining);
				        console.log("🧾 현재 selectedTags:", selectedTags);
				    });
	
				    grpHashtags.addChild(tag, {
				        width: "auto",
				        height: "30px"
				    });
				    
				    // ✅ 길이 3이면 출력
				    if (selectedTags.length === 3) {
				        console.log("✅ 태그 3개 완성됨:", selectedTags);
				    }
				    
				    
				}
	
				/*
				 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
				 * 사용자가 키를 누를 때 발생하는 이벤트. 키코드 관련 상수는 {@link cpr.events.KeyCode}에서 참조할 수 있습니다.
				 */
				function onIpbFirstKeydown2(e){
					var ipbFirst = e.control;
					if (e.keyCode == 13) {
						var ipbFirst = e.control;
						var selectedValue = ipbFirst.value;
						
						addHashtag(selectedValue);
						
						ipbFirst.value = "";
					}
				}
	
				/*
				 * 서브미션에서 receive 이벤트 발생 시 호출.
				 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
				 */
				function onSmsAllergyTagsReceive(e){
					var smsAllergyTags = e.control;
					var xhr = smsAllergyTags.xhr;
					var response = JSON.parse(xhr.responseText);
					
					response.forEach(function(tagText) {
						addHashtag(tagText);
					})
				};
				// End - User Script
				
				// Header
				var submission_1 = new cpr.protocols.Submission("smsAllergyTags");
				submission_1.action = "/api/healthInfo/allergy";
				if(typeof onSmsAllergyTagsReceive == "function") {
					submission_1.addEventListener("receive", onSmsAllergyTagsReceive);
				}
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"text-align" : "center",
					"vertical-align" : "middle",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"border-radius" : "5px",
					"left" : "0px",
					"color" : "#FFFFFF"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				xYLayout_1.scrollable = false;
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#FFFFFF",
					"color" : "#FFFFFF"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				xYLayout_2.scrollable = false;
				group_1.setLayout(xYLayout_2);
				(function(container){
					var group_2 = new cpr.controls.Container("tagGroup");
					group_2.style.css({
						"border-radius" : "5px",
						"background-color" : "#FFFFFF",
						"color" : "#FFFFFF",
						"vertical-align" : "middle"
					});
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					group_2.setLayout(flowLayout_1);
					(function(container){
						var inputBox_1 = new cpr.controls.InputBox("ipbFirst");
						inputBox_1.value = "";
						inputBox_1.userAttr({
							"submit-action": "../api/healthInfo/search/ingredients",
							"showAssist": "Y"
						});
						inputBox_1.style.css({
							"background-position" : "top left",
							"text-align" : "center"
						});
						if(typeof onIpbFirstSelect == "function") {
							inputBox_1.addEventListener("select", onIpbFirstSelect);
						}
						if(typeof onIpbFirstKeydown2 == "function") {
							inputBox_1.addEventListener("keydown", onIpbFirstKeydown2);
						}
						container.addChild(inputBox_1, {
							"autoSize": "none",
							"width": "203px",
							"height": "20px"
						});
						var group_3 = new cpr.controls.Container("tagArea");
						group_3.style.css({
							"color" : "#FFFFFF",
							"vertical-align" : "middle",
							"text-align" : "center"
						});
						var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
						group_3.setLayout(flowLayout_2);
						container.addChild(group_3, {
							"width": "100%",
							"height": "auto"
						});
					})(group_2);
					container.addChild(group_2, {
						"top": "0px",
						"left": "99px",
						"width": "360px",
						"height": "80px"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"left": "0px",
					"width": "460px",
					"height": "80px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "info_tag3";
	
	// Type declaration for info_tag3
	cpr.utils.Util.ensurePackage("udc.mypage").info_tag3 = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.info_tag3", internalApp, id);
	};
	
	udc.mypage.info_tag3.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.info_tag3.prototype, "type", {
		get : function(){
			return "udc.mypage.info_tag3";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.info_tag3
/// start - udc.mypage.infoExpired
/*
 * UDC Qualified Name: udc.mypage.infoExpired
 * App URI: udc/mypage/infoExpired
 * Source Location: udc/mypage/infoExpired.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/infoExpired", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * infoExpired.js
				 * Created at 2025. 4. 28. 오전 1:03:04.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				// 한 group을 세 파트로 나누어서 각각 idx, 음식 이름, 남은 유통기한 일수를 넣는다.
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					var ds = app.lookup("dsMyRef");
				    var sms = app.lookup("smsMyRef");
	
				    // ✅ 먼저 이벤트 리스너 등록
				    sms.addEventListener("submit-success", function(e) {
				        var ds = app.lookup("dsMyRef");
						var container = app.lookup("refInfoGroup"); // UDC들이 들어갈 부모 Container
						
						container.removeAllChildren(); // 기존 것 제거
						
						if (ds.getRowCount() === 0) {
				            // ✅ 재료가 없을 경우 안내 메시지 출력용 Output
				            var msg = new cpr.controls.Output();
				            msg.value = "냉장고에 재료를 추가해보세요.";
				            msg.style.css("color", "gray");
				            msg.style.css("font-weight", "bold");
				            msg.style.css("font-size", "14px");
	
				            container.addChild(msg, {
				                top: "10px",
				                left: "0px",
				                width: "100%",
				                height: "30px"
				            });
	
				            console.log("⚠️ 냉장고가 비어있음");
				            return;
				        }
						
						for (var i = 0; i < ds.getRowCount(); i++) {
						    const foodName = ds.getValue(i, "foodName");
						    const expdate = ds.getValue(i, "expdate");
						
						    const refUdc = new udc.mypage.myRefInfo();
						    refUdc.id = "myRefInfo_" + i;
						
						    //const group = udc.lookup("foodinfogroup");
						    refUdc.setNum(i+1);
						    refUdc.setFoodName(foodName);
						    const expText = Number(expdate) < 0 ? "버리셈" : expdate + "일";
							refUdc.setExpdate(expText);
				//		    group.lookup("num").value = (i + 1) + ".";
				//		    group.lookup("foodname").value = foodName;
				//		    group.lookup("expdate").value = Number(expdate) < 0 ? "버리셈" : expdate + "일";
						
						    container.addChild(refUdc, {
						        top: i * 45 + "px",
						        left: "0px",
						        width: "460px",
						        height: "42px"
						    });
						}
					    console.log("✅ 냉장고 식재료 출력 완료");
					    });
	
				    // ✅ 그 다음 send 호출
				    sms.send();
				}
	
				/*
				 * "내 냉장고 보러가기" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					window.location.href = "/fridge"
				};
				// End - User Script
				
				// Header
				var dataSet_1 = new cpr.data.DataSet("dsMyRef");
				dataSet_1.parseData({
					"columns" : [
						{"name": "foodName"},
						{
							"name": "expdate",
							"dataType": "string"
						}
					]
				});
				app.register(dataSet_1);
				var dataMap_1 = new cpr.data.DataMap("dmMyRef");
				dataMap_1.parseData({
					"columns" : [
						{
							"name": "foodName",
							"dataType": "string"
						},
						{"name": "expdate"}
					]
				});
				app.register(dataMap_1);
				var submission_1 = new cpr.protocols.Submission("smsMyRef");
				submission_1.withCredentials = true;
				submission_1.action = "/api/mypage/myrefre";
				submission_1.addResponseData(dataSet_1, false);
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#EAF1F3"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output("title");
					output_1.value = "내 식재료 유통기한";
					output_1.style.css({
						"color" : "#856C66",
						"font-weight" : "bold",
						"font-size" : "20px",
						"text-align" : "center"
					});
					if(typeof onTitleValueChange == "function") {
						output_1.addEventListener("value-change", onTitleValueChange);
					}
					container.addChild(output_1, {
						"top": "20px",
						"width": "215px",
						"height": "26px",
						"left": "calc(50% - 107px)"
					});
					var group_2 = new cpr.controls.Container("refInfoGroup");
					var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
					group_2.setLayout(verticalLayout_1);
					container.addChild(group_2, {
						"top": "72px",
						"width": "480px",
						"height": "275px",
						"left": "calc(50% - 240px)"
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "내 냉장고 보러가기";
					button_1.style.css({
						"border-radius" : "5px",
						"background-color" : "#6DC4DD"
					});
					if(typeof onButtonClick == "function") {
						button_1.addEventListener("click", onButtonClick);
					}
					container.addChild(button_1, {
						"top": "385px",
						"width": "460px",
						"height": "40px",
						"left": "calc(50% - 230px)"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"left": "0px",
					"width": "520px",
					"height": "440px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "infoExpired";
	
	// Type declaration for infoExpired
	cpr.utils.Util.ensurePackage("udc.mypage").infoExpired = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.infoExpired", internalApp, id);
	};
	
	udc.mypage.infoExpired.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.infoExpired.prototype, "type", {
		get : function(){
			return "udc.mypage.infoExpired";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.infoExpired
/// start - udc.mypage.infoHealth
/*
 * UDC Qualified Name: udc.mypage.infoHealth
 * App URI: udc/mypage/infoHealth
 * Source Location: udc/mypage/infoHealth.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/infoHealth", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * info.js
				 * Created at 2025. 4. 27. 오후 4:59:03.
				 *
				 * @author seongkwan
				 ************************************************/
				const showToastModule = cpr.core.Module.require("module/common/showToast");
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * "내 건강 정보 수정하기" 버튼(healthInfo_submit)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onHealthInfo_submitClick(e){
					var healthInfo_submit = e.control;
					var allergy = app.lookup("allergy").callAppMethod("getSelectedTag");
					var hatefood =   app.lookup("hatefood").callAppMethod("getSelectedTag");
					var healthinterest = app.lookup("healthinterset").callAppMethod("getSelectedTag");
					
					console.log("선택된 태그:", allergy);
					console.log("선택된 태그2", hatefood);
					console.log("선택된 태그3", healthinterest);
					
					var dmhealthInfo = app.lookup("dmHealthInfo");
					var smshealthInfo = app.lookup("smsHealthInfo"); 
					dmhealthInfo.setValue("allergy",allergy);
					dmhealthInfo.setValue("hateFood", hatefood);
					dmhealthInfo.setValue("interestInfo", healthinterest);
					
					smshealthInfo.addEventListenerOnce("submit-success", function(e) {
					    console.log("✅ 저장 완료 → 최신 정보 다시 불러옴");
					    alert("저장 완료되었습니다!")
					    showToastModule.showToast("저장 완료되었습니다!", 2000);
					    app.lookup("smsHealthInfo").send();  // GET 요청으로 다시 가져오기
				  	});
					
					smshealthInfo.send();
						
				};
				// End - User Script
				
				// Header
				var dataMap_1 = new cpr.data.DataMap("dmHealthInfo");
				dataMap_1.parseData({
					"columns" : [
						{
							"name": "allergy",
							"dataType": "string"
						},
						{"name": "hateFood"},
						{"name": "interestInfo"}
					]
				});
				app.register(dataMap_1);
				var submission_1 = new cpr.protocols.Submission("smsHealthInfo");
				submission_1.withCredentials = true;
				submission_1.action = "/api/healthInfo/save";
				submission_1.addRequestData(dataMap_1);
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container("health_info");
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#E5E6C7",
					"vertical-align" : "middle"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				xYLayout_2.scrollable = false;
				group_1.setLayout(xYLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output("title");
					output_1.value = "나의 건강 정보";
					output_1.style.css({
						"color" : "#856C66",
						"font-weight" : "bold",
						"font-size" : "20px",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"top": "34px",
						"width": "161px",
						"height": "26px",
						"left": "calc(50% - 80px)"
					});
					var button_1 = new cpr.controls.Button("healthInfo_submit");
					button_1.value = "내 건강 정보 수정하기";
					button_1.style.css({
						"border-radius" : "5px",
						"background-color" : "#D9DC7D"
					});
					if(typeof onHealthInfo_submitClick == "function") {
						button_1.addEventListener("click", onHealthInfo_submitClick);
					}
					container.addChild(button_1, {
						"top": "373px",
						"width": "460px",
						"height": "40px",
						"left": "calc(50% - 230px)"
					});
					var userDefinedControl_1 = new udc.mypage.info_tag("healthinterset");
					container.addChild(userDefinedControl_1, {
						"top": "277px",
						"left": "30px",
						"width": "460px",
						"height": "85px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "관심 있는\r\n건강 정보";
					output_2.style.css({
						"border-radius" : "5px",
						"color" : "#856C66",
						"text-align" : "center"
					});
					container.addChild(output_2, {
						"top": "277px",
						"left": "30px",
						"width": "100px",
						"height": "74px"
					});
					var userDefinedControl_2 = new udc.mypage.info_tag2("hatefood");
					container.addChild(userDefinedControl_2, {
						"top": "183px",
						"left": "31px",
						"width": "460px",
						"height": "85px"
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "싫어하는\r\n음식 정보";
					output_3.style.css({
						"border-radius" : "5px",
						"color" : "#856C66",
						"text-align" : "center"
					});
					container.addChild(output_3, {
						"top": "184px",
						"left": "30px",
						"width": "100px",
						"height": "74px"
					});
					var userDefinedControl_3 = new udc.mypage.info_tag3("allergy");
					container.addChild(userDefinedControl_3, {
						"top": "88px",
						"left": "31px",
						"width": "460px",
						"height": "85px"
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "알러지\r\n정보";
					output_4.style.css({
						"border-radius" : "5px",
						"color" : "#856C66",
						"text-align" : "center"
					});
					container.addChild(output_4, {
						"top": "88px",
						"left": "30px",
						"width": "100px",
						"height": "74px"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"left": "0px",
					"width": "520px",
					"height": "440px"
				});
				if(typeof onBodyLoad2 == "function"){
					app.addEventListener("load", onBodyLoad2);
				}
			}
		});
	internalApp.title = "infoHealth";
	
	// Type declaration for infoHealth
	cpr.utils.Util.ensurePackage("udc.mypage").infoHealth = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.infoHealth", internalApp, id);
	};
	
	udc.mypage.infoHealth.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.infoHealth.prototype, "type", {
		get : function(){
			return "udc.mypage.infoHealth";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.infoHealth
/// start - udc.mypage.myRefInfo
/*
 * UDC Qualified Name: udc.mypage.myRefInfo
 * App URI: udc/mypage/myRefInfo
 * Source Location: udc/mypage/myRefInfo.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/myRefInfo", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * myRefInfo.js
				 * Created at 2025. 5. 2. 오후 2:17:51.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				exports.setFoodName = function(val) {
				  app.lookup("foodname").value = val;
				};
	
				exports.setExpdate = function(val) {
				  app.lookup("expdate").value = val;
				};
	
				exports.setNum = function(val) {
				  app.lookup("num").value = val + ".";
				};
				// End - User Script
				
				// Header
				app.declareBindableAppProperty("num", null);
				app.declareBindableAppProperty("foodName", null);
				app.declareBindableAppProperty("expdate", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"background-color" : "#FFFFFF",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"border-radius" : "5px",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container("foodinfogroup");
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output("foodname");
					output_1.value = "Output";
					container.addChild(output_1, {
						"top": "10px",
						"left": "68px",
						"width": "244px",
						"height": "22px"
					});
					var output_2 = new cpr.controls.Output("num");
					output_2.value = "Output";
					container.addChild(output_2, {
						"top": "10px",
						"left": "22px",
						"width": "22px",
						"height": "22px"
					});
					var output_3 = new cpr.controls.Output("expdate");
					output_3.value = "Output";
					container.addChild(output_3, {
						"top": "10px",
						"left": "340px",
						"width": "100px",
						"height": "22px"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"width": "460px",
					"height": "42px",
					"left": "calc(50% - 230px)"
				});
			}
		});
	internalApp.title = "myRefInfo";
	
	// Type declaration for myRefInfo
	cpr.utils.Util.ensurePackage("udc.mypage").myRefInfo = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.myRefInfo", internalApp, id);
	};
	
	udc.mypage.myRefInfo.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.myRefInfo.prototype, "type", {
		get : function(){
			return "udc.mypage.myRefInfo";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.mypage.myRefInfo.prototype, "num", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("num");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("num", newValue, true);
		}
	});
	Object.defineProperty(udc.mypage.myRefInfo.prototype, "foodName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("foodName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("foodName", newValue, true);
		}
	});
	Object.defineProperty(udc.mypage.myRefInfo.prototype, "expdate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("expdate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("expdate", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.myRefInfo
/// start - udc.mypage.mytable
/*
 * UDC Qualified Name: udc.mypage.mytable
 * App URI: udc/mypage/mytable
 * Source Location: udc/mypage/mytable.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/mytable", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * mytable.js
				 * Created at 2025. 5. 3. 오전 4:04:14.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var grid_1 = new cpr.controls.Grid("grd1");
					grid_1.init({
						"columns": [
							{"width": "44px"},
							{"width": "139px"},
							{"width": "117px"},
							{"width": "100px"},
							{"width": "100px"}
						],
						"header": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
									}
								}
							]
						}
					});
					container.addChild(grid_1, {
						"top": "20px",
						"width": "480px",
						"height": "260px",
						"left": "calc(50% - 240px)"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "520px",
					"height": "300px",
					"left": "calc(50% - 260px)",
					"top": "calc(50% - 150px)"
				});
			}
		});
	internalApp.title = "mytable";
	
	// Type declaration for mytable
	cpr.utils.Util.ensurePackage("udc.mypage").mytable = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.mytable", internalApp, id);
	};
	
	udc.mypage.mytable.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.mytable.prototype, "type", {
		get : function(){
			return "udc.mypage.mytable";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.mytable
/// start - udc.mypage.profile
/*
 * UDC Qualified Name: udc.mypage.profile
 * App URI: udc/mypage/profile
 * Source Location: udc/mypage/profile.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mypage/profile", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * profile.js
				 * Created at 2025. 4. 27. 오후 3:51:40.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					
					var dm = app.lookup("dmProfile");
				    var sms = app.lookup("smsProfile");
	
				    // ✅ 먼저 이벤트 리스너 등록
				    sms.addEventListener("submit-success", function(e) {
				        var nicknameValue = dm.getValue("nickname");
				        var createdAtValue = dm.getValue("createdAt");
	
				        var nickname = app.lookup("nickname");
				        var createdAt = app.lookup("createdAt");
	
				        nickname.value = nicknameValue;
				        createdAt.value = createdAtValue;
	
				        console.log("✅ 닉네임:", nicknameValue);
				        console.log("✅ 가입일:", createdAtValue);
				    });
	
				    // ✅ 그 다음 send 호출
				    sms.send();
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onImageClick(e){
					var image = e.control;
					var file = new cpr.controls.Output();
				};
				// End - User Script
				
				// Header
				var dataMap_1 = new cpr.data.DataMap("dmProfile");
				dataMap_1.parseData({
					"columns" : [
						{"name": "nickname"},
						{"name": "createdAt"}
					]
				});
				app.register(dataMap_1);
				var submission_1 = new cpr.protocols.Submission("smsProfile");
				submission_1.withCredentials = true;
				submission_1.action = "/api/mypage/profile";
				submission_1.addResponseData(dataMap_1, false);
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"border-bottom-style" : "none",
					"border-top-style" : "none",
					"border-right-style" : "none",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px",
					"border-left-style" : "none"
				});
				
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				container.setLayout(verticalLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#FBDBCF"
				});
				var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
				group_1.setLayout(responsiveXYLayout_1);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "닉네임:";
					output_1.style.css({
						"font-weight" : "bold",
						"font-size" : "16px",
						"font-family" : "@Kim jung chul Myungjo Bold"
					});
					container.addChild(output_1, {
						positions: [
							{
								"media": "all and (min-width: 1024px)",
								"top": "20px",
								"left": "144px",
								"width": "100px",
								"height": "27px"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
								"top": "20px",
								"left": "70px",
								"width": "49px",
								"height": "27px"
							}, 
							{
								"media": "all and (max-width: 499.984px)",
								"top": "20px",
								"left": "49px",
								"width": "34px",
								"height": "27px"
							}
						]
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "가입일:";
					output_2.style.css({
						"font-weight" : "bold",
						"font-size" : "16px"
					});
					container.addChild(output_2, {
						positions: [
							{
								"media": "all and (min-width: 1024px)",
								"top": "79px",
								"left": "144px",
								"width": "100px",
								"height": "30px"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
								"top": "79px",
								"left": "70px",
								"width": "49px",
								"height": "30px"
							}, 
							{
								"media": "all and (max-width: 499.984px)",
								"top": "79px",
								"left": "49px",
								"width": "34px",
								"height": "30px"
							}
						]
					});
					var output_3 = new cpr.controls.Output("nickname");
					output_3.style.css({
						"background-color" : "#FFFFFF",
						"border-radius" : "5px",
						"text-align" : "center"
					});
					output_3.bind("value").toDataMap(app.lookup("dmProfile"), "nickname");
					container.addChild(output_3, {
						positions: [
							{
								"media": "all and (min-width: 1024px)",
								"top": "20px",
								"left": "279px",
								"width": "120px",
								"height": "40px"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
								"top": "20px",
								"left": "136px",
								"width": "59px",
								"height": "40px"
							}, 
							{
								"media": "all and (max-width: 499.984px)",
								"top": "20px",
								"left": "95px",
								"width": "41px",
								"height": "40px"
							}
						]
					});
					var output_4 = new cpr.controls.Output("createdAt");
					output_4.style.css({
						"background-color" : "#FFFFFF",
						"border-radius" : "5px",
						"text-align" : "center"
					});
					output_4.bind("value").toDataMap(app.lookup("dmProfile"), "createdAt");
					container.addChild(output_4, {
						positions: [
							{
								"media": "all and (min-width: 1024px)",
								"top": "69px",
								"left": "279px",
								"width": "120px",
								"height": "40px"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
								"top": "69px",
								"left": "136px",
								"width": "59px",
								"height": "40px"
							}, 
							{
								"media": "all and (max-width: 499.984px)",
								"top": "69px",
								"left": "95px",
								"width": "41px",
								"height": "40px"
							}
						]
					});
					var image_1 = new cpr.controls.Image();
					image_1.src = "theme/images/user.svg";
					container.addChild(image_1, {
						positions: [
							{
								"media": "all and (min-width: 1024px)",
								"top": "20px",
								"left": "20px",
								"width": "100px",
								"height": "88px"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
								"top": "20px",
								"left": "10px",
								"width": "49px",
								"height": "88px"
							}, 
							{
								"media": "all and (max-width: 499.984px)",
								"top": "20px",
								"left": "7px",
								"width": "34px",
								"height": "88px"
							}
						]
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "520px",
					"height": "124px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "profile";
	
	// Type declaration for profile
	cpr.utils.Util.ensurePackage("udc.mypage").profile = function(id){
		cpr.controls.UDCBase.call(this, "udc.mypage.profile", internalApp, id);
	};
	
	udc.mypage.profile.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mypage.profile.prototype, "type", {
		get : function(){
			return "udc.mypage.profile";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mypage.profile
/// start - udc.recipe.cooking_process
/*
 * UDC Qualified Name: udc.recipe.cooking_process
 * App URI: udc/recipe/cooking_process
 * Source Location: udc/recipe/cooking_process.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/cooking_process", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * cooking_process.js
				 * Created at 2025. 4. 23. 오후 6:16:01.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.declareAppProperty("sequence", null);
				app.declareAppProperty("explanation", null);
				app.declareAppProperty("img", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.setColumns(["20px", "1fr", "10px", "100px"]);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image();
				image_1.style.css({
					"border-radius" : "5px"
				});
				image_1.bind("src").toAppProperty("img");
				container.addChild(image_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
				
				var output_1 = new cpr.controls.Output();
				output_1.style.css({
					"vertical-align" : "top"
				});
				output_1.bind("value").toAppProperty("explanation");
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				
				var output_2 = new cpr.controls.Output();
				output_2.style.css({
					"color" : "#856C66",
					"font-weight" : "bold",
					"vertical-align" : "top",
					"font-size" : "16px"
				});
				output_2.bind("value").toAppProperty("sequence");
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
			}
		});
	internalApp.title = "cooking_process";
	
	// Type declaration for cooking_process
	cpr.utils.Util.ensurePackage("udc.recipe").cooking_process = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.cooking_process", internalApp, id);
	};
	
	udc.recipe.cooking_process.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.cooking_process.prototype, "type", {
		get : function(){
			return "udc.recipe.cooking_process";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.cooking_process.prototype, "sequence", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("sequence");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("sequence", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.cooking_process.prototype, "explanation", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("explanation");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("explanation", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.cooking_process.prototype, "img", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("img");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("img", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.cooking_process
/// start - udc.recipe.cooking_process_create
/*
 * UDC Qualified Name: udc.recipe.cooking_process_create
 * App URI: udc/recipe/cooking_process_create
 * Source Location: udc/recipe/cooking_process_create.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/cooking_process_create", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * cooking_process_create.js
				 * Created at 2025. 4. 24. 오후 3:28:32.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
	
				exports.getCookingProcessValue=()=>{
					const stepDescriptionValue = app.lookup("stepDescription").value;
					const stepFile = app.lookup("fileUrl").file;
					
					return {stepDescription:stepDescriptionValue, fileUrl:stepFile};
				}
	
				function getImage() {
					var vcFit = app.lookup("fileUrl");
					
					//필요에 따라 파일인풋의 선택된 파일이 이미지인 경우에만 다음의 동작을 수행합니다.
					var vsFtype = vcFit.file.type;
					console.log(vsFtype);
					if (vsFtype.split("/")[0] == "image") {
						var voReader = new FileReader();
						voReader.onload = function(event) {
							console.log(vcFit.file);
							vcFit.style.css({
								"backgroundImage": `url(event.target.result)`,
							})
						}
						voReader.readAsDataURL(vcFit.file);	
					}
				}
	
				/*
				 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
				 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onFileUrlValueChange(e){
					var fileUrl = e.control;
					getImage();
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("seq", null);
				app.declareAppProperty("explanation", null);
				app.declareAppProperty("img", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.setColumns(["20px", "80px", "10px", "1fr"]);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var fileInput_1 = new cpr.controls.FileInput("fileUrl");
				fileInput_1.placeholder = "사진 업로드";
				fileInput_1.bind("value").toAppProperty("img");
				if(typeof onFileUrlValueChange == "function") {
					fileInput_1.addEventListener("value-change", onFileUrlValueChange);
				}
				container.addChild(fileInput_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				
				var textArea_1 = new cpr.controls.TextArea("stepDescription");
				textArea_1.placeholder = "예) 스팸을 한입에 먹기 좋게 깍뚝 썰어주세요";
				textArea_1.bind("value").toAppProperty("explanation");
				container.addChild(textArea_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
				
				var output_1 = new cpr.controls.Output("stepNumber");
				output_1.bind("value").toAppProperty("seq");
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "top"
				});
			}
		});
	internalApp.title = "cooking_process_create";
	
	// Type declaration for cooking_process_create
	cpr.utils.Util.ensurePackage("udc.recipe").cooking_process_create = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.cooking_process_create", internalApp, id);
	};
	
	udc.recipe.cooking_process_create.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.cooking_process_create.prototype, "type", {
		get : function(){
			return "udc.recipe.cooking_process_create";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.cooking_process_create.prototype, "seq", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("seq");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("seq", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.cooking_process_create.prototype, "explanation", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("explanation");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("explanation", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.cooking_process_create.prototype, "img", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("img");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("img", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.cooking_process_create
/// start - udc.recipe.group_subtitle
/*
 * UDC Qualified Name: udc.recipe.group_subtitle
 * App URI: udc/recipe/group_subtitle
 * Source Location: udc/recipe/group_subtitle.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/group_subtitle", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * group_subtitle.js
				 * Created at 2025. 4. 23. 오후 5:58:28.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.declareAppProperty("value", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var output_1 = new cpr.controls.Output();
				output_1.style.css({
					"font-weight" : "bold",
					"font-size" : "16px",
					"text-align" : "center"
				});
				output_1.bind("value").toAppProperty("value");
				container.addChild(output_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			}
		});
	internalApp.title = "group_subtitle";
	
	// Type declaration for group_subtitle
	cpr.utils.Util.ensurePackage("udc.recipe").group_subtitle = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.group_subtitle", internalApp, id);
	};
	
	udc.recipe.group_subtitle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.group_subtitle.prototype, "type", {
		get : function(){
			return "udc.recipe.group_subtitle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.group_subtitle.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.group_subtitle
/// start - udc.recipe.ingredient_create
/*
 * UDC Qualified Name: udc.recipe.ingredient_create
 * App URI: udc/recipe/ingredient_create
 * Source Location: udc/recipe/ingredient_create.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/ingredient_create", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * ingredient_create.js
				 * Created at 2025. 4. 24. 오후 3:14:43.
				 *
				 * @author gyrud
				 ************************************************/
	
				const isLastPathSegmentNumberMd = cpr.core.Module.require("module/common/isLastPathSegmentNumber");
				const isLastPathSegmentNumber = isLastPathSegmentNumberMd.isLastPathSegmentNumber();
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					/** @type cpr.controls.Grid */
					if (!isLastPathSegmentNumber[0]) {
						const ingredientGrid = app.lookup("ingredientGrid");
						ingredientGrid.insertRow(0, true);	
					}
				}
	
				/*
				 * "재료 추가하기" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonInsertClick(e){
					const button = e.control;
					
					/** @type cpr.controls.Grid */
					const ingredientGrid = app.lookup("ingredientGrid");
					const rowCountIndex = ingredientGrid.getRowCount();
					
					ingredientGrid.insertRow(rowCountIndex, true);
				}
	
				/*
				 * "재료 삭제하기" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonDeleteClick(e){
					const button = e.control;
					
					/** @type cpr.controls.Grid */
					const ingredientGrid = app.lookup("ingredientGrid");
					// 선택된 로우 수
					const selectRow = ingredientGrid.getSelectedRowIndex();
					
					if(selectRow != -1){
						ingredientGrid.deleteRow(selectRow);
						ingredientGrid.revertRowData(selectRow);
					}else{
						alert("삭제할 재료를 선택해주세요!");
					}
				}
	
				/*
				 * "재료 그룹 삭제하기" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onGroupDeleteButtonClick(e){
					const deleteEvent = new cpr.events.CMouseEvent("delete");
					app.dispatchEvent(deleteEvent);
				}
					
				exports.getIngredientsList=()=>{
					const ingredientGroupValue = app.lookup("ingredientGroupValue");
					const ingredientGrid = app.lookup("ingredientGrid");
					const group = ingredientGroupValue.value;
					
					const ingredientsJson = ingredientGrid.getExportData();
					let ingredientsList = ingredientsJson.rowgroups[1].data;
					
					for(let i=0; i<ingredientsList.length; i++){
						ingredientsList[i].push(group);
					}
						
					const ingredientsResult = ingredientsList.map(item => ({
						ingredientName: item[0],
					    ingredientQuantity: item[1],
					    ingredientUnit: item[2],
					    ingredientGroup: item[3]
					}));
					
					return ingredientsResult;
				}
	
				exports.setIngredientsList=(data)=>{
					const ingredientGroupValue = app.lookup("ingredientGroupValue");
					const ingredientGrid = app.lookup("ingredientGrid");
	
					const groupName = Object.keys(data)[0];
					ingredientGroupValue.value = groupName;
					
					const ingredients = data[groupName]; 
					
					for (let i = 0; i < ingredients.length; i++) {
						let rowData = {
							"ingredientName" :ingredients[i].ingredientName,
							"ingredientQuantity": ingredients[i].ingredientQuantity,
							"ingredientUnit": ingredients[i].ingredientUnit
						}
						
						// 그리드의 신규 행을 추가
						let insertRow = ingredientGrid.insertRow(i, true);
	
						// 신규행의 데이터 갱신
						ingredientGrid.updateRow(insertRow.getIndex(), rowData);
				    }
				};
				// End - User Script
				
				// Header
				var dataSet_1 = new cpr.data.DataSet("ingredientGridDs");
				dataSet_1.parseData({
					"alterColumnLayout": "server",
					"columns": [
						{
							"name": "ingredientName",
							"dataType": "string"
						},
						{
							"name": "ingredientQuantity",
							"dataType": "number"
						},
						{"name": "ingredientUnit"},
						{"name": "ingredientGroup"},
						{
							"name": "id",
							"dataType": "number"
						}
					]
				});
				app.register(dataSet_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				container.setLayout(verticalLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_1);
				(function(container){
					var button_1 = new cpr.controls.Button();
					button_1.value = "재료 그룹 삭제하기";
					if(typeof onGroupDeleteButtonClick == "function") {
						button_1.addEventListener("click", onGroupDeleteButtonClick);
					}
					container.addChild(button_1, {
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"width": "150px"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "400px",
					"height": "20px"
				});
				
				var group_2 = new cpr.controls.Container();
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "재료 그룹명";
					container.addChild(output_1, {
						"top": "0px",
						"right": "400px",
						"bottom": "0px",
						"left": "0px"
					});
					var inputBox_1 = new cpr.controls.InputBox("ingredientGroupValue");
					inputBox_1.placeholder = "예) 양념, 주재료, 소스";
					container.addChild(inputBox_1, {
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "100px"
					});
				})(group_2);
				container.addChild(group_2, {
					"width": "400px",
					"height": "30px"
				});
				
				var grid_1 = new cpr.controls.Grid("ingredientGrid");
				grid_1.init({
					"dataSet": app.lookup("ingredientGridDs"),
					"columns": [
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "ingredientName";
									cell.text = "재료";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "ingredientQuantity";
									cell.text = "수량";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "ingredientUnit";
									cell.text = "단위";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "ingredientName";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("ipb1");
										inputBox_2.bind("value").toDataColumn("ingredientName");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "ingredientQuantity";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("ipb2");
										inputBox_3.bind("value").toDataColumn("ingredientQuantity");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "ingredientUnit";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("ipb3");
										inputBox_4.bind("value").toDataColumn("ingredientUnit");
										return inputBox_4;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"autoSize": "height",
					"width": "400px",
					"height": "50px"
				});
				
				var group_3 = new cpr.controls.Container();
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.horizontalSpacing = 10;
				flowLayout_1.verticalSpacing = 0;
				group_3.setLayout(flowLayout_1);
				(function(container){
					var button_2 = new cpr.controls.Button("ingredientAddBtn");
					button_2.value = "재료 추가하기";
					if(typeof onButtonInsertClick == "function") {
						button_2.addEventListener("click", onButtonInsertClick);
					}
					container.addChild(button_2, {
						"autoSize": "none",
						"width": "48%",
						"height": "20px"
					});
					var button_3 = new cpr.controls.Button("ingredientDelBtn");
					button_3.value = "재료 제외하기";
					if(typeof onButtonDeleteClick == "function") {
						button_3.addEventListener("click", onButtonDeleteClick);
					}
					container.addChild(button_3, {
						"width": "48%",
						"height": "20px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "400px",
					"height": "20px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "ingredient_create";
	
	// Type declaration for ingredient_create
	cpr.utils.Util.ensurePackage("udc.recipe").ingredient_create = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.ingredient_create", internalApp, id);
	};
	
	udc.recipe.ingredient_create.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.ingredient_create.prototype, "type", {
		get : function(){
			return "udc.recipe.ingredient_create";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.ingredient_create
/// start - udc.recipe.recipe_card
/*
 * UDC Qualified Name: udc.recipe.recipe_card
 * App URI: udc/recipe/recipe_card
 * Source Location: udc/recipe/recipe_card.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_card", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_card.js
				 * Created at 2025. 4. 21. 오전 10:31:19.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBodyClick(e){
					var group = e.control;
					history.pushState({}, '', `/recipe/${group.fieldLabel}`);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("title", "-");
				app.declareAppProperty("typeCategory", "-");
				app.declareAppProperty("situationCategory", "-");
				app.declareAppProperty("methodCategory", "-");
				app.declareAppProperty("difficulty", "-");
				app.declareAppProperty("cookingTime", "-");
				app.declareAppProperty("author", "-");
				app.declareAppProperty("likesCount", "-");
				app.declareAppProperty("recipeImg", "../../theme/images/recipe.svg");
				app.declareAppProperty("calories", "-");
				app.declareAppProperty("recipeId", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				container.bind("fieldLabel").toAppProperty("recipeId");
				
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_1.spacing = 0;
				container.setLayout(verticalLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image();
				image_1.style.css({
					"border-radius" : "5px",
					"box-shadow" : "0 2px 6px rgba(0, 0, 0, 0.1)"
				});
				image_1.bind("src").toAppProperty("recipeImg");
				container.addChild(image_1, {
					"width": "250px",
					"height": "250px"
				});
				
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#FBF3EB",
					"box-shadow" : "0 2px 6px rgba(0, 0, 0, 0.1)"
				});
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_1);
				(function(container){
					var group_2 = new cpr.controls.Container();
					var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
					group_2.setLayout(verticalLayout_2);
					(function(container){
						var output_1 = new cpr.controls.Output("recipeTitle");
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "5px"
						});
						output_1.bind("value").toAppProperty("title");
						container.addChild(output_1, {
							"autoSize": "both",
							"width": "250px",
							"height": "25px"
						});
						var group_3 = new cpr.controls.Container();
						var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
						flowLayout_1.horizontalSpacing = 5;
						flowLayout_1.verticalSpacing = 0;
						flowLayout_1.verticalAlign = "middle";
						flowLayout_1.lineWrap = false;
						group_3.setLayout(flowLayout_1);
						(function(container){
							var output_2 = new cpr.controls.Output("recipeTypeCate");
							output_2.style.css({
								"border-right-style" : "solid",
								"padding-top" : "3px",
								"border-top-width" : "1px",
								"border-bottom-color" : "#856c66",
								"color" : "#856c66",
								"border-right-width" : "1px",
								"padding-left" : "7px",
								"border-left-color" : "#856c66",
								"font-size" : "12px",
								"padding-bottom" : "3px",
								"border-right-color" : "#856c66",
								"border-left-width" : "1px",
								"border-top-style" : "solid",
								"border-radius" : "5px",
								"border-left-style" : "solid",
								"border-bottom-width" : "1px",
								"border-top-color" : "#856c66",
								"border-bottom-style" : "solid",
								"padding-right" : "7px"
							});
							output_2.bind("value").toAppProperty("typeCategory");
							container.addChild(output_2, {
								"autoSize": "both",
								"width": "50px",
								"height": "20px"
							});
							var output_3 = new cpr.controls.Output("recipeSituationCate");
							output_3.style.css({
								"border-right-style" : "solid",
								"padding-top" : "3px",
								"border-top-width" : "1px",
								"border-bottom-color" : "#856c66",
								"color" : "#856c66",
								"border-right-width" : "1px",
								"padding-left" : "7px",
								"border-left-color" : "#856c66",
								"font-size" : "12px",
								"padding-bottom" : "3px",
								"border-right-color" : "#856c66",
								"border-left-width" : "1px",
								"border-top-style" : "solid",
								"border-radius" : "5px",
								"border-left-style" : "solid",
								"border-bottom-width" : "1px",
								"border-top-color" : "#856c66",
								"border-bottom-style" : "solid",
								"padding-right" : "7px"
							});
							output_3.bind("value").toAppProperty("situationCategory");
							container.addChild(output_3, {
								"autoSize": "both",
								"width": "50px",
								"height": "20px"
							});
							var output_4 = new cpr.controls.Output("recipeMethodCater");
							output_4.style.css({
								"border-right-style" : "solid",
								"padding-top" : "3px",
								"border-top-width" : "1px",
								"border-bottom-color" : "#856c66",
								"color" : "#856c66",
								"border-right-width" : "1px",
								"padding-left" : "7px",
								"border-left-color" : "#856c66",
								"font-size" : "12px",
								"padding-bottom" : "3px",
								"border-right-color" : "#856c66",
								"border-left-width" : "1px",
								"border-top-style" : "solid",
								"border-radius" : "5px",
								"border-left-style" : "solid",
								"border-bottom-width" : "1px",
								"border-top-color" : "#856c66",
								"border-bottom-style" : "solid",
								"padding-right" : "7px"
							});
							output_4.bind("value").toAppProperty("methodCategory");
							container.addChild(output_4, {
								"autoSize": "both",
								"width": "50px",
								"height": "20px"
							});
						})(group_3);
						container.addChild(group_3, {
							"autoSize": "both",
							"width": "100%",
							"height": "20px"
						});
						var group_4 = new cpr.controls.Container();
						var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
						flowLayout_2.horizontalSpacing = 5;
						flowLayout_2.verticalSpacing = 0;
						flowLayout_2.verticalAlign = "middle";
						flowLayout_2.lineWrap = false;
						group_4.setLayout(flowLayout_2);
						(function(container){
							var group_5 = new cpr.controls.Container();
							var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
							flowLayout_3.scrollable = false;
							flowLayout_3.horizontalSpacing = 3;
							flowLayout_3.verticalSpacing = 0;
							flowLayout_3.verticalAlign = "middle";
							flowLayout_3.lineWrap = false;
							group_5.setLayout(flowLayout_3);
							(function(container){
								var image_2 = new cpr.controls.Image();
								image_2.src = "theme/images/difficullty.svg";
								container.addChild(image_2, {
									"width": "13px",
									"height": "13px"
								});
								var output_5 = new cpr.controls.Output("recipeDifficulty");
								output_5.style.css({
									"color" : "#856C66",
									"font-size" : "12px"
								});
								output_5.bind("value").toAppProperty("difficulty");
								container.addChild(output_5, {
									"autoSize": "both",
									"width": "47px",
									"height": "20px",
									"allowNewLine": false
								});
							})(group_5);
							container.addChild(group_5, {
								"autoSize": "width",
								"width": "51px",
								"height": "20px",
								"allowNewLine": false
							});
							var group_6 = new cpr.controls.Container();
							var flowLayout_4 = new cpr.controls.layouts.FlowLayout();
							flowLayout_4.scrollable = false;
							flowLayout_4.horizontalSpacing = 3;
							flowLayout_4.verticalSpacing = 0;
							flowLayout_4.verticalAlign = "middle";
							flowLayout_4.lineWrap = false;
							group_6.setLayout(flowLayout_4);
							(function(container){
								var image_3 = new cpr.controls.Image();
								image_3.src = "theme/images/clock.svg";
								container.addChild(image_3, {
									"width": "15px",
									"height": "15px"
								});
								var output_6 = new cpr.controls.Output("recipeCookingTime");
								output_6.style.css({
									"color" : "#856C66",
									"font-size" : "12px"
								});
								output_6.bind("value").toAppProperty("cookingTime");
								container.addChild(output_6, {
									"autoSize": "both",
									"width": "47px",
									"height": "20px",
									"allowNewLine": false
								});
							})(group_6);
							container.addChild(group_6, {
								"autoSize": "width",
								"width": "71px",
								"height": "20px",
								"allowNewLine": false
							});
							var group_7 = new cpr.controls.Container();
							var flowLayout_5 = new cpr.controls.layouts.FlowLayout();
							flowLayout_5.scrollable = false;
							flowLayout_5.horizontalSpacing = 0;
							flowLayout_5.verticalSpacing = 0;
							flowLayout_5.verticalAlign = "middle";
							flowLayout_5.lineWrap = false;
							group_7.setLayout(flowLayout_5);
							(function(container){
								var image_4 = new cpr.controls.Image();
								image_4.src = "theme/images/calories.svg";
								container.addChild(image_4, {
									"width": "20px",
									"height": "20px"
								});
								var output_7 = new cpr.controls.Output("recipeCalories");
								output_7.style.css({
									"color" : "#856C66",
									"font-size" : "12px"
								});
								output_7.bind("value").toAppProperty("calories");
								container.addChild(output_7, {
									"autoSize": "both",
									"width": "47px",
									"height": "20px",
									"allowNewLine": false
								});
							})(group_7);
							container.addChild(group_7, {
								"autoSize": "width",
								"width": "71px",
								"height": "20px",
								"allowNewLine": false
							});
						})(group_4);
						container.addChild(group_4, {
							"autoSize": "both",
							"width": "210px",
							"height": "20px"
						});
						var group_8 = new cpr.controls.Container();
						var flowLayout_6 = new cpr.controls.layouts.FlowLayout();
						flowLayout_6.scrollable = false;
						flowLayout_6.horizontalSpacing = 0;
						flowLayout_6.verticalSpacing = 0;
						flowLayout_6.verticalAlign = "middle";
						flowLayout_6.lineWrap = false;
						group_8.setLayout(flowLayout_6);
						(function(container){
							var group_9 = new cpr.controls.Container();
							var flowLayout_7 = new cpr.controls.layouts.FlowLayout();
							flowLayout_7.verticalAlign = "middle";
							group_9.setLayout(flowLayout_7);
							(function(container){
								var image_5 = new cpr.controls.Image();
								image_5.src = "theme/images/user.svg";
								image_5.style.css({
									"border-radius" : "100%"
								});
								container.addChild(image_5, {
									"width": "20px",
									"height": "20px"
								});
								var output_8 = new cpr.controls.Output("recipeAuthor");
								output_8.bind("value").toAppProperty("author");
								container.addChild(output_8, {
									"autoSize": "both",
									"width": "50px",
									"height": "20px"
								});
							})(group_9);
							container.addChild(group_9, {
								"autoSize": "height",
								"width": "50%",
								"height": "30px"
							});
							var group_10 = new cpr.controls.Container();
							var flowLayout_8 = new cpr.controls.layouts.FlowLayout();
							flowLayout_8.horizontalAlign = "right";
							flowLayout_8.verticalAlign = "middle";
							group_10.setLayout(flowLayout_8);
							(function(container){
								var image_6 = new cpr.controls.Image();
								image_6.src = "theme/images/heart.svg";
								image_6.style.css({
									"border-radius" : "100%"
								});
								container.addChild(image_6, {
									"width": "20px",
									"height": "20px"
								});
								var output_9 = new cpr.controls.Output("recipeLikesCount");
								output_9.bind("value").toAppProperty("likesCount");
								container.addChild(output_9, {
									"autoSize": "both",
									"width": "50px",
									"height": "20px"
								});
							})(group_10);
							container.addChild(group_10, {
								"autoSize": "height",
								"width": "50%",
								"height": "30px"
							});
						})(group_8);
						container.addChild(group_8, {
							"autoSize": "both",
							"width": "100%",
							"height": "30px"
						});
					})(group_2);
					container.addChild(group_2, {
						"width": "210px",
						"height": "110px",
						"left": "calc(50% - 105px)",
						"top": "calc(50% - 55px)"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "250px",
					"height": "150px"
				});
				if(typeof onBodyClick == "function"){
					app.getContainer().addEventListener("click", onBodyClick);
				}
			}
		});
	internalApp.title = "recipe_card";
	
	// Type declaration for recipe_card
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_card = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_card", internalApp, id);
	};
	
	udc.recipe.recipe_card.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_card.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_card";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.recipe_card.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "typeCategory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("typeCategory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("typeCategory", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "situationCategory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("situationCategory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("situationCategory", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "methodCategory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("methodCategory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("methodCategory", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "difficulty", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("difficulty");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("difficulty", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "cookingTime", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("cookingTime");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("cookingTime", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "author", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("author");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("author", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "likesCount", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("likesCount");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("likesCount", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "recipeImg", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("recipeImg");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("recipeImg", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "calories", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("calories");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("calories", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_card.prototype, "recipeId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("recipeId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("recipeId", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_card
/// start - udc.recipe.recipe_comment
/*
 * UDC Qualified Name: udc.recipe.recipe_comment
 * App URI: udc/recipe/recipe_comment
 * Source Location: udc/recipe/recipe_comment.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_comment", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_comment.js
				 * Created at 2025. 4. 23. 오후 6:35:00.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.declareAppProperty("userImg", null);
				app.declareAppProperty("userNickName", null);
				app.declareAppProperty("createdAt", null);
				app.declareAppProperty("comment", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_1.spacing = 0;
				container.setLayout(verticalLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.setColumns(["210px", "1fr", "100px"]);
				formLayout_1.setColumnAutoSizing(0, true);
				formLayout_1.setColumnAutoSizing(2, true);
				formLayout_1.setRows(["30px"]);
				group_1.setLayout(formLayout_1);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.style.css({
						"color" : "#856c66",
						"text-align" : "right"
					});
					output_1.bind("value").toAppProperty("createdAt");
					container.addChild(output_1, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var group_2 = new cpr.controls.Container();
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					flowLayout_1.horizontalSpacing = 10;
					flowLayout_1.verticalSpacing = 0;
					group_2.setLayout(flowLayout_1);
					(function(container){
						var image_1 = new cpr.controls.Image();
						image_1.style.css({
							"border-radius" : "100%"
						});
						image_1.bind("src").toAppProperty("userImg");
						container.addChild(image_1, {
							"autoSize": "none",
							"width": "30px",
							"height": "30px"
						});
						var output_2 = new cpr.controls.Output();
						output_2.bind("value").toAppProperty("userNickName");
						container.addChild(output_2, {
							"autoSize": "width",
							"width": "100px",
							"height": "30px"
						});
					})(group_2);
					container.addChild(group_2, {
						"colIndex": 0,
						"rowIndex": 0,
						"horizontalAlign": "fill"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "510px",
					"height": "30px"
				});
				
				var output_3 = new cpr.controls.Output();
				output_3.style.css({
					"border-bottom-color" : "#856c66",
					"border-top-width" : "1.5px",
					"border-right-width" : "1.5px",
					"border-bottom-width" : "1.5px",
					"border-bottom-style" : "solid",
					"border-left-width" : "1.5px"
				});
				output_3.bind("value").toAppProperty("comment");
				container.addChild(output_3, {
					"autoSize": "none",
					"width": "520px",
					"height": "45px"
				});
			}
		});
	internalApp.title = "recipe_comment";
	
	// Type declaration for recipe_comment
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_comment = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_comment", internalApp, id);
	};
	
	udc.recipe.recipe_comment.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_comment.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_comment";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.recipe_comment.prototype, "userImg", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("userImg");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("userImg", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_comment.prototype, "userNickName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("userNickName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("userNickName", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_comment.prototype, "createdAt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("createdAt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("createdAt", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_comment.prototype, "comment", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("comment");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("comment", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_comment
/// start - udc.recipe.recipe_ingredient
/*
 * UDC Qualified Name: udc.recipe.recipe_ingredient
 * App URI: udc/recipe/recipe_ingredient
 * Source Location: udc/recipe/recipe_ingredient.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_ingredient", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_ingredient.js
				 * Created at 2025. 4. 24. 오후 1:45:39.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.declareAppProperty("ingredientName", null);
				app.declareAppProperty("ingredientCount", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.horizontalSpacing = 0;
				flowLayout_1.verticalSpacing = 0;
				flowLayout_1.lineWrap = false;
				container.setLayout(flowLayout_1);
				
				// UI Configuration
				var output_1 = new cpr.controls.Output();
				output_1.bind("value").toAppProperty("ingredientName");
				container.addChild(output_1, {
					"width": "50%",
					"height": "30px"
				});
				
				var output_2 = new cpr.controls.Output();
				output_2.style.css({
					"text-align" : "right"
				});
				output_2.bind("value").toAppProperty("ingredientCount");
				container.addChild(output_2, {
					"width": "50%",
					"height": "30px"
				});
			}
		});
	internalApp.title = "recipe_ingredient";
	
	// Type declaration for recipe_ingredient
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_ingredient = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_ingredient", internalApp, id);
	};
	
	udc.recipe.recipe_ingredient.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_ingredient.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_ingredient";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.recipe_ingredient.prototype, "ingredientName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ingredientName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ingredientName", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_ingredient.prototype, "ingredientCount", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ingredientCount");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ingredientCount", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_ingredient
/// start - udc.recipe.recipe_search_form
/*
 * UDC Qualified Name: udc.recipe.recipe_search_form
 * App URI: udc/recipe/recipe_search_form
 * Source Location: udc/recipe/recipe_search_form.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_search_form", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_search_form.js
				 * Created at 2025. 4. 28. 오후 5:39:42.
				 *
				 * @author gyrud
				 ************************************************/
	
				/*
				 * 서치 인풋에서 search 이벤트 발생 시 호출.
				 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
				 */
				function onRecipeSearchFormSearch(e){
					const recipeSearchForm = e.control;	
					history.pushState({}, '', `/recipe/search?keyword=${recipeSearchForm.value}`);
				};
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var searchInput_1 = new cpr.controls.SearchInput("recipeSearchForm");
				searchInput_1.placeholder = "검색할 레시피 이름을 입력하세요";
				if(typeof onRecipeSearchFormSearch == "function") {
					searchInput_1.addEventListener("search", onRecipeSearchFormSearch);
				}
				container.addChild(searchInput_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			}
		});
	internalApp.title = "recipe_search_form";
	
	// Type declaration for recipe_search_form
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_search_form = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_search_form", internalApp, id);
	};
	
	udc.recipe.recipe_search_form.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_search_form.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_search_form";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_search_form
/// start - udc.recipe.recipe_similarity_output
/*
 * UDC Qualified Name: udc.recipe.recipe_similarity_output
 * App URI: udc/recipe/recipe_similarity_output
 * Source Location: udc/recipe/recipe_similarity_output.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_similarity_output", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_similarity_output.js
				 * Created at 2025. 5. 4. 오후 3:01:52.
				 *
				 * @author gyrud
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.declareAppProperty("fontColor", "#F59760");
				app.declareAppProperty("value", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var output_1 = new cpr.controls.Output();
				output_1.style.css({
					"font-weight" : "bold",
					"text-align" : "center"
				});
				output_1.style.bind("color").toAppProperty("fontColor");
				output_1.bind("value").toAppProperty("value");
				container.addChild(output_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			}
		});
	internalApp.title = "recipe_similarity_output";
	
	// Type declaration for recipe_similarity_output
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_similarity_output = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_similarity_output", internalApp, id);
	};
	
	udc.recipe.recipe_similarity_output.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_similarity_output.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_similarity_output";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.recipe_similarity_output.prototype, "fontColor", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("fontColor");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("fontColor", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_similarity_output.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_similarity_output
/// start - udc.recipe.recipe_sort_select
/*
 * UDC Qualified Name: udc.recipe.recipe_sort_select
 * App URI: udc/recipe/recipe_sort_select
 * Source Location: udc/recipe/recipe_sort_select.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_sort_select", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_sort_button.js
				 * Created at 2025. 4. 22. 오후 1:44:34.
				 *
				 * @author gyrud
				 ************************************************/
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					const recipeSortSelectBox = app.lookup("recipeSortSelectBox");
					
					recipeSortSelectBox.addItem(new cpr.controls.TreeItem("칼로리", "calories", "root"));
					recipeSortSelectBox.addItem(new cpr.controls.TreeItem("높은순", "calories_desc", "calories"));
					recipeSortSelectBox.addItem(new cpr.controls.TreeItem("낮은순", "calories_asc", "calories"));
					recipeSortSelectBox.addItem(new cpr.controls.TreeItem("난이도", "difficulty", "root"));
					recipeSortSelectBox.addItem(new cpr.controls.TreeItem("높은순", "difficulty_asc", "difficulty"));
					recipeSortSelectBox.addItem(new cpr.controls.TreeItem("낮은순", "difficulty_desc", "difficulty"));
				}
	
				/*
				 * 링크드 콤보 박스에서 item-click 이벤트 발생 시 호출.
				 * 아이템 클릭시 발생하는 이벤트.
				 */
				function onRecipeSortSelectBoxItemClick(e){
					const itemClickEvent = new cpr.events.CMouseEvent("item-click");
					app.dispatchEvent(itemClickEvent); 
				}
	
				exports.getSortSelectItemValue =()=> {
					const recipeSortSelectBox = app.lookup("recipeSortSelectBox");
					
					if(recipeSortSelectBox.getSelectedIndices().length == 2) {
						const sortValue = recipeSortSelectBox.getSelectionLast().value; 
						return sortValue.split("_");
					};
				}
	
				/*
				 * "정렬 초기화" 버튼(sortReset)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onSortResetClick(e){
					const reset = new cpr.events.CMouseEvent("reset");
					app.dispatchEvent(reset); 
				}
	
				exports.resetRecipeSortSelectBoxItem=()=>{
					const recipeSortSelectBox = app.lookup("recipeSortSelectBox");
					recipeSortSelectBox.clearSelection();
				};
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var button_1 = new cpr.controls.Button("sortReset");
				button_1.value = "정렬 초기화";
				if(typeof onSortResetClick == "function") {
					button_1.addEventListener("click", onSortResetClick);
				}
				container.addChild(button_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"width": "98px"
				});
				
				var linkedComboBox_1 = new cpr.controls.LinkedComboBox("recipeSortSelectBox");
				linkedComboBox_1.placeholders = ["정렬 기준", "순서"];
				if(typeof onRecipeSortSelectBoxItemClick == "function") {
					linkedComboBox_1.addEventListener("item-click", onRecipeSortSelectBoxItemClick);
				}
				container.addChild(linkedComboBox_1, {
					"top": "0px",
					"bottom": "0px",
					"left": "0px",
					"width": "300px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "recipe_sort_select";
	
	// Type declaration for recipe_sort_select
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_sort_select = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_sort_select", internalApp, id);
	};
	
	udc.recipe.recipe_sort_select.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_sort_select.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_sort_select";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_sort_select
/// start - udc.recipe.recipe_title
/*
 * UDC Qualified Name: udc.recipe.recipe_title
 * App URI: udc/recipe/recipe_title
 * Source Location: udc/recipe/recipe_title.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipe/recipe_title", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipe_title.js
				 * Created at 2025. 4. 21. 오전 9:57:21.
				 *
				 * @author gyrud
				 ************************************************/;
				// End - User Script
				
				// Header
				app.declareAppProperty("value", null);
				app.declareAppProperty("horizontalAlign", "center");
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.horizontalSpacing = 0;
				flowLayout_1.verticalSpacing = 0;
				flowLayout_1.verticalAlign = "middle";
				flowLayout_1.bind("horizontalAlign").toAppProperty("horizontalAlign");
				container.setLayout(flowLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
				flowLayout_2.scrollable = false;
				flowLayout_2.verticalSpacing = 0;
				flowLayout_2.horizontalAlign = "center";
				group_1.setLayout(flowLayout_2);
				(function(container){
					var image_1 = new cpr.controls.Image();
					image_1.src = "theme/images/recipe.svg";
					container.addChild(image_1, {
						"width": "30px",
						"height": "30px"
					});
					var output_1 = new cpr.controls.Output("titleValue");
					output_1.style.css({
						"color" : "#856C66",
						"font-weight" : "bold",
						"font-size" : "16px"
					});
					output_1.bind("value").toAppProperty("value");
					container.addChild(output_1, {
						"autoSize": "width",
						"width": "110px",
						"height": "30px"
					});
				})(group_1);
				container.addChild(group_1, {
					"autoSize": "width",
					"width": "150px",
					"height": "30px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "recipe_title";
	
	// Type declaration for recipe_title
	cpr.utils.Util.ensurePackage("udc.recipe").recipe_title = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipe.recipe_title", internalApp, id);
	};
	
	udc.recipe.recipe_title.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipe.recipe_title.prototype, "type", {
		get : function(){
			return "udc.recipe.recipe_title";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipe.recipe_title.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.recipe.recipe_title.prototype, "horizontalAlign", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("horizontalAlign");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("horizontalAlign", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipe.recipe_title
/// start - udc.register.confirmForm
/*
 * UDC Qualified Name: udc.register.confirmForm
 * App URI: udc/register/confirmForm
 * Source Location: udc/register/confirmForm.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/register/confirmForm", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * confirmForm.js
				 * Created at 2025. 4. 25. 오후 3:42:17.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.startTimer = function () {
				    var timer = app.lookup("timer");
				    timer.callAppMethod("startTimer");  // 내부 timer로 중계
				};
	
				function onSubmitConfirmClick(e){
					var code = app.lookup("code_input").value;
					var email = localStorage.getItem("userEmail");
					
					var dm = app.lookup("dmEmailCode");
					var sms = app.lookup("smsEmailAuth");
					dm.setValue("email", email);
					dm.setValue("code", code);
					
					sms.send();
				}
	
				/*
				 * 서브미션에서 receive 이벤트 발생 시 호출.
				 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
				 */
				function onSmsEmailAuthReceive(e){
					var smsEmailAuth = e.control;
					var xhr = smsEmailAuth.xhr;
					var res = JSON.parse(xhr.responseText);
					console.log(res);
					if (res === true) {
						alert("인증되었습니다!");
						
					} else {
						alert("인증에 실패했습니다!");
					}
					exports.getRes = function() {
						return res;
					}
				};
				// End - User Script
				
				// Header
				var dataMap_1 = new cpr.data.DataMap("dmEmailCode");
				dataMap_1.parseData({
					"columns" : [
						{"name": "email"},
						{
							"name": "code",
							"dataType": "string"
						}
					]
				});
				app.register(dataMap_1);
				var submission_1 = new cpr.protocols.Submission("smsEmailAuth");
				submission_1.action = "/api/user/auth/verify-code";
				submission_1.mediaType = "application/json";
				submission_1.addRequestData(dataMap_1);
				if(typeof onSmsEmailAuthSubmitSuccess == "function") {
					submission_1.addEventListener("submit-success", onSmsEmailAuthSubmitSuccess);
				}
				if(typeof onSmsEmailAuthReceive == "function") {
					submission_1.addEventListener("receive", onSmsEmailAuthReceive);
				}
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var userDefinedControl_1 = new udc.register.timer("timer");
				container.addChild(userDefinedControl_1, {
					"top": "0px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
				
				var inputBox_1 = new cpr.controls.InputBox("code_input");
				inputBox_1.placeholder = "인증 코드를 입력하세요";
				inputBox_1.style.css({
					"text-align" : "center"
				});
				container.addChild(inputBox_1, {
					"top": "62px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
				
				var button_1 = new cpr.controls.Button("submitConfirm");
				button_1.value = "확인";
				if(typeof onSubmitConfirmClick == "function") {
					button_1.addEventListener("click", onSubmitConfirmClick);
				}
				container.addChild(button_1, {
					"top": "124px",
					"width": "520px",
					"height": "52px",
					"left": "calc(50% - 260px)"
				});
			}
		});
	internalApp.title = "confirmForm";
	
	// Type declaration for confirmForm
	cpr.utils.Util.ensurePackage("udc.register").confirmForm = function(id){
		cpr.controls.UDCBase.call(this, "udc.register.confirmForm", internalApp, id);
	};
	
	udc.register.confirmForm.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.register.confirmForm.prototype, "type", {
		get : function(){
			return "udc.register.confirmForm";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.register.confirmForm
/// start - udc.register.timer
/*
 * UDC Qualified Name: udc.register.timer
 * App URI: udc/register/timer
 * Source Location: udc/register/timer.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/register/timer", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * timer.js
				 * Created at 2025. 4. 25. 오후 1:31:13.
				 *
				 * @author seongkwan
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				//exports.getText = function(){
				//	// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				//	return "";
				//};
	
				// 전역 타이머 변수
				var timerInterval = null;
	
				/**
				 * 타이머 시작
				 * @param {number} duration 초 단위 시간
				 * @param {function=} onEnd 타이머 종료 시 콜백 함수 (선택)
				 */
				function start(duration, onEnd) {
				    if (timerInterval) clearInterval(timerInterval);
	
				    var label = app.lookup("timer_section");
				    var remainingTime = duration;
	
				    timerInterval = setInterval(function () {
				        var minutes = padZero(Math.floor(remainingTime / 60));
				        var seconds = padZero(remainingTime % 60);
	
				        label.value = "남은 시간: " + minutes + ":" + seconds;
	
				        if (--remainingTime < 0) {
				            clearInterval(timerInterval);
				            label.value = "⛔ 인증 시간이 만료되었습니다.";
	
				            // 종료 콜백 호출
				            if (typeof onEnd === "function") {
				                onEnd();
				            }
				        }
				    }, 1000);
				}
	
				/**
				 * 숫자 앞 0채우기 유틸
				 */
				function padZero(num) {
				    return (num < 10 ? '0' : '') + num;
				}
	
				/**
				 * 타이머 초기화 (중단)
				 */
				function stop() {
				    if (timerInterval) clearInterval(timerInterval);
				    app.lookup("timer_section").value = "";
				}
	
				exports.startTimer = function () {
				    start(180);  // 기존 타이머 함수
				};;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
				app.supportMedia("all and (max-width: 499.984px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.readOnly = true;
				container.style.css({
					"text-align" : "center",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var inputBox_1 = new cpr.controls.InputBox("timer_section");
				inputBox_1.style.css({
					"text-align" : "center"
				});
				container.addChild(inputBox_1, {
					"right": "1px",
					"left": "0px",
					"height": "52px",
					"top": "calc(50% - 26px)"
				});
			}
		});
	internalApp.title = "timer";
	
	// Type declaration for timer
	cpr.utils.Util.ensurePackage("udc.register").timer = function(id){
		cpr.controls.UDCBase.call(this, "udc.register.timer", internalApp, id);
	};
	
	udc.register.timer.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.register.timer.prototype, "type", {
		get : function(){
			return "udc.register.timer";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.register.timer
