/*
 * App URI: app/recipe/recipe_detail
 * Source Location: app/recipe/recipe_detail.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("app/recipe/recipe_detail", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * contents_container.js
			 * Created at 2025. 4. 17. 오후 1:52:50.
			 *
			 * @author gyrud
			 ************************************************/

			const showToastModule = cpr.core.Module.require("module/common/showToast");

			const getRecipeId=()=> {
				const pathName = window.location.pathname;
				return  pathName.split("/").pop();
			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				const recipeId = getRecipeId();
					
				const recipeDetailSms = app.lookup("recipeDetailSms");
				
				recipeDetailSms.setRequestActionUrl(recipeDetailSms.action+"/"+recipeId);
				recipeDetailSms.send();
				
				const similarSms = app.lookup("similarSms");
				similarSms.setRequestActionUrl(similarSms.action+"/"+recipeId);
				similarSms.send();
				
				const recipeViewSms = app.lookup("recipeViewCreateSms");
				recipeViewSms.setRequestActionUrl(recipeViewSms.action+recipeId);
				recipeViewSms.send();	
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onRecipeDetailSmsSubmitSuccess(e){
				const recipeDetailSms = e.control;
				
				const result = recipeDetailSms.xhr.responseText;
				const resultJson = JSON.parse(result);
				
				// 기본 정보
				const recipeTitle = app.lookup("recipeTitle");
				const typeCategory = app.lookup("typeCategory");
				const situationCategory = app.lookup("situationCategory");
				const methodCategory = app.lookup("methodCategory");
				const recipeImg = app.lookup("recipeImg");
				const recipeSummary = app.lookup("recipeSummary");
				const difficultyValue = app.lookup("difficultyValue");
				const cookingTimeValue = app.lookup("cookingTimeValue");
				const caloriesValue = app.lookup("caloriesValue");
				const recipeAuthorImg = app.lookup("recipeAuthorImg");
				const recipeAuthorName = app.lookup("recipeAuthorName");
				const likeCountValue = app.lookup("likeCountValue");
				const viewCountValue = app.lookup("viewCountValue")
					
				recipeTitle.value = resultJson.recipeName;
				const categories = resultJson.categories;
				for (let j = 0; j < categories.length; j++) {
				  const category = categories[j];
				  const categoryType = category.recipeCategoryType;
				  switch (categoryType) {
				    case "종류별":
			      	  typeCategory.value = "#" + category.recipeCategoryName;	
			      	  typeCategory.visible = true;
				      break;
				    case "상황별":
				      situationCategory.value = "#" + category.recipeCategoryName;
				      situationCategory.visible = true;
				      break;
				    case "방법별":
				      methodCategory.value = "#" + category.recipeCategoryName;
				      methodCategory.visible = true;
				      break;
				    default:
				      break;
				  }
				}
				recipeImg.src = resultJson.fileUrl;
				if(resultJson.summary!=null) {
					recipeSummary.value = resultJson.summary;
				} else {
					recipeSummary.visible = false;
				}
				difficultyValue.value = resultJson.difficulty;
				cookingTimeValue.value = resultJson.cookingTime;
				caloriesValue.value = `${resultJson.calories}kcal`;
				recipeAuthorImg.src = resultJson.userProfileImageUrl;
				recipeAuthorName.value = resultJson.userNickname;
				likeCountValue.value = "좋아요 "+resultJson.likeCount+"개";
				viewCountValue.value = "조회수 "+resultJson.viewCount+"번";
				
				// 재료
				const ingredientGroup = app.lookup("ingredientGroup");
				
				const ingredients = resultJson.ingredients;
				const allGroupsAreNull = ingredients.every(item => item.ingredientGroup == null);
				
				if (allGroupsAreNull) {
					for (let i = 0; i < ingredients.length; i++) {
						const ingredients = resultJson.ingredients[i];
						const ingredientUDC = new udc.recipe.recipe_ingredient();
						ingredientUDC.ingredientName = ingredients.ingredientName;
						ingredientUDC.ingredientCount = ingredients.ingredientQuantity + ingredients.ingredientUnit;
						
						ingredientGroup.addChild(ingredientUDC, {
						  width: "100%",
						  height: "30px",
						});	
					}
				} else {
					const groupMap = ingredients.reduce((acc, item) => {
					    const group = item.ingredientGroup || '기타';
					    if (!acc[group]) acc[group] = [];
					    acc[group].push(item);
					    return acc;
				    }, {});
				    Object.entries(groupMap).map(([group, items]) => ({
					    ingredientGroup: group,
					    ingredients: items
				    }));

				  const groupKeys = Object.keys(groupMap);
				  
				  for (let i = 0; i < groupKeys.length; i++) {
					  const group = groupKeys[i];
					  const ingredientsArray = groupMap[group];
					
					  const groupName = new cpr.controls.Output("groupName");
					  groupName.value = `[${group}]`;
					  groupName.style.css({
					    "font-weight": "bold"
					  });
					
					  ingredientGroup.addChild(groupName, {
					    width: "100%",
					    height: "30px",
					  });
					
					  for (let j = 0; j < ingredientsArray.length; j++) {
					    const ingredient = ingredientsArray[j];
					    const ingredientUDC = new udc.recipe.recipe_ingredient();
					    ingredientUDC.ingredientName = ingredient.ingredientName;
					    ingredientUDC.ingredientCount = ingredient.ingredientQuantity + ingredient.ingredientUnit;
					
					    ingredientGroup.addChild(ingredientUDC, {
					      width: "100%",
					      height: "30px",
					    });
					  }
					
					  if (i < groupKeys.length - 1) {
					    const gap = new cpr.controls.Output("gap");
					    ingredientGroup.addChild(gap, {
					      width: "100%",
					      height: "30px",
					    });
					  }
					}
				}

				// 요리 과정
				const cookingProcessGroup = app.lookup("cookingProcessGroup");
				for (let i = 0; i < resultJson.steps.length; i++) {
					const step = resultJson.steps[i];
					const cookingProcess = new udc.recipe.cooking_process();
					cookingProcess.sequence = step.stepNumber;
					cookingProcess.explanation = step.stepDescription;
					cookingProcess.img = step.fileUrl; 
							
					cookingProcessGroup.addChild(cookingProcess, {
					  width: "100%",
					  height: "100px",
					});	
				}
				
				// 등록일, 수정일
				const createAt = app.lookup("createdAt");
				createAt.value = resultJson.createdAt;
				
				if(resultJson.updateAt) {
					const updatedAt = app.lookup("updatedAt");
					const updatedAtLabel = app.lookup("updatedAtLabel");
					updatedAtLabel.visible = true;
					updatedAt.value = resultJson.updateAt;
					updatedAt.visible = true;
				}

				// 댓글
				const commentList = app.lookup("commentList");
				const commentsData = resultJson.comments;
				
				if (commentsData.length){
					for (let i = 0; i < commentsData.length; i++) {
						const comment = commentsData[i];
						const commentUDC = new udc.recipe.recipe_comment();
						commentUDC.userImg = comment.userProfileImageUrl;
						commentUDC.userNickName = comment.nickname;
						commentUDC.createAt = comment.createAt;
						commentUDC.comment = comment.commentContents;
							
						commentList.addChild(commentUDC, {
						  width: "100%",
						  height: "100px",
						});	
					}	
				} else {
					const commentNull = new cpr.controls.Output();
					commentNull.value = "아직 이 레시피에 대한 댓글이 없어요!";
					commentList.addChild(commentNull, {
					  width: "100%",
					  height: "100px",
					});	
				}
			}


			// 유사한 레시피 3개 추출 및 표시 함수
			function similar() {
			    var ds = app.lookup("similar");
			    var rowCount = ds.getRowCount();
			    var outputPrefix = "out";
			    var outextPrefix = "outext";
			    
			    // 데이터셋의 각 행을 순회하며 해당 컨트롤에 값 할당
			    for(var i = 0; i < rowCount; i++) {
			        
			        var recipeName = ds.getValue(i, "recipeName");
			        var recipeId = ds.getValue(i, "id");
			        var fileUrl = ds.getValue(i, "fileUrl");
			        
			        var outputId = outputPrefix + (i + 1);
			        var outextId = outextPrefix + (i + 1);
			        let outputControl = app.lookup(outputId);
			        let outextControl = app.lookup(outextId);


			        if (outputControl) {
			            outputControl.value = ""; 
			            outputControl.userData("id", recipeId);
			            outputControl.style.css({
			                "cursor": "pointer",
			                "background-image": "url(" + fileUrl + ")",
			                "background-position": "center",
			                "background-repeat": "no-repeat",
			                "background-size": "cover",
			                "width": "100%",
			                "height": "100%"
			            });
			            outputControl.removeEventListeners("click");
			            outputControl.addEventListener("click", function(e) {
			                var control = e.control;
			                var recipeId = control.userData("id");
			                if (recipeId) {
			                    // SPA 방식으로 URL 변경
			//                    history.pushState({}, '', `/recipe/${recipeId}`);
			                    // 세션 스토리지에 저장
			//                    sessionStorage.setItem('currentRecipeId', recipeId);
			    window.location.href = `/recipe/${recipeId}`;
			                    console.log("이동: /recipe/" + recipeId);
			                }
			            });
			        }


			        if (outextControl) {
			            outextControl.value = recipeName;
			            outextControl.userData("id", recipeId);
			            outextControl.style.css({
			                "cursor": "pointer",
			                "text-decoration": "underline",
			                "background-image": "none",
			                
			            });
			            outextControl.removeEventListeners("click");
			            outextControl.addEventListener("click", function(e) {
			                var control = e.control;
			                var recipeId = control.userData("id");
			                if (recipeId) {
			                    // SPA 방식으로 URL 변경
			//                    history.pushState({}, '', `/recipe/${recipeId}`);
			                   	history.replaceState({}, '', `/recipe/${recipeId}`);
			                    // 세션 스토리지에 저장
			//                    sessionStorage.setItem('currentRecipeId', recipeId);
			                    // 이동
			                    window.location.href = `/recipe/${recipeId}`;
			                    console.log("이동: /recipe/" + recipeId);
			                }
			            });
			        }
			    }
			}



			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSimilarSmsSubmitSuccess(e){
				var similarSms = e.control;
				similar();
				app.getContainer().redraw();
			}

			/*
			 * 공유하기 버튼 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onShareGroupClick(e){
				const shareBtn = e.control;
				const url = window.location.href;
			  	navigator.clipboard.writeText(url).then(() => {
			      showToastModule.showToast("레시피 URL이 복사되었습니다!");
			    });
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onCheckLikeStatusSmsSubmitSuccess(e){
				const checkLikeStatusSms = e.control;

				const result = checkLikeStatusSms.xhr.responseText;
				const resultJson = JSON.parse(result);

				if(resultJson) {
					const likeCountImg = app.lookup("likeCountImg");
					likeCountImg.src = "../../theme/images/heart.svg";
				}
			}

			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onLikeCountGroupClick(e){
				const recipeId = getRecipeId();
				
				const recipeLikeToggleSms = app.lookup("recipeLikeToggleSms");
				recipeLikeToggleSms.setRequestActionUrl(recipeLikeToggleSms.action+recipeId);
				recipeLikeToggleSms.send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onRecipeLikeToggleSmsSubmitSuccess(e){
				var recipeLikeToggleSms = e.control;
				const result = recipeLikeToggleSms.xhr.responseText;
				const resultJson = JSON.parse(result);
				const likeCountImg = app.lookup("likeCountImg");
				const likeCountValue = app.lookup("likeCountValue");
				const match = likeCountValue.value.match(/\d+/);
				const likeCountNumber = match ? parseInt(match[0], 10) : null;
				
				if(resultJson.message.liked) {
					likeCountImg.src = "theme/images/heart.svg";
					likeCountValue.value = `좋아요 ${likeCountNumber+1}개`;
				} else {
					likeCountImg.src = "theme/images/heart_empty.svg";
					likeCountValue.value = `좋아요 ${likeCountNumber-1}개`;
				}
				
				showToastModule.showToast(resultJson.message.message);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("similar");
			dataSet_1.parseData({
				"columns" : [
					{"name": "id"},
					{"name": "recipeName"},
					{"name": "fileUrl"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("recipeDetailSms");
			submission_1.action = "/api/recipes";
			if(typeof onRecipeDetailSmsSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onRecipeDetailSmsSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("similarSms");
			submission_2.action = "/api/recipes/similar";
			submission_2.addResponseData(dataSet_1, false);
			if(typeof onSimilarSmsSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSimilarSmsSubmitSuccess);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("recipeViewCreateSms");
			submission_3.action = "/api/recipes/views/";
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("checkLikeStatusSms");
			submission_4.action = "/api/recipes/likes/check/";
			if(typeof onCheckLikeStatusSmsSubmitSuccess == "function") {
				submission_4.addEventListener("submit-success", onCheckLikeStatusSmsSubmitSuccess);
			}
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("recipeLikeToggleSms");
			submission_5.action = "/api/recipes/likes/";
			if(typeof onRecipeLikeToggleSmsSubmitSuccess == "function") {
				submission_5.addEventListener("submit-success", onRecipeLikeToggleSmsSubmitSuccess);
			}
			app.register(submission_5);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
			app.supportMedia("all and (max-width: 499.984px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["contents-container"]);
			container.style.css({
				"background-color" : "#FFFFFF",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.spacing = 20;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["30px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("recipeTitle");
				output_1.value = "Output";
				output_1.style.css({
					"font-weight" : "bold",
					"font-size" : "16px"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "left",
					"verticalAlign": "center"
				});
				var group_2 = new cpr.controls.Container("recipeCategorys");
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.horizontalSpacing = 10;
				flowLayout_1.verticalSpacing = 0;
				flowLayout_1.horizontalAlign = "right";
				group_2.setLayout(flowLayout_1);
				(function(container){
					var output_2 = new cpr.controls.Output("typeCategory");
					output_2.visible = false;
					output_2.value = "Output";
					container.addChild(output_2, {
						"autoSize": "width",
						"width": "100px",
						"height": "30px"
					});
					var output_3 = new cpr.controls.Output("situationCategory");
					output_3.visible = false;
					output_3.value = "Output";
					container.addChild(output_3, {
						"autoSize": "width",
						"width": "100px",
						"height": "30px"
					});
					var output_4 = new cpr.controls.Output("methodCategory");
					output_4.visible = false;
					output_4.value = "Output";
					container.addChild(output_4, {
						"autoSize": "width",
						"width": "100px",
						"height": "30px"
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 1,
					"rowIndex": 0,
					"horizontalAlign": "right",
					"verticalAlign": "center",
					"width": 350,
					"height": 30
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "600px",
				"height": "30px"
			});
			
			var image_1 = new cpr.controls.Image("recipeImg");
			image_1.style.css({
				"border-radius" : "5px"
			});
			container.addChild(image_1, {
				"autoSize": "height",
				"width": "600px",
				"height": "520px"
			});
			
			var output_5 = new cpr.controls.Output("recipeSummary");
			output_5.value = "Output";
			container.addChild(output_5, {
				"autoSize": "none",
				"width": "600px",
				"height": "20px"
			});
			
			var group_3 = new cpr.controls.Container();
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.scrollable = false;
			formLayout_2.horizontalSpacing = "0px";
			formLayout_2.verticalSpacing = "0px";
			formLayout_2.topMargin = "0px";
			formLayout_2.rightMargin = "0px";
			formLayout_2.bottomMargin = "0px";
			formLayout_2.leftMargin = "0px";
			formLayout_2.setColumns(["1fr", "105px"]);
			formLayout_2.setColumnMinWidth(0, 350);
			formLayout_2.setRows(["30px"]);
			group_3.setLayout(formLayout_2);
			(function(container){
				var group_4 = new cpr.controls.Container("recipeInfo");
				var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
				flowLayout_2.scrollable = false;
				flowLayout_2.verticalSpacing = 0;
				flowLayout_2.lineWrap = false;
				group_4.setLayout(flowLayout_2);
				(function(container){
					var image_2 = new cpr.controls.Image("difficultyImg");
					image_2.src = "theme/images/difficullty.svg";
					container.addChild(image_2, {
						"width": "15px",
						"height": "30px"
					});
					var output_6 = new cpr.controls.Output("difficultyValue");
					output_6.value = "Output";
					container.addChild(output_6, {
						"autoSize": "width",
						"width": "100px",
						"height": "30px"
					});
					var image_3 = new cpr.controls.Image("cookingTimeImg");
					image_3.src = "theme/images/clock.svg";
					container.addChild(image_3, {
						"width": "20px",
						"height": "30px"
					});
					var output_7 = new cpr.controls.Output("cookingTimeValue");
					output_7.value = "Output";
					container.addChild(output_7, {
						"autoSize": "width",
						"width": "100px",
						"height": "30px"
					});
					var image_4 = new cpr.controls.Image("caloriesImg");
					image_4.src = "theme/images/calories.svg";
					container.addChild(image_4, {
						"width": "30px",
						"height": "30px"
					});
					var output_8 = new cpr.controls.Output("caloriesValue");
					output_8.value = "Output";
					container.addChild(output_8, {
						"autoSize": "width",
						"width": "100px",
						"height": "30px"
					});
				})(group_4);
				container.addChild(group_4, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "left",
					"verticalAlign": "center",
					"width": 400,
					"height": 30
				});
				var group_5 = new cpr.controls.Container("recipeAuthor");
				var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
				flowLayout_3.scrollable = false;
				flowLayout_3.verticalSpacing = 0;
				flowLayout_3.horizontalAlign = "right";
				flowLayout_3.lineWrap = false;
				group_5.setLayout(flowLayout_3);
				(function(container){
					var image_5 = new cpr.controls.Image("recipeAuthorImg");
					container.addChild(image_5, {
						"autoSize": "none",
						"width": "30px",
						"height": "30px"
					});
					var output_9 = new cpr.controls.Output("recipeAuthorName");
					output_9.value = "Output";
					container.addChild(output_9, {
						"autoSize": "width",
						"width": "70px",
						"height": "30px"
					});
				})(group_5);
				container.addChild(group_5, {
					"colIndex": 1,
					"rowIndex": 0,
					"horizontalAlign": "right",
					"verticalAlign": "center",
					"width": 105,
					"height": 30
				});
			})(group_3);
			container.addChild(group_3, {
				"autoSize": "height",
				"width": "600px",
				"height": "30px"
			});
			
			var group_6 = new cpr.controls.Container("InteractionBtnGroup");
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.scrollable = false;
			formLayout_3.horizontalSpacing = "30px";
			formLayout_3.verticalSpacing = "0px";
			formLayout_3.topMargin = "0px";
			formLayout_3.rightMargin = "0px";
			formLayout_3.bottomMargin = "0px";
			formLayout_3.leftMargin = "0px";
			formLayout_3.setColumns(["1fr", "1fr", "1fr", "1fr"]);
			formLayout_3.setColumnMinWidth(0, 100);
			formLayout_3.setColumnMinWidth(1, 100);
			formLayout_3.setColumnMinWidth(2, 100);
			formLayout_3.setColumnMinWidth(3, 100);
			formLayout_3.setRows(["1fr"]);
			formLayout_3.setRowMinHeight(0, 100);
			group_6.setLayout(formLayout_3);
			(function(container){
				var group_7 = new cpr.controls.Container("likeCountGroup");
				group_7.style.css({
					"background-color" : "#FBDBCF",
					"border-radius" : "5px"
				});
				var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_2.spacing = 10;
				verticalLayout_2.leftMargin = 5;
				verticalLayout_2.rightMargin = 5;
				verticalLayout_2.topMargin = 5;
				verticalLayout_2.bottomMargin = 5;
				group_7.setLayout(verticalLayout_2);
				(function(container){
					var image_6 = new cpr.controls.Image("likeCountImg");
					image_6.src = "theme/images/heart_empty.svg";
					container.addChild(image_6, {
						"width": "70px",
						"height": "70px"
					});
					var output_10 = new cpr.controls.Output("likeCountValue");
					output_10.value = "Output";
					output_10.style.css({
						"text-align" : "center"
					});
					container.addChild(output_10, {
						"width": "100px",
						"height": "20px"
					});
				})(group_7);
				if(typeof onLikeCountGroupClick == "function") {
					group_7.addEventListener("click", onLikeCountGroupClick);
				}
				container.addChild(group_7, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"verticalAlign": "fill",
					"height": 25
				});
				var group_8 = new cpr.controls.Container("viewCountGroup");
				group_8.style.css({
					"background-color" : "#EAF1F3",
					"border-radius" : "5px"
				});
				var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_3.spacing = 10;
				verticalLayout_3.leftMargin = 5;
				verticalLayout_3.rightMargin = 5;
				verticalLayout_3.topMargin = 5;
				verticalLayout_3.bottomMargin = 5;
				group_8.setLayout(verticalLayout_3);
				(function(container){
					var image_7 = new cpr.controls.Image("viewCountImg");
					image_7.src = "theme/images/view.svg";
					container.addChild(image_7, {
						"width": "70px",
						"height": "70px"
					});
					var output_11 = new cpr.controls.Output("viewCountValue");
					output_11.value = "Output";
					output_11.style.css({
						"text-align" : "center"
					});
					container.addChild(output_11, {
						"width": "100px",
						"height": "20px"
					});
				})(group_8);
				container.addChild(group_8, {
					"colIndex": 1,
					"rowIndex": 0,
					"height": 25
				});
				var group_9 = new cpr.controls.Container("applicationGroup");
				group_9.style.css({
					"background-color" : "#EFE4D3",
					"border-radius" : "5px"
				});
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 10;
				verticalLayout_4.leftMargin = 5;
				verticalLayout_4.rightMargin = 5;
				verticalLayout_4.topMargin = 5;
				verticalLayout_4.bottomMargin = 5;
				group_9.setLayout(verticalLayout_4);
				(function(container){
					var image_8 = new cpr.controls.Image("applicationImg");
					image_8.src = "theme/images/write.svg";
					container.addChild(image_8, {
						"width": "70px",
						"height": "70px"
					});
					var output_12 = new cpr.controls.Output("applicationValue");
					output_12.value = "레시피 응용하기";
					output_12.style.css({
						"text-align" : "center"
					});
					container.addChild(output_12, {
						"width": "100px",
						"height": "20px"
					});
				})(group_9);
				container.addChild(group_9, {
					"colIndex": 3,
					"rowIndex": 0,
					"height": 25
				});
				var group_10 = new cpr.controls.Container("shareGroup");
				group_10.style.css({
					"background-color" : "#E5E6C7",
					"border-radius" : "5px"
				});
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 10;
				verticalLayout_5.leftMargin = 5;
				verticalLayout_5.rightMargin = 5;
				verticalLayout_5.topMargin = 5;
				verticalLayout_5.bottomMargin = 5;
				group_10.setLayout(verticalLayout_5);
				(function(container){
					var image_9 = new cpr.controls.Image("shareImg");
					image_9.src = "theme/images/share.svg";
					container.addChild(image_9, {
						"width": "70px",
						"height": "70px"
					});
					var output_13 = new cpr.controls.Output("shareValue");
					output_13.value = "공유하기";
					output_13.style.css({
						"text-align" : "center"
					});
					container.addChild(output_13, {
						"width": "100px",
						"height": "20px"
					});
				})(group_10);
				if(typeof onShareGroupClick == "function") {
					group_10.addEventListener("click", onShareGroupClick);
				}
				container.addChild(group_10, {
					"colIndex": 2,
					"rowIndex": 0,
					"height": 25
				});
			})(group_6);
			container.addChild(group_6, {
				"autoSize": "height",
				"width": "600px",
				"height": "100px"
			});
			
			var group_11 = new cpr.controls.Container();
			group_11.style.css({
				"border-radius" : "5px",
				"background-color" : "#FBF3EB"
			});
			var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_6.leftMargin = 10;
			verticalLayout_6.rightMargin = 10;
			verticalLayout_6.topMargin = 20;
			verticalLayout_6.bottomMargin = 20;
			group_11.setLayout(verticalLayout_6);
			(function(container){
				var group_12 = new cpr.controls.Container();
				var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
				group_12.setLayout(verticalLayout_7);
				(function(container){
					var userDefinedControl_1 = new udc.recipe.group_subtitle();
					userDefinedControl_1.value = "재료";
					container.addChild(userDefinedControl_1, {
						"width": "580px",
						"height": "20px"
					});
					var group_13 = new cpr.controls.Container("ingredientGroup");
					var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
					group_13.setLayout(verticalLayout_8);
					container.addChild(group_13, {
						"autoSize": "height",
						"width": "100%",
						"height": "200px"
					});
				})(group_12);
				container.addChild(group_12, {
					"autoSize": "height",
					"width": "580px",
					"height": "160px"
				});
			})(group_11);
			container.addChild(group_11, {
				"autoSize": "height",
				"width": "600px",
				"height": "200px"
			});
			
			var group_14 = new cpr.controls.Container();
			group_14.style.css({
				"background-color" : "#E5E6C7",
				"border-radius" : "5px"
			});
			var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_9.leftMargin = 10;
			verticalLayout_9.rightMargin = 10;
			verticalLayout_9.topMargin = 20;
			verticalLayout_9.bottomMargin = 20;
			group_14.setLayout(verticalLayout_9);
			(function(container){
				var group_15 = new cpr.controls.Container();
				var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
				group_15.setLayout(verticalLayout_10);
				(function(container){
					var userDefinedControl_2 = new udc.recipe.group_subtitle();
					userDefinedControl_2.value = "요리 과정";
					container.addChild(userDefinedControl_2, {
						"width": "580px",
						"height": "20px"
					});
					var group_16 = new cpr.controls.Container("cookingProcessGroup");
					var verticalLayout_11 = new cpr.controls.layouts.VerticalLayout();
					group_16.setLayout(verticalLayout_11);
					container.addChild(group_16, {
						"autoSize": "height",
						"width": "100%",
						"height": "100px"
					});
				})(group_15);
				container.addChild(group_15, {
					"autoSize": "height",
					"width": "580px",
					"height": "180px"
				});
			})(group_14);
			container.addChild(group_14, {
				"autoSize": "height",
				"width": "600px",
				"height": "200px"
			});
			
			var group_17 = new cpr.controls.Container();
			var formLayout_4 = new cpr.controls.layouts.FormLayout();
			formLayout_4.scrollable = false;
			formLayout_4.horizontalSpacing = "0px";
			formLayout_4.verticalSpacing = "0px";
			formLayout_4.topMargin = "0px";
			formLayout_4.rightMargin = "0px";
			formLayout_4.bottomMargin = "0px";
			formLayout_4.leftMargin = "0px";
			formLayout_4.setColumns(["50px", "100px", "50px", "100px", "1fr"]);
			formLayout_4.setRows(["25px"]);
			group_17.setLayout(formLayout_4);
			(function(container){
				var output_14 = new cpr.controls.Output();
				output_14.value = "등록일";
				container.addChild(output_14, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "fill"
				});
				var output_15 = new cpr.controls.Output("updatedAtLabel");
				output_15.visible = false;
				output_15.value = "수정일";
				container.addChild(output_15, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "fill"
				});
				var output_16 = new cpr.controls.Output("createdAt");
				output_16.value = "Output";
				container.addChild(output_16, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_17 = new cpr.controls.Output("updatedAt");
				output_17.visible = false;
				output_17.value = "Output";
				container.addChild(output_17, {
					"colIndex": 3,
					"rowIndex": 0
				});
			})(group_17);
			container.addChild(group_17, {
				"autoSize": "none",
				"width": "600px",
				"height": "25px"
			});
			
			var group_18 = new cpr.controls.Container();
			group_18.visible = false;
			group_18.style.css({
				"background-color" : "#fbdbcf",
				"border-radius" : "5px",
				"background-image" : "none"
			});
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_18.setLayout(xYLayout_1);
			(function(container){
				var group_19 = new cpr.controls.Container();
				var verticalLayout_12 = new cpr.controls.layouts.VerticalLayout();
				group_19.setLayout(verticalLayout_12);
				(function(container){
					var userDefinedControl_3 = new udc.recipe.group_subtitle();
					userDefinedControl_3.value = "영양소 분석결과";
					container.addChild(userDefinedControl_3, {
						"width": "580px",
						"height": "20px"
					});
				})(group_19);
				container.addChild(group_19, {
					"top": "10px",
					"right": "10px",
					"bottom": "30px",
					"left": "10px"
				});
			})(group_18);
			container.addChild(group_18, {
				"autoSize": "height",
				"width": "600px",
				"height": "200px"
			});
			
			var group_20 = new cpr.controls.Container();
			group_20.style.css({
				"background-color" : "#eaf1f3",
				"border-radius" : "5px",
				"background-image" : "none"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_20.setLayout(xYLayout_2);
			(function(container){
				var group_21 = new cpr.controls.Container();
				var verticalLayout_13 = new cpr.controls.layouts.VerticalLayout();
				group_21.setLayout(verticalLayout_13);
				(function(container){
					var userDefinedControl_4 = new udc.recipe.group_subtitle();
					userDefinedControl_4.value = "댓글";
					container.addChild(userDefinedControl_4, {
						"width": "580px",
						"height": "20px"
					});
					var group_22 = new cpr.controls.Container("commentList");
					var verticalLayout_14 = new cpr.controls.layouts.VerticalLayout();
					group_22.setLayout(verticalLayout_14);
					container.addChild(group_22, {
						"autoSize": "height",
						"width": "400px",
						"height": "10px"
					});
					var group_23 = new cpr.controls.Container();
					var formLayout_5 = new cpr.controls.layouts.FormLayout();
					formLayout_5.scrollable = false;
					formLayout_5.horizontalSpacing = "0px";
					formLayout_5.verticalSpacing = "0px";
					formLayout_5.topMargin = "0px";
					formLayout_5.rightMargin = "0px";
					formLayout_5.bottomMargin = "0px";
					formLayout_5.leftMargin = "0px";
					formLayout_5.setColumns(["1fr", "10px", "50px"]);
					formLayout_5.setRows(["30px"]);
					group_23.setLayout(formLayout_5);
					(function(container){
						var inputBox_1 = new cpr.controls.InputBox("ipb1");
						inputBox_1.placeholder = "레시피에 대한 의견을 남겨보세요!";
						container.addChild(inputBox_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var button_1 = new cpr.controls.Button();
						button_1.value = "등록";
						container.addChild(button_1, {
							"colIndex": 2,
							"rowIndex": 0
						});
					})(group_23);
					container.addChild(group_23, {
						"width": "400px",
						"height": "30px"
					});
				})(group_21);
				container.addChild(group_21, {
					"top": "10px",
					"right": "10px",
					"bottom": "30px",
					"left": "10px"
				});
			})(group_20);
			container.addChild(group_20, {
				"autoSize": "height",
				"width": "600px",
				"height": "200px"
			});
			
			var group_24 = new cpr.controls.Container("grb9");
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_24.setLayout(xYLayout_3);
			(function(container){
				var group_25 = new cpr.controls.Container();
				group_25.style.css({
					"background-color" : "#e9edf2",
					"border-radius" : "5px",
					"background-image" : "none"
				});
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_25.setLayout(xYLayout_4);
				(function(container){
					var output_18 = new cpr.controls.Output("out1");
					output_18.value = "Output";
					output_18.style.css({
						"border-radius" : "5px",
						"font-weight" : "bold",
						"font-size" : "16px",
						"text-align" : "center"
					});
					if(typeof onOut1Click == "function") {
						output_18.addEventListener("click", onOut1Click);
					}
					container.addChild(output_18, {
						"top": "60px",
						"left": "20px",
						"width": "120px",
						"height": "120px"
					});
					var output_19 = new cpr.controls.Output("out2");
					output_19.value = "Output";
					output_19.style.css({
						"border-radius" : "5px",
						"font-weight" : "bold",
						"font-size" : "16px",
						"text-align" : "center"
					});
					container.addChild(output_19, {
						"top": "60px",
						"left": "190px",
						"width": "120px",
						"height": "120px"
					});
					var output_20 = new cpr.controls.Output("out3");
					output_20.value = "Output";
					output_20.style.css({
						"border-radius" : "5px",
						"font-weight" : "bold",
						"font-size" : "16px",
						"text-align" : "center"
					});
					container.addChild(output_20, {
						"top": "60px",
						"right": "20px",
						"width": "120px",
						"height": "120px"
					});
					var output_21 = new cpr.controls.Output();
					output_21.value = "이 레시피를 좋아하신다면...";
					output_21.style.css({
						"color" : "#856C66",
						"font-weight" : "bold",
						"font-size" : "20px"
					});
					container.addChild(output_21, {
						"top": "20px",
						"right": "20px",
						"left": "20px",
						"height": "30px"
					});
					var output_22 = new cpr.controls.Output("outext1");
					output_22.value = "Output";
					output_22.style.css({
						"text-align" : "center"
					});
					container.addChild(output_22, {
						"top": "179px",
						"left": "20px",
						"width": "120px",
						"height": "20px"
					});
					var output_23 = new cpr.controls.Output("outext2");
					output_23.value = "Output";
					output_23.style.css({
						"text-align" : "center"
					});
					container.addChild(output_23, {
						"top": "179px",
						"left": "190px",
						"width": "120px",
						"height": "20px"
					});
					var output_24 = new cpr.controls.Output("outext3");
					output_24.value = "Output";
					output_24.style.css({
						"text-align" : "center"
					});
					container.addChild(output_24, {
						"top": "179px",
						"right": "20px",
						"width": "120px",
						"height": "20px"
					});
				})(group_25);
				container.addChild(group_25, {
					"top": "10px",
					"right": "0px",
					"bottom": "10px",
					"left": "0px"
				});
			})(group_24);
			container.addChild(group_24, {
				"autoSize": "none",
				"width": "600px",
				"height": "240px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "recipe_detail";
	cpr.core.Platform.INSTANCE.register(app);
})();
