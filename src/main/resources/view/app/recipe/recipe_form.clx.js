/*
 * App URI: app/recipe/recipe_form
 * Source Location: app/recipe/recipe_form.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("app/recipe/recipe_form", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * contents_container.js
			 * Created at 2025. 4. 17. 오후 1:52:50.
			 *
			 * @author gyrud
			 ************************************************/

			const recipeCategoryModules = cpr.core.Module.require("data/recipeCategoryItems");
			const typeCategoryItems = recipeCategoryModules.typeCategoryItems;
			const situationCategoryItems = recipeCategoryModules.situationCategoryItems;
			const methodCategoryItems = recipeCategoryModules.methodCategoryItems; 

			const recipeInfoSelectItemsModule = cpr.core.Module.require("data/recipeInfoSelectItems");
			const difficultyItems = recipeInfoSelectItemsModule.difficulty;
			const cookingTimeItems = recipeInfoSelectItemsModule.cookingTime;

			const isLastPathSegmentNumberMd = cpr.core.Module.require("module/common/isLastPathSegmentNumber");
			const isLastPathSegmentNumber = isLastPathSegmentNumberMd.isLastPathSegmentNumber();

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				// 카테고리 아이템 지정
				const typeCategorySelect = app.lookup("typeCategorySelect");
				const situationCategorySelet = app.lookup("situationCategorySelect");
				const methodCategorySelect = app.lookup("methodCategorySelect");
				const difficultySelect = app.lookup("difficultySelect");
				const cookingTimeSelect = app.lookup("cookingTimeSelect");
				
				for (let i=0; i<typeCategoryItems.length; i++){
					typeCategorySelect.addItem(new cpr.controls.Item(typeCategoryItems[i], typeCategoryItems[i]));	
				}
				
				for (let i=0; i<situationCategoryItems.length; i++){
					situationCategorySelet.addItem(new cpr.controls.Item(situationCategoryItems[i], situationCategoryItems[i]));	
				}
				
				for (let i=0; i<methodCategoryItems.length; i++){
					methodCategorySelect.addItem(new cpr.controls.Item(methodCategoryItems[i], methodCategoryItems[i]));	
				}
				
				for (let i=0; i<difficultyItems.length; i++){
					difficultySelect.addItem(new cpr.controls.Item(difficultyItems[i], difficultyItems[i]));	
				}
				
				for (let i=0; i<cookingTimeItems.length; i++){
					cookingTimeSelect.addItem(new cpr.controls.Item(cookingTimeItems[i], cookingTimeItems[i]));	
				}
				
				// 레시피 form 타이틀 수정
				const isNumber = isLastPathSegmentNumber;
				console.log(isNumber);
				if(isNumber[0]){
					const formTitle = app.lookup("formTitle");
					formTitle.value = "레시피 수정";
					
				}
			}


			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				const isNumber = isLastPathSegmentNumber;
				if(isNumber[0]){
				    const recipeInfoSms = app.lookup("recipeInfoSms");
				    
				    recipeInfoSms.setRequestActionUrl(recipeInfoSms.action + "/" + isNumber[1]);
				    recipeInfoSms.send();
				}
			}

			/*
			 * 매트릭스 서브미션에서 before-submit 이벤트 발생 시 호출.
			 * 통신을 시작하기전에 발생합니다.
			 */
			function onRecipeCreateSmsBeforeSubmit(e){
				const recipeCreateSms = e.control;
				
				// 기본정보
				const recipeName = app.lookup("recipeNameInput").value;
				const receipSummary = app.lookup("recipeSummaryInput").value;
				const servings = app.lookup("servingsInput").value;
				const difficulty = app.lookup("difficultySelect").value;
				const cookingTime = app.lookup("cookingTimeSelect").value;
				const calories = app.lookup("caloriesInput").value;
				
				// TODO: 완성사진
				const files = ["https://mybucket.s3.amazonaws.com/images/recipe1.jpg"];
				
				// 카테고리
				const typeCategory = app.lookup("typeCategorySelect").value;
				const situationCategory = app.lookup("situationCategorySelect").value;
				const methodCategory = app.lookup("methodCategorySelect").value;
				
				const categories = [
								    {
								      recipeCategoryName: typeCategory,
								      recipeCategoryType: "종류별"
								    },
								    {
								      recipeCategoryName: situationCategory,
								      recipeCategoryType: "상황별"
								    },
								    {
								      recipeCategoryName: methodCategory,
								      recipeCategoryType: "방법별"
								    }
								  ];
				// 재료
				const ingredientCreateGroup = app.lookup("ingredientCreateGroup");
				const ingredientForms = ingredientCreateGroup.getChildren();
				let ingredients = []; // 결과
				
				for(let i=0; i<ingredientForms.length; i++){
					const ingredientResult = ingredientForms[i].getIngredientsList();
					ingredients.push(...ingredientResult);
				}
				
				// 과정
				const cookingProcessGroup = app.lookup("cookingProcessCreateGroup");
				const cookingProcessForm = cookingProcessGroup.getChildren();
				let steps = []; // 결과
				
				for(let i=0; i<cookingProcessForm.length; i++){
					const cookingProcessResult = cookingProcessForm[i].getCookingProcessValue();
					const cookingProcessObj = {...cookingProcessResult, stepNumber:i+1};
					steps.push(cookingProcessObj);
				}
				
				const requestData = {
									    userId: 1,
									    parentRecipeId: null,
									    recipeName: recipeName,
									    cookingTime: cookingTime,
									    difficulty: difficulty,
									    calories: calories,
									    summary: receipSummary,
									    servings: servings,
									    files,
									    ingredients,
									    steps,
									    categories
									  };					  
			  	 					  
				 recipeCreateSms.addParameter("param", requestData);
			}

			/*
			 * "등록하기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				const recipeCreateSms = app.lookup("recipeCreateSms");
				recipeCreateSms.send();
			}

			/*
			 * "재료 그룹 추가하기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onIngredientGroupAdd(e){
				const button = e.control;
				const ingredientCreateGroup = app.lookup("ingredientCreateGroup");
				
				const ingredientForm = new udc.recipe.ingredient_create();
				ingredientForm.addEventListener("delete", onIngredientCreateFormDelete);
				ingredientCreateGroup.addChild(ingredientForm, {
					  width: "100%",
					  height: "auto",
				});	
			}

			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onIngredientCreateFormDelete(e){
				const ingredientCreateForm = e.control;
				const ingredientCreateGroup = app.lookup("ingredientCreateGroup");
				ingredientCreateGroup.removeChild(ingredientCreateForm);
			}

			/*
			 * "과정 추가하기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onCookingProcessAdd(e){
				const button = e.control;
				const cookingProcessCreateGroup = app.lookup("cookingProcessCreateGroup");
				
				const cookingProcessForm = new udc.recipe.cooking_process_create();
				cookingProcessForm.seq = cookingProcessCreateGroup.getChildrenCount()+1;
				
				cookingProcessCreateGroup.addChild(cookingProcessForm, {
					  width: "100%",
					  height: "80px",
				});	
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onRecipeInfoSmsSubmitSuccess(e){
				var recipeInfoSms = e.control;
				
				const result = recipeInfoSms.xhr.responseText;
				const resultJson = JSON.parse(result);
				
				// 기본 정보
				const recipeName = app.lookup("recipeNameInput");
				const receipSummary = app.lookup("recipeSummaryInput");
				const servings = app.lookup("servingsInput");
				const difficulty = app.lookup("difficultySelect");
				const cookingTime = app.lookup("cookingTimeSelect");
				const calories = app.lookup("caloriesInput");
				
				recipeName.value = resultJson.recipeName;
				receipSummary.value = resultJson.summary;
				servings.value = resultJson.servings;
				difficulty.value = resultJson.difficulty;
				cookingTime.value = resultJson.cookingTime;
				calories.value = resultJson.calories;
				
				// TODO: 완성사진
				
				
				// 카테고리
				const typeCategory = app.lookup("typeCategorySelect");
				const situationCategory = app.lookup("situationCategorySelect");
				const methodCategory = app.lookup("methodCategorySelect");
				
				const categories = resultJson.categories;
				for (let j = 0; j < categories.length; j++) {
				  const category = categories[j];
				  const categoryType = category.recipeCategoryType;
				  switch (categoryType) {
				    case "종류별":
			      	  typeCategory.value = category.recipeCategoryName;	
				      break;
				    case "상황별":
				      situationCategory.value = category.recipeCategoryName;
				      break;
				    case "방법별":
				      methodCategory.value = category.recipeCategoryName;
				      break;
				    default:
				      break;
				  }
				}
				
				// 재료
				const ingredientCreateGroup = app.lookup("ingredientCreateGroup");
				ingredientCreateGroup.removeAllChildren();
				
				// 1. ingredientGroup별로 묶기
				const groupedIngredients = {};
				
				for (let i = 0; i < resultJson.ingredients.length; i++) {
				  const ing = resultJson.ingredients[i];
				  const groupName = ing.ingredientGroup || "재료";
				
				  if (!groupedIngredients[groupName]) {
				    groupedIngredients[groupName] = [];
				  }
				
				  groupedIngredients[groupName].push({
				  	id: ing.id,
				    ingredientName: ing.ingredientName,
				    ingredientQuantity: ing.ingredientQuantity,
				    ingredientUnit: ing.ingredientUnit
				  });
				}
				
				const groupCount = Object.keys(groupedIngredients).length;
				console.log(groupedIngredients);
				
				// 재료 넣기
				for(let i=0; i<groupCount; i++){
					const ingredientForm = new udc.recipe.ingredient_create();
					ingredientForm.setIngredientsList(groupedIngredients);
					ingredientForm.addEventListener("delete", onIngredientCreateFormDelete);
					ingredientCreateGroup.addChild(ingredientForm, {
						  width: "100%",
						  height: "auto",
					});		
				}
				
				// 요리 과정
				const cookingProcessCreateGroup = app.lookup("cookingProcessCreateGroup");
				cookingProcessCreateGroup.removeAllChildren();
				for (let i = 0; i < resultJson.steps.length; i++) {
					const step = resultJson.steps[i];
					const cookingProcessForm = new udc.recipe.cooking_process_create();
					cookingProcessForm.seq = step.stepNumber;
					cookingProcessForm.explanation = step.stepDescription;
					cookingProcessForm.img = step.fileUrl; 
							
					cookingProcessCreateGroup.addChild(cookingProcessForm, {
					  width: "100%",
					  height: "80px",
				});	
				}
				
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ingredients");
			dataSet_1.parseData({
				"columns" : [
					{"name": "ingredientName"},
					{"name": "ingredientGroup"},
					{"name": "ingredientQuantity"},
					{"name": "ingredientUnit"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("steps");
			dataSet_2.parseData({
				"columns" : [
					{"name": "stepNumber"},
					{"name": "stepDescription"},
					{"name": "file"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("categories");
			dataSet_3.parseData({
				"columns" : [
					{"name": "recipeCategoryName"},
					{"name": "recipeCategoryType"}
				]
			});
			app.register(dataSet_3);
			var submission_1 = new cpr.protocols.Submission("recipeCreateSms");
			submission_1.action = "/api/recipes/create";
			submission_1.mediaType = "application/json";
			if(typeof onRecipeCreateSmsBeforeSubmit == "function") {
				submission_1.addEventListener("before-submit", onRecipeCreateSmsBeforeSubmit);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("recipeInfoSms");
			submission_2.action = "/api/recipes";
			if(typeof onRecipeInfoSmsSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onRecipeInfoSmsSubmitSuccess);
			}
			app.register(submission_2);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
			app.supportMedia("all and (max-width: 499.984px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["contents-container"]);
			container.style.css({
				"background-color" : "#FFFFFF",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.spacing = 20;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("formTitle");
			output_1.value = "레시피 등록";
			output_1.style.css({
				"font-weight" : "bold",
				"font-size" : "20px"
			});
			container.addChild(output_1, {
				"width": "600px",
				"height": "30px"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#EAF1F3",
				"border-radius" : "5px"
			});
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_2.spacing = 20;
			verticalLayout_2.leftMargin = 10;
			verticalLayout_2.rightMargin = 10;
			verticalLayout_2.topMargin = 20;
			verticalLayout_2.bottomMargin = 20;
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.recipe.group_subtitle();
				userDefinedControl_1.value = "기본 정보";
				container.addChild(userDefinedControl_1, {
					"width": "599px",
					"height": "20px"
				});
				var group_2 = new cpr.controls.Container();
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "20px";
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.setColumns(["100px", "1fr", "1fr", "1fr"]);
				formLayout_1.setRows(["25px", "25px", "25px", "25px", "25px", "25px"]);
				group_2.setLayout(formLayout_1);
				(function(container){
					var output_2 = new cpr.controls.Output();
					output_2.value = "레시피명";
					container.addChild(output_2, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "간단 설명";
					container.addChild(output_3, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "카테고리";
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "요리완성 사진";
					container.addChild(output_5, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var output_6 = new cpr.controls.Output();
					output_6.value = "요리 정보";
					container.addChild(output_6, {
						"colIndex": 0,
						"rowIndex": 4
					});
					var output_7 = new cpr.controls.Output();
					output_7.value = "칼로리";
					container.addChild(output_7, {
						"colIndex": 0,
						"rowIndex": 5
					});
					var inputBox_1 = new cpr.controls.InputBox("recipeNameInput");
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 3,
						"rowSpan": 1
					});
					var textArea_1 = new cpr.controls.TextArea("recipeSummaryInput");
					container.addChild(textArea_1, {
						"colIndex": 1,
						"rowIndex": 1,
						"colSpan": 3,
						"rowSpan": 1
					});
					var comboBox_1 = new cpr.controls.ComboBox("typeCategorySelect");
					comboBox_1.placeholder = "종류별";
					container.addChild(comboBox_1, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var comboBox_2 = new cpr.controls.ComboBox("situationCategorySelect");
					comboBox_2.placeholder = "상황별";
					container.addChild(comboBox_2, {
						"colIndex": 2,
						"rowIndex": 2
					});
					var comboBox_3 = new cpr.controls.ComboBox("methodCategorySelect");
					comboBox_3.placeholder = "방법별";
					container.addChild(comboBox_3, {
						"colIndex": 3,
						"rowIndex": 2
					});
					var fileInput_1 = new cpr.controls.FileInput("recipeImg");
					container.addChild(fileInput_1, {
						"colIndex": 1,
						"rowIndex": 3,
						"colSpan": 3,
						"rowSpan": 1
					});
					var comboBox_4 = new cpr.controls.ComboBox("difficultySelect");
					comboBox_4.placeholder = "난이도";
					container.addChild(comboBox_4, {
						"colIndex": 2,
						"rowIndex": 4
					});
					var comboBox_5 = new cpr.controls.ComboBox("cookingTimeSelect");
					comboBox_5.placeholder = "소요시간";
					container.addChild(comboBox_5, {
						"colIndex": 3,
						"rowIndex": 4
					});
					var inputBox_2 = new cpr.controls.InputBox("caloriesInput");
					container.addChild(inputBox_2, {
						"colIndex": 1,
						"rowIndex": 5,
						"colSpan": 3,
						"rowSpan": 1
					});
					var inputBox_3 = new cpr.controls.InputBox("servingsInput");
					inputBox_3.placeholder = "몇인분";
					inputBox_3.inputMode = "numeric";
					container.addChild(inputBox_3, {
						"colIndex": 1,
						"rowIndex": 4
					});
				})(group_2);
				container.addChild(group_2, {
					"autoSize": "height",
					"width": "400px",
					"height": "250px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "600px",
				"height": "330px"
			});
			
			var group_3 = new cpr.controls.Container();
			group_3.style.css({
				"background-color" : "#FBF3EB",
				"border-radius" : "5px"
			});
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.spacing = 20;
			verticalLayout_3.leftMargin = 10;
			verticalLayout_3.rightMargin = 10;
			verticalLayout_3.topMargin = 20;
			verticalLayout_3.bottomMargin = 20;
			group_3.setLayout(verticalLayout_3);
			(function(container){
				var userDefinedControl_2 = new udc.recipe.group_subtitle();
				userDefinedControl_2.value = "재료";
				container.addChild(userDefinedControl_2, {
					"width": "599px",
					"height": "20px"
				});
				var group_4 = new cpr.controls.Container("ingredientCreateGroup");
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 20;
				group_4.setLayout(verticalLayout_4);
				(function(container){
					var userDefinedControl_3 = new udc.recipe.ingredient_create("ingredientCreateForm");
					if(typeof onIngredientCreateFormDelete == "function") {
						userDefinedControl_3.addEventListener("delete", onIngredientCreateFormDelete);
					}
					container.addChild(userDefinedControl_3, {
						"autoSize": "height",
						"width": "580px",
						"height": "115px"
					});
				})(group_4);
				container.addChild(group_4, {
					"autoSize": "height",
					"width": "100%",
					"height": "135px"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "재료 그룹 추가하기";
				if(typeof onIngredientGroupAdd == "function") {
					button_1.addEventListener("click", onIngredientGroupAdd);
				}
				container.addChild(button_1, {
					"width": "100px",
					"height": "20px"
				});
			})(group_3);
			container.addChild(group_3, {
				"autoSize": "height",
				"width": "600px",
				"height": "250px"
			});
			
			var group_5 = new cpr.controls.Container();
			group_5.style.css({
				"background-color" : "#E5E6C7",
				"border-radius" : "5px"
			});
			var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_5.spacing = 20;
			verticalLayout_5.leftMargin = 10;
			verticalLayout_5.rightMargin = 10;
			verticalLayout_5.topMargin = 20;
			verticalLayout_5.bottomMargin = 20;
			group_5.setLayout(verticalLayout_5);
			(function(container){
				var userDefinedControl_4 = new udc.recipe.group_subtitle();
				userDefinedControl_4.value = "요리 과정";
				container.addChild(userDefinedControl_4, {
					"width": "599px",
					"height": "20px"
				});
				var group_6 = new cpr.controls.Container("cookingProcessCreateGroup");
				var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_6.spacing = 10;
				group_6.setLayout(verticalLayout_6);
				(function(container){
					var userDefinedControl_5 = new udc.recipe.cooking_process_create();
					userDefinedControl_5.seq = "1.";
					container.addChild(userDefinedControl_5, {
						"autoSize": "none",
						"width": "580px",
						"height": "80px"
					});
				})(group_6);
				container.addChild(group_6, {
					"autoSize": "height",
					"width": "100%",
					"height": "80px"
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "과정 추가하기";
				if(typeof onCookingProcessAdd == "function") {
					button_2.addEventListener("click", onCookingProcessAdd);
				}
				container.addChild(button_2, {
					"width": "100px",
					"height": "20px"
				});
			})(group_5);
			container.addChild(group_5, {
				"autoSize": "height",
				"width": "600px",
				"height": "200px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "등록하기";
			if(typeof onButtonClick == "function") {
				button_3.addEventListener("click", onButtonClick);
			}
			container.addChild(button_3, {
				"width": "600px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "recipe_form";
	cpr.core.Platform.INSTANCE.register(app);
})();
