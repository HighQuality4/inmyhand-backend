/*
 * App URI: app/fridge/fridge_auto
 * Source Location: app/fridge/fridge_auto.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("app/fridge/fridge_auto", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * contents_container.js
			 * Created at 2025. 4. 17. 오후 1:52:50.
			 *
			 * @author gyrud
			 ************************************************/




			/*
			 * "사진
			 * 업로드" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				var button = e.control;
				
				//----------------------------1. UDC [생성] ---------------------------------
				//------------------------- 이미지 업로드 UDC ------------------------------
				
				// 1.이미지 업로드 UDC 컨트롤을 동적으로 생성할 컨테이너 찾기
				var ImageContainer = app.lookup("addImageArea"); // 컨테이너 ID로 찾기
				
				// 2. 이미지 UDC 인스턴스 생성
			    var udcItem = new udc.image.UDCImageBox();
			    udcItem.id = "photo_" + new Date().getMilliseconds(); 

			    //---------------------------- 그리드 UDC----------------------------------- 
			    // 1. ocr 결과값 그리드 UDC 컨트롤을 동적으로 생성할 컨테이너 찾기
				var resultContainer = app.lookup("resultImageArea"); // 컨테이너 ID로 찾기
				// 2. UDC 인스턴스 생성
			   
			   console.log("그리드 생성")
				
				 // 4. 컨테이너에 이미지 UDC 추가
			    ImageContainer.insertChild(0, udcItem, {
			        width: "100px",
			        height: "100px"
			    });

			   //---------------------------- 3. 동적 UDC의 삭제 이벤트 부여 / 동적 추가 -----------------------
			   //----------------------------- 이미지 업로드 UDC------------------------------
			    // 3. 이미지 삭제 이벤트 부여
			  	udcItem.addEventListener("removeImageCtrlBtn", function(e) {
					e.preventDefault();
			//		alert(udcItem.app.uuid + " 등록을 취소합니다!");
					ImageContainer.removeChild(udcItem);
				
					var linkedResultId = udcItem.userAttr("linkedResultId");
					if(linkedResultId){
						var linkedGrid = resultContainer.getChildren().find(function(child) {
						    return child.id === linkedResultId;
						});
						if (linkedGrid) {
						    resultContainer.removeChild(linkedGrid);
						}
					}
					
					
					// ✅ ocrAllList 데이터 삭제
					deleteOcrRowsById(linkedResultId);
				});
			    

			    // ------------------------------4. 이미지 선책 후 그리드 생성하기-----------------------------
				// 파일 업로드 성공 이벤트나 파일 변경 이벤트를 감지
			    udcItem.addEventListener("test", function(e){
			    	
			    	// 그리드 생성하기
			    	var resultItem = new udc.fridge.UDCFridgeGrid("result_" + new Date().getMilliseconds());
					    	    // 4. 컨테이너에 이미지 UDC 추가
						resultContainer.insertChild(0, resultItem, {
						    width: "570px",
						    height: "200px"
						});
						resultItem.userAttr("linkedImageId", String(udcItem.id));
						udcItem.userAttr("linkedResultId", String(resultItem.id));

						// 파일 서버로 전송하는 서브미션
						var submission = app.lookup("sendImageOcr");
					    var files = e.option.file;
					    if (files) {
					        
					    } else {
					        console.log("선택된 파일이 없습니다.");
					        return;
					    }
						
						// 파일 인풋에 넣어서 파일 객체로 서버로 보내기
						var input = app.lookup("fi1")
						input.file = null;
						input.file = files;
						input.redraw();
						
						input.send(submission)
						
						// 서브 미션을 두번 탐,,,? 그래서 addEventListenerOnce 이벤트 걸어줌
				   		submission.addEventListenerOnce("submit-success", function(e){
				   			console.log("서버로 이미지 전송 성공 시 그리드에 뿌리기")
				   			if(e){
				   				var ds = app.lookup("ocrResultList");
					    	
						    	//------------------------- 저장로직 -------------------------
						    	for(var i = 0; i < ds.getRowCount(); i++){
						    		ds.setValue(i, "id", resultItem.id)
						    	}
						    	
						    	// 전체 식재료 정보 저장 데이터셋에 전달하기 (UDC 데이터셋-> 최종 ALL 
						    	app.lookup("ocrResultList").copyToDataSet(app.lookup("ocrAllList"));

								console.log("그리드에 뿌리고 데이터셋 확인 ===========")
						    	console.log(app.lookup("ocrAllList").getRowDataRanged())
						    	if(resultItem){
						    		resultItem.setAppProperty("dataSet", ds);
						    	}

				   			}
				   			
				   		});
			    });

			}	


			/*
			 * "다시 하기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
				var button = e.control;
				
				var container = app.lookup("addImageArea");
				container.removeAllChildren();	
				
				
				var resultContainer = app.lookup("resultImageArea");
				resultContainer.removeAllChildren();	
			}



			function deleteOcrRowsById(targetId) {
				var ocrAllList = app.lookup("ocrAllList");
			//	console.log(ocrAllList.getRowDataRanged());
			//	console.log(targetId);
				var rows = ocrAllList.findAllRow("id == '" + targetId + "'");
			//	console.log(rows)
				rows.forEach(row => {
			//		console.log(row.getIndex())
					
			//	    ocrAllList.realDeleteRow(row.getIndex());
				});
				for(var i = rows.length-1 ; i >= 0  ; i-- ){
					app.lookup("ocrAllList").realDeleteRow(rows[i].getIndex());			
				}
					
			//	console.log("지움")
			//	console.log(ocrAllList.getRowDataRanged());
			}

			/*
			 * 사용자 정의 컨트롤에서 save-update-click 이벤트 발생 시 호출.
			 * update서버연결저장
			 */
			function onFridgeUDSaveUpdateClick(e){
				var fridgeUD = e.control;
				var ds1 = app.lookup("aaa").callAppMethod("getDataSet");
			//	console.log(ds1.getRowDataRanged());
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSendImageOcrSubmitSuccess(e){
				var sendImageOcr = e.control;
				
			}

			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e){
				var button = e.control;
			//	var result = app.lookup("ocrAllList");
				console.log("저장버튼 누르고 데이터셋 확인 ===========")
				console.log(app.lookup("ocrResultList").getRowDataRanged());
				
				console.log("저장버튼 누르고 데이터셋 확인 ===========")
				console.log(app.lookup("ocrAllList").getRowDataRanged());
				
				
				app.lookup("ocrAllList").deleteColumn("id");
				
				console.log("필요없는값 삭제===========")
				console.log(app.lookup("ocrAllList").getRowDataRanged());
				
				
				console.log("서버로 보내기 >>>" );
				
				app.lookup("sendOcrResultInfo").send();
				
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ocrResultList");
			dataSet_1.parseData({
				"columns": [
					{"name": "foodName"},
					{
						"name": "foodAmount",
						"dataType": "number"
					},
					{"name": "endDate"},
					{"name": "chargeDate"},
					{"name": "categoryName"},
					{"name": "id"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ocrAllList");
			dataSet_2.parseData({
				"columns": [
					{"name": "foodName"},
					{
						"name": "foodAmount",
						"dataType": "number"
					},
					{"name": "endDate"},
					{"name": "chargeDate"},
					{"name": "categoryName"},
					{"name": "id"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			var submission_1 = new cpr.protocols.Submission("sendImageOcr");
			submission_1.action = "/api/files/ocr-upload-test";
			submission_1.mediaType = "multipart/form-data";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSendImageOcrSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSendImageOcrSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sendOcrResultInfo");
			submission_2.action = "/api/ocr/create";
			submission_2.addRequestData(dataSet_2);
			app.register(submission_2);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
			app.supportMedia("all and (max-width: 499.984px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["contents-container"]);
			container.style.css({
				"text-align" : "center",
				"background-color" : "#FFFFFF",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "1px";
			formLayout_1.verticalSpacing = "1px";
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.setColumns(["1fr", "490px", "1fr"]);
			formLayout_1.setRows(["1fr", "40px", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "영수증 자동 등록";
				output_1.style.css({
					"background-color" : "#F59760",
					"border-radius" : "7px",
					"color" : "#FFFFFF",
					"font-weight" : "bold",
					"font-size" : "20px",
					"font-family" : "Kim jung chul Myungjo Regular",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "8px",
						"width": "565px",
						"height": "50px",
						"left": "calc(50% - 282px)"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
						"top": "8px",
						"width": "276px",
						"height": "50px",
						"left": "calc(50% - 138px)"
					}, 
					{
						"media": "all and (max-width: 499.984px)",
						"top": "8px",
						"width": "193px",
						"height": "50px",
						"left": "calc(50% - 96px)"
					}
				]
			});
			
			var group_2 = new cpr.controls.Container("이미지 업로드 영역");
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.scrollable = false;
			formLayout_2.horizontalSpacing = "1px";
			formLayout_2.verticalSpacing = "1px";
			formLayout_2.topMargin = "5px";
			formLayout_2.rightMargin = "5px";
			formLayout_2.bottomMargin = "5px";
			formLayout_2.leftMargin = "5px";
			formLayout_2.setColumns(["1fr", "490px", "1fr"]);
			formLayout_2.setRows(["1fr"]);
			group_2.setLayout(formLayout_2);
			(function(container){
				var group_3 = new cpr.controls.Container();
				group_3.style.css({
					"background-color" : "#E5E6C7"
				});
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.scrollable = false;
				formLayout_3.horizontalSpacing = "1px";
				formLayout_3.verticalSpacing = "1px";
				formLayout_3.topMargin = "5px";
				formLayout_3.rightMargin = "5px";
				formLayout_3.bottomMargin = "5px";
				formLayout_3.leftMargin = "5px";
				formLayout_3.setColumns(["1fr"]);
				formLayout_3.setRows(["1fr"]);
				group_3.setLayout(formLayout_3);
				(function(container){
					var group_4 = new cpr.controls.Container();
					var formLayout_4 = new cpr.controls.layouts.FormLayout();
					formLayout_4.scrollable = false;
					formLayout_4.horizontalSpacing = "1px";
					formLayout_4.verticalSpacing = "1px";
					formLayout_4.topMargin = "5px";
					formLayout_4.rightMargin = "5px";
					formLayout_4.bottomMargin = "5px";
					formLayout_4.leftMargin = "5px";
					formLayout_4.setColumns(["100px", "1fr"]);
					formLayout_4.setRows(["1fr"]);
					group_4.setLayout(formLayout_4);
					(function(container){
						var group_5 = new cpr.controls.Container("addImageArea");
						var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
						group_5.setLayout(flowLayout_1);
						(function(container){
							var fileInput_1 = new cpr.controls.FileInput("fi1");
							fileInput_1.visible = false;
							container.addChild(fileInput_1, {
								"autoSize": "width",
								"width": "1px",
								"height": "20px"
							});
						})(group_5);
						container.addChild(group_5, {
							"colIndex": 1,
							"rowIndex": 0
						});
						var button_1 = new cpr.controls.Button();
						button_1.value = "사진\r\n업로드";
						button_1.style.css({
							"color" : "#856C66"
						});
						if(typeof onButtonClick == "function") {
							button_1.addEventListener("click", onButtonClick);
						}
						container.addChild(button_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_4);
					container.addChild(group_4, {
						"colIndex": 0,
						"rowIndex": 0
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 1,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_2);
			container.addChild(group_2, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "68px",
						"width": "565px",
						"height": "143px",
						"left": "calc(50% - 282px)"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
						"top": "68px",
						"width": "276px",
						"height": "143px",
						"left": "calc(50% - 138px)"
					}, 
					{
						"media": "all and (max-width: 499.984px)",
						"top": "68px",
						"width": "193px",
						"height": "143px",
						"left": "calc(50% - 96px)"
					}
				]
			});
			
			var group_6 = new cpr.controls.Container();
			var formLayout_5 = new cpr.controls.layouts.FormLayout();
			formLayout_5.scrollable = false;
			formLayout_5.horizontalSpacing = "1px";
			formLayout_5.verticalSpacing = "1px";
			formLayout_5.topMargin = "5px";
			formLayout_5.rightMargin = "5px";
			formLayout_5.bottomMargin = "5px";
			formLayout_5.leftMargin = "5px";
			formLayout_5.setColumns(["1fr", "490px", "1fr"]);
			formLayout_5.setRows(["1fr", "40px", "1fr"]);
			group_6.setLayout(formLayout_5);
			(function(container){
				var output_2 = new cpr.controls.Output();
				output_2.value = "영수증 입력 결과";
				output_2.style.css({
					"border-right-style" : "solid",
					"color" : "#F59760",
					"border-top-width" : "2px",
					"border-bottom-color" : "#f59760",
					"font-weight" : "bold",
					"border-right-width" : "2px",
					"border-left-color" : "#f59760",
					"font-size" : "20px",
					"border-right-color" : "#f59760",
					"border-left-width" : "2px",
					"border-top-style" : "solid",
					"border-radius" : "7px",
					"border-left-style" : "solid",
					"border-bottom-width" : "2px",
					"border-top-color" : "#f59760",
					"font-family" : "Kim jung chul Myungjo Regular",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_6);
			container.addChild(group_6, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "215px",
						"width": "565px",
						"height": "50px",
						"left": "calc(50% - 282px)"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
						"top": "215px",
						"width": "276px",
						"height": "50px",
						"left": "calc(50% - 138px)"
					}, 
					{
						"media": "all and (max-width: 499.984px)",
						"top": "215px",
						"width": "193px",
						"height": "50px",
						"left": "calc(50% - 96px)"
					}
				]
			});
			
			var group_7 = new cpr.controls.Container("resultImageArea");
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			group_7.setLayout(verticalLayout_1);
			container.addChild(group_7, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "274px",
						"width": "565px",
						"height": "357px",
						"left": "calc(50% - 282px)"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
						"top": "274px",
						"width": "276px",
						"height": "357px",
						"left": "calc(50% - 138px)"
					}, 
					{
						"media": "all and (max-width: 499.984px)",
						"top": "274px",
						"width": "193px",
						"height": "357px",
						"left": "calc(50% - 96px)"
					}
				]
			});
			
			var group_8 = new cpr.controls.Container();
			var formLayout_6 = new cpr.controls.layouts.FormLayout();
			formLayout_6.scrollable = false;
			formLayout_6.horizontalSpacing = "1px";
			formLayout_6.verticalSpacing = "1px";
			formLayout_6.topMargin = "5px";
			formLayout_6.rightMargin = "5px";
			formLayout_6.bottomMargin = "5px";
			formLayout_6.leftMargin = "5px";
			formLayout_6.setColumns(["1fr", "490px", "1fr"]);
			formLayout_6.setRows(["1fr", "38px", "1fr"]);
			group_8.setLayout(formLayout_6);
			(function(container){
				var button_2 = new cpr.controls.Button();
				button_2.value = "저장";
				if(typeof onButtonClick3 == "function") {
					button_2.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_2, {
					"colIndex": 1,
					"rowIndex": 1
				});
			})(group_8);
			container.addChild(group_8, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "630px",
						"width": "565px",
						"height": "50px",
						"left": "calc(50% - 282px)"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
						"top": "630px",
						"width": "276px",
						"height": "50px",
						"left": "calc(50% - 138px)"
					}, 
					{
						"media": "all and (max-width: 499.984px)",
						"top": "630px",
						"width": "193px",
						"height": "50px",
						"left": "calc(50% - 96px)"
					}
				]
			});
		}
	});
	app.title = "fridge_auto";
	cpr.core.Platform.INSTANCE.register(app);
})();
