/*
 * App URI: app/fridge/fridge_main
 * Source Location: app/fridge/fridge_main.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("app/fridge/fridge_main", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * contents_container.js
			 * Created at 2025. 4. 17. 오후 1:52:50.
			 *
			 * @author gyrud
			 ************************************************/

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				var button = e.control;
				alert("동작 테스트합니다");

			}


			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad2(e){

				app.lookup("getFridgeList").send();
				app.lookup("getFoodList").send();
			}


			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onGetFridgeListSubmitSuccess(e){
				var getFridgeList = e.control;
				
			//	app.lookup("fridgeList").getRowDataRanged().forEach(function(each){
			//	 
			//		// NavigationBar에 사용할 올바른 객체는 MenuItem입니다
			//		var item = new cpr.controls.MenuItem(each.fridgeName, each.fridgeId, null);
			//	
			//		// NavigationBar에 아이템 추가
			//		app.lookup("fridgNavbar").addItem(item);
			//	});

			}


			/*
			 * 내비게이션 바에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onFridgNavbarItemClick(e){

				var fridgNavbar = e.control;

				alert("클릭됨 "+e.item.value);
			  	
			  	var setClickLabelValue = e.item.value; 
			  	
			  	// 정적의 nav값 추출했음.
			  	var vcNav = app.lookup("fridgNavbar");
			  	
			    var voItem = vcNav.getItemByValue(setClickLabelValue);
			    vcNav.focusItem(voItem);
			    alert(voItem.value);	
				
			}

			function focusItem(vsValue) {
			    
			    var vcNav = app.lookup("fridgNavbar");
			    var voItem = vcNav.getItemByValue(vsValue);
			    vcNav.focusItem(voItem);
			    alert(voItem);
			    
			}

			function fixGridSetting(){
				
				var grid = app.lookup("foodListGrid");
				// 좌측 틀고정을 가로사이즈 100px, 고정되는 셀 수는 2개로 설정합니다.
				grid.leftSplitWidth = 100;
				grid.rightSplit = 1;

			}

			function onRowAdded(event) {
				
				/** @type cpr.controls.provider.GridRow */
			    var grid = event.control;
			    var addedRow = event.row;
			    var index = event.rowIndex;
			    var target = event.relativeTargetName;

			    console.log("추가된 행의 인덱스:", index);
			    console.log("타겟 이름:", target);

			    // 추가된 행에 특정 데이터 설정
			    addedRow.setValue("columnName", "기본값");

			    // 필요에 따라 UI 업데이트 또는 다른 로직 실행
			    
			}




			//----------------------------------------

			/*
			 * 사용자 정의 컨트롤에서 save-click 이벤트 발생 시 호출.
			 * 저장버튼 클릭시 발생하는 이벤트
			 */
			function onFridgeCRUDSaveClick(e){
				var fridgeCRUD = e.control;
				
				
				var foodDataSet = app.lookup("insertFoodList");
				
				var foodDataMap = app.lookup("fridgeIdParam");
				
			//	fridgeId 
			// 	foodDataMap.setAttr("fridgeId", "1");
				
				
				
				var totalInsertRow = foodDataSet.getRowCount();
					
				alert("변경된 저장 방법");

				app.lookup("sendFoodList").send();
				app.lookup("getFoodList").send();
				
				app.lookup("foodListGrid").redraw();
				app.lookup("insertFoodgrd").revertData(); 
				
				
			}



			/*
			 * 사용자 정의 컨트롤에서 save-update-click 이벤트 발생 시 호출.
			 * update서버연결저장
			 */
			function onFridgeUDSaveUpdateClick(e){
				var fridgeUD = e.control;
				app.lookup("updateFoodList").send();
				
				
				app.lookup("getFoodList").send();
				app.lookup("foodListGrid").redraw();	
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("foodList");
			dataSet_1.parseData({
				"sortCondition": "categoryName desc",
				"columns": [
					{
						"name": "id",
						"dataType": "number"
					},
					{
						"name": "foodName",
						"dataType": "string"
					},
					{
						"name": "foodAmount",
						"dataType": "number"
					},
					{"name": "endDate"},
					{"name": "chargeDate"},
					{"name": "saveDate"},
					{
						"name": "categoryName",
						"dataType": "string"
					},
					{
						"name": "fridgeId",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("fridgeList");
			dataSet_2.parseData({
				"columns" : [
					{
						"name": "fridgeId",
						"dataType": "number"
					},
					{"name": "fridgeName"},
					{"name": "favoriteState"},
					{
						"name": "isLeader",
						"dataType": "string"
					}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("searchCategoryList");
			dataSet_3.parseData({
				"columns" : [
					{
						"name": "categoryId",
						"dataType": "number"
					},
					{"name": "categoryName"},
					{
						"name": "expirationInfo",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("resultCategory");
			dataSet_4.parseData({
				"columns" : [
					{"name": "resultCategoryId"},
					{"name": "resultCategroyName"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("insertFoodList");
			dataSet_5.parseData({
				"columns" : [
					{
						"name": "id",
						"dataType": "number",
						"displayOnly": false
					},
					{
						"name": "foodName",
						"dataType": "string",
						"displayOnly": false
					},
					{
						"name": "foodAmount",
						"dataType": "number",
						"displayOnly": false
					},
					{
						"name": "endDate",
						"dataType": "string",
						"displayOnly": false
					},
					{
						"name": "chargeDate",
						"dataType": "string",
						"displayOnly": false
					},
					{
						"name": "saveDate",
						"dataType": "string",
						"displayOnly": false
					},
					{
						"name": "categoryName",
						"dataType": "string",
						"displayOnly": false
					},
					{
						"name": "fridgeId",
						"dataType": "number",
						"displayOnly": false
					}
				]
			});
			app.register(dataSet_5);
			var dataMap_1 = new cpr.data.DataMap("fridgeIdParam");
			dataMap_1.parseData({
				"columns" : [{
					"name": "fridgeId",
					"dataType": "number"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("searchDataParam");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "searchId",
						"dataType": "number"
					},
					{"name": "searchName"}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("getFoodList");
			submission_1.method = "post";
			submission_1.action = "/api/fridge/change";
			submission_1.mediaType = "application/json";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("getFridgeList");
			submission_2.action = "/api/fridge/myFridgeList";
			submission_2.mediaType = "application/json";
			submission_2.addResponseData(dataSet_2, false);
			if(typeof onGetFridgeListSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onGetFridgeListSubmitSuccess);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("searchFoodCategoryList");
			submission_3.action = "/search";
			submission_3.mediaType = "application/json";
			submission_3.addRequestData(dataMap_2);
			submission_3.addResponseData(dataSet_3, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sendFoodList");
			submission_4.action = "/api/fridge/create/foodList";
			submission_4.addRequestData(dataSet_5);
			submission_4.addRequestData(dataMap_1);
			submission_4.addResponseData(dataSet_5, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("updateFoodList");
			submission_5.method = "put";
			submission_5.action = "/api/fridge/update/foodList";
			submission_5.mediaType = "application/json";
			submission_5.addRequestData(dataSet_1);
			app.register(submission_5);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
			app.supportMedia("all and (max-width: 499.984px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["contents-container"]);
			container.style.css({
				"background-color" : "#FFFFFF",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var navigationBar_1 = new cpr.controls.NavigationBar("fridgNavbar");
				(function(navigationBar_1){
					navigationBar_1.setItemSet(app.lookup("fridgeList"), {
						"label": "fridgeName",
						"value": "fridgeId"
					});
				})(navigationBar_1);
				if(typeof onFridgNavbarSelectionChange == "function") {
					navigationBar_1.addEventListener("selection-change", onFridgNavbarSelectionChange);
				}
				if(typeof onFridgNavbarBeforeContextValueChange == "function") {
					navigationBar_1.addEventListener("before-context-value-change", onFridgNavbarBeforeContextValueChange);
				}
				if(typeof onFridgNavbarItemClick == "function") {
					navigationBar_1.addEventListener("item-click", onFridgNavbarItemClick);
				}
				container.addChild(navigationBar_1, {
					"autoSize": "none",
					"width": "419px",
					"height": "40px"
				});
				var group_2 = new cpr.controls.Container();
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.horizontalAlign = "right";
				group_2.setLayout(flowLayout_1);
				(function(container){
					var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.fridge.fridgeUD();
					if(typeof onFridgeUDSaveUpdateClick == "function") {
						userDefinedControl_1.addEventListener("save-update-click", onFridgeUDSaveUpdateClick);
					}
					container.addChild(userDefinedControl_1, {
						"autoSize": "none",
						"width": "220px",
						"height": "50px"
					});
				})(group_2);
				container.addChild(group_2, {
					"autoSize": "height",
					"width": "400px",
					"height": "50px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("foodListGrid");
				grid_1.init({
					"dataSet": app.lookup("foodList"),
					"columns": [
						{"width": "32px"},
						{"width": "60px"},
						{"width": "47px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "60px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "categoryName";
									cell.text = "카테고리이름";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "id";
									cell.text = "id";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "foodName";
									cell.text = "음식이름";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "foodAmount";
									cell.text = "수량";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "endDate";
									cell.text = "유통기한";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "chargeDate";
									cell.text = "구매일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "saveDate";
									cell.text = "등록일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "fridgeId";
									cell.text = "fridgeId";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "categoryName";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("ipb2");
										inputBox_1.bind("value").toDataColumn("categoryName");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "id";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "foodName";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("ipb1");
										inputBox_2.bind("value").toDataColumn("foodName");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "foodAmount";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
										numberEditor_1.bind("value").toDataColumn("foodAmount");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "endDate";
									cell.control = (function(){
										var dateInput_1 = new cpr.controls.DateInput("dti1");
										dateInput_1.bind("value").toDataColumn("endDate");
										return dateInput_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "chargeDate";
									cell.control = (function(){
										var dateInput_2 = new cpr.controls.DateInput("dti2");
										dateInput_2.bind("value").toDataColumn("chargeDate");
										return dateInput_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "saveDate";
									cell.control = (function(){
										var dateInput_3 = new cpr.controls.DateInput("dti3");
										dateInput_3.bind("value").toDataColumn("saveDate");
										return dateInput_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "fridgeId";
								}
							}
						]
					},
					"rowGroup": [{
						"groupCondition": "categoryName",
						"gheader": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.expr = "\"\"";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.expr = "\"\"";
										cell.style.css({
											"background-color" : "lightgray"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.expr = "\"\"";
										cell.style.css({
											"background-color" : "lightgray"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.expr = "\"\"";
										cell.style.css({
											"background-color" : "lightgray"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.expr = "\"\"";
										cell.style.css({
											"background-color" : "lightgray"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 6},
									"configurator": function(cell){
										cell.expr = "\"\"";
										cell.style.css({
											"background-color" : "lightgray"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 7},
									"configurator": function(cell){
										cell.expr = "\"\"";
										cell.style.css({
											"background-color" : "lightgray"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.expr = "\"\"";
										cell.style.css({
											"background-color" : "lightgray"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 8},
									"configurator": function(cell){
										cell.expr = "\"\"";
									}
								}
							]
						}
					}]
				});
				container.addChild(grid_1, {
					"autoSize": "none",
					"width": "419px",
					"height": "238px"
				});
				var pageIndexer_1 = new cpr.controls.PageIndexer();
				container.addChild(pageIndexer_1, {
					"width": "200px",
					"height": "40px"
				});
				var grid_2 = linker.grid_2 = new cpr.controls.Grid("insertFoodgrd");
				grid_2.init({
					"dataSet": app.lookup("insertFoodList"),
					"columns": [
						{"width": "50px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "foodName";
									cell.text = "식재료명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "foodAmount";
									cell.text = "수량";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "endDate";
									cell.text = "유통기한";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "chargeDate";
									cell.text = "구매일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "saveDate";
									cell.text = "등록일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "categoryName";
									cell.text = "카테고리이름";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "foodName";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("ipb3");
										inputBox_3.bind("value").toDataColumn("foodName");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "foodAmount";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("nbe2");
										numberEditor_2.bind("value").toDataColumn("foodAmount");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "endDate";
									cell.control = (function(){
										var dateInput_4 = new cpr.controls.DateInput("dti4");
										dateInput_4.bind("value").toDataColumn("endDate");
										return dateInput_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "chargeDate";
									cell.control = (function(){
										var dateInput_5 = new cpr.controls.DateInput("dti5");
										dateInput_5.bind("value").toDataColumn("chargeDate");
										return dateInput_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "saveDate";
									cell.control = (function(){
										var dateInput_6 = new cpr.controls.DateInput("dti6");
										dateInput_6.bind("value").toDataColumn("saveDate");
										return dateInput_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "categoryName";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("ipb4");
										inputBox_4.bind("value").toDataColumn("categoryName");
										return inputBox_4;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_2, {
					"width": "400px",
					"height": "200px"
				});
				var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.fridge.fridgeCRUD("fridgeCRUD");
				userDefinedControl_2.addStr = "추가";
				if(typeof onFridgeCRUDSaveClick == "function") {
					userDefinedControl_2.addEventListener("save-click", onFridgeCRUDSaveClick);
				}
				container.addChild(userDefinedControl_2, {
					"autoSize": "none",
					"width": "300px",
					"height": "40px"
				});
			})(group_1);
			container.addChild(group_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "20px",
						"left": "64px",
						"width": "448px",
						"height": "657px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023.984px)",
						"top": "20px",
						"left": "31px",
						"width": "219px",
						"height": "657px"
					}, 
					{
						"media": "all and (max-width: 499.984px)",
						"top": "20px",
						"left": "22px",
						"width": "153px",
						"height": "657px"
					}
				]
			});
			if(typeof onBodyLoad2 == "function"){
				app.addEventListener("load", onBodyLoad2);
			}
			// Linking
			linker.userDefinedControl_1.grdUDCtrl = linker.grid_1;
			linker.userDefinedControl_2.grdCtrl = linker.grid_2;
		}
	});
	app.title = "fridge_main";
	cpr.core.Platform.INSTANCE.register(app);
})();
