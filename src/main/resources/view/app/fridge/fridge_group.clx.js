/*
 * App URI: app/fridge/fridge_group
 * Source Location: app/fridge/fridge_group.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("app/fridge/fridge_group", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * contents_container.js
			 * Created at 2025. 4. 17. 오후 1:52:50.
			 *
			 * @author gyrud
			 ************************************************/

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				
				var initValue = app.getHost().initValue;
				var fridgeId = initValue.fridgeIdParam; 
				var memberId = initValue.memberIdParam; 
				
				
				app.lookup("dmFridgeParam").setAttr("fridgeId", fridgeId);
				app.lookup("dmFridgeParam").setAttr("memberId", memberId);
				
				 // 냉장고에 참여중인 유저 목록
				const groupList = app.lookup("getJoinGroupList").send();
				
				//====================================================================	
				// 냉장고 초대받은 목록
				const inviteList = app.lookup("getPendIngGroupList").send();
				
			}


			function onGetJoinGroupListSubmitSuccess(e){
				// 서버 데이터 처리
				app.lookup("getRoleList").send();
				
				var getJoinGroupList = e.control;
				const result = getJoinGroupList.xhr.responseText;
				const resultJson = JSON.parse(result);
				
				
				// 데이터 가공
				const processedData = resultJson.searchGroupList.map((item, index) => {
				    const roleNames = item.roleName || [];
				
				    const roleStatus = roleNames.find(role => role === "leader" || role === "member") || "";
				    const permissionList = roleNames.filter(role => role !== "leader" && role !== "member");
				    const permissionName = permissionList.join(", ");
				
				    const rowData = {
				        memberName: item.nickname,
				        joinDate: item.joinDate,
				        roleStatus: roleStatus.toUpperCase(),
				        permissionName: permissionName,
				        fridgeMemberId: item.fridgeMemberId,
				        memberId: item.memberId
				    };
				
				    return rowData;
				});
			//	
			//	// 데이터셋 세팅
			//	// 참여중인 그룹 리스트 데이터셋 저장하기

				const ds = app.lookup("searchGroupList");
				ds.clearData();
				ds.build(processedData);
				
				// 변경된 데이터셋 그리드에 뿌리기
				// 그리드 새로고침
				const grd = app.lookup("JoinGroupMemeberGrid")
				grd.redraw();
			//	

			}
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onGetRoleListSubmitSuccess(e) {
				const ds = app.lookup("searchGroupList");
				const roleList = app.lookup("roleList");
				const rowCount = ds.getRowCount();

				for (let i = 0; i < rowCount; i++) {

					const permissionStr = ds.getValue(i, "permissionName");


					if (permissionStr) {
						const permissionArray = permissionStr.split(",").map(item => item.trim());


						const roleIds = permissionArray.map(roleName => {
							const roleRow = roleList.findFirstRow("roleName == '" + roleName + "'");
							if (roleRow) {
								return roleRow.getValue("roleId");
							}
							return null;
						}).filter(Boolean);


						const newPermissionValue = roleIds.join(",");

						ds.setValue(i, "permissionName", newPermissionValue);
					} else {
						console.log("permissionName이 없음 (스킵)");
					}
				}

				for (let i = 0; i < ds.getRowCount(); i++) {
			        ds.setRowState(i, cpr.data.tabledata.RowState.UNCHANGED);
			    }

			    
				app.lookup("JoinGroupMemeberGrid").redraw();
			}

			function getChangedRowsByState(state) {
			    var ds = app.lookup("searchGroupList");
			    var rows = [];

			    for (var i = 0; i < ds.getRowCount(); i++) {
			        if (ds.getRowState(i) === state) {
			            var rowData = {};
			            var cols = ds.getColumnNames();
			            cols.forEach(function(col) {
			                rowData[col] = ds.getValue(i, col);
			            });

			            rows.push(rowData);
			        }
			    }
			    return rows;
			}

			/*
			 * 사용자 정의 컨트롤에서 save-click 이벤트 발생 시 호출.
			 * 저장버튼 클릭시 발생하는 이벤트
			 */
			function onFridgeCRUDSaveClick(e){
				var fridgeCRUD = e.control;
				
				  var ds = app.lookup("searchGroupList");
				  
				  console.log(ds.getRowDataRanged());


				var inserted = getChangedRowsByState(cpr.data.tabledata.RowState.INSERTED);
				var updated = getChangedRowsByState(cpr.data.tabledata.RowState.UPDATED);
				var deleted = getChangedRowsByState(cpr.data.tabledata.RowState.DELETED);

				
				console.log("추가됨: " + JSON.stringify(inserted) + 
				      "\n수정됨: " + JSON.stringify(updated) + 
				      "\n삭제됨: " + JSON.stringify(deleted));

				var editGroupSubmission = app.lookup("sendEditGroupList");
				
				
				const updateDataSet = app.lookup("updateGroupList");
				const deleteDataSet = app.lookup("deleteGroupList");
				
				updateDataSet.clearData();
				deleteDataSet.clearData();
				
				updated.forEach(function(rowData) {
					updateDataSet.addRowData(rowData);
				});
				
				deleted.forEach(function(rowData) {
					deleteDataSet.addRowData(rowData);
				});
				
				console.log("전송전 데이터셋 확인 =======")
				console.log(updateDataSet.getRowDataRanged());
				
				
				ds.clearData();
				
				editGroupSubmission.send();
				
				
			}



			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onGetPendIngGroupListSubmitSuccess(e){
				var getPendIngGroupList = e.control;
				
				const grd = app.lookup("inviteMemberGrid").redraw();
				console.log("초대 리스트 서버연결 성공");
				
			}


			function getChangedRowsByStateOfInvite(state) {
			    var ds = app.lookup("inviteList");
			    var rows = [];

			    for (var i = 0; i < ds.getRowCount(); i++) {
			        if (ds.getRowState(i) === state) {
			            var rowData = {};
			            var cols = ds.getColumnNames();
			            cols.forEach(function(col) {
			                rowData[col] = ds.getValue(i, col);
			            });

			            rows.push(rowData);
			        }
			    }
			    return rows;
			}

			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				var button = e.control;
				
				// 초대 수락/거절 저장버튼 클릭 시
				 
				app.lookup("inviteMemberGrid")
				var updated = getChangedRowsByStateOfInvite(cpr.data.tabledata.RowState.UPDATED);

				
				console.log("\n수정됨: " + JSON.stringify(updated) );
				      
				var inviteSubmission = app.lookup("inviteSubMission");
				
				const updateDataSet = app.lookup("resultInviteList");
				
				updateDataSet.clearData();
				
				updated.forEach(function(rowData) {
					updateDataSet.addRowData(rowData);
				});
				
				
				
				console.log("전송전 데이터셋 확인 =======")
				console.log(updateDataSet.getRowDataRanged());
				
			}

			/*
			 * "검색" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
				var button = e.control;
				
				const searchSms = app.lookup("sendSearchMemberName");
				
				const name = app.lookup("searchNameInput").value;  // 예: 사용자가 입력한 검색어
					// 1) 이전 파라미터 초기화
				  searchSms.removeAllParameters();
				
				  // 2) name 을 form-data 로 추가
				  searchSms.addParameter("name", name);
				
				  // 3) 요청 전송 (POST /api/fridges/search?name=…)
				  searchSms.send();
				
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSendSearchMemberNameSubmitSuccess(e){
				var sendSearchMemberName = e.control;
				const sms  = e.control;
			  	const raw  = sms.xhr.responseText;    // 문자열 형태의 JSON
			  	const list = JSON.parse(raw);         // JS 객체(배열)로 변환

			  	const paredDown = list.map(item => ({
				    memberId:   item.memberId,
				    email:      item.email,
				    memberName: item.memberName,
				    nickname:   item.nickname
				}));
				    // 2) DataSet lookup → 초기화 → 빌드
				const ds = app.lookup("searchMemberList");
				ds.clearData();
				ds.build(paredDown);
			  
			   	const grid = app.lookup("searchMemberGrid");
			   	
			   	
				grid.redraw();
					  
			  // 3) 혹은 console.log 해서 확인만
			  console.log("검색 결과:", list);

			}


			/*
			 * 그리드에서 cell-click 이벤트 발생 시 호출.
			 * Grid의 Cell 클릭시 발생하는 이벤트.
			 */
			function onSearchMemberGridCellClick2(e){
				var searchMemberGrid = e.control;
				const btn      = e.control;              
				const rowIdx = e.rowIndex;       
			  	const columnName = e.columnName;       
			  
				const grid = app.lookup("searchMemberGrid");
			  	const cellIndx   = grid.getCellIndex(columnName);
			  	// 버튼클릭시
			  	if(cellIndx == 3){
			  		console.log("버튼 클릭 >>");
			  		// 3) 클릭된 행 전체의 바인딩 데이터 객체
					 console.log("로우 >> " );
					  
					const grid = app.lookup("searchMemberGrid");
				  	const memberName   = grid.getCellValue(rowIdx, "memberName")
				  	const memberId   = grid.getCellValue(rowIdx, "memberId")
			  		
			  		console.log("cellValue",memberName)
			  		console.log("cellValue2",memberId)
			  		
			  		
			  		const param = app.lookup("addGroupMemberParam");
			  		param.setValue("memberId", memberId);
			  		param.setValue("memberName", memberName);
			  		
			  		const submission = app.lookup("addGroup");
			  		
			  		submission.send();
			  		app.lookup("searchNameInput").value = "";
			  		const ds = app.lookup("searchMemberList")
			  		ds.clearData();
			  		
			  		grid.redraw();
			  		
			  		
			  	}

			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onAddGroupSubmitSuccess(e){
				var addGroup = e.control;
				alert("냉장고에 초대를 했습니다.")
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSendEditGroupListSubmitSuccess(e){
				var sendEditGroupList = e.control;
				
				const ds = app.lookup("getJoinGroupList");
				ds.send();
				
				const grd = app.lookup("JoinGroupMemeberGrid").redraw();
				
			  
			}

			/*
			 * 그리드에서 cell-click 이벤트 발생 시 호출.
			 * Grid의 Cell 클릭시 발생하는 이벤트.
			 */
			function onInviteMemberGridCellClick(e){
				var inviteMemberGrid = e.control;
				
				const btn      = e.control;              
				const rowIdx = e.rowIndex;       
			  	const columnName = e.columnName;       
			  

				const grid = app.lookup("inviteMemberGrid");
				
			  	const cellIndx   = grid.getCellIndex(columnName);
			  	  alert("rowIdx" + rowIdx + "cellIndx"+cellIndx  )
			  	// 버튼클릭시
			  	if(cellIndx == 0){
					  
					const grid = app.lookup("inviteMemberGrid");
				  	const fridgeId   = grid.getCellValue(rowIdx, "fridgeId")
				  	const fridgeName   = grid.getCellValue(rowIdx, "fridgeName")
			  		
			  		console.log("cellValue",fridgeId)
			  		console.log("cellValue2",fridgeName)
			  		
			  		
			  		const param = app.lookup("addInviteParam");
			  		param.setValue("fridgeId", fridgeId);
			  		param.setValue("fridgeName", fridgeName);
			  		
			  		const submission = app.lookup("inviteSubMission");
			  		
			  		submission.send();
			  		const ds = app.lookup("inviteList")
			  		ds.clearData();
			  		
			  		app.lookup("getPendIngGroupList").send();
			  		grid.redraw();
			  		
			  		
			  	}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("searchGroupList");
			dataSet_1.parseData({
				"sortCondition": "joinDate ASC",
				"columns": [
					{"name": "memberName"},
					{"name": "joinDate"},
					{
						"name": "roleStatus",
						"dataType": "string"
					},
					{"name": "permissionName"},
					{"name": "memberId"},
					{"name": "fridgeMemberId"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("searchMemberList");
			dataSet_2.parseData({
				"columns": [
					{"name": "memberName"},
					{"name": "nickname"},
					{"name": "email"},
					{
						"name": "memberId",
						"dataType": "number"
					},
					{
						"name": "fridgeId",
						"dataType": "number"
					}
				],
				"rows": [{"nickname": "닉네임", "memberName": "이름", "email": "이메일", "memberId": ""}]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("inviteList");
			dataSet_3.parseData({
				"columns" : [
					{
						"name": "fridgeId",
						"dataType": "number"
					},
					{"name": "fridgeName"},
					{"name": "joinDate"},
					{"name": "state"},
					{"name": "favoriteState"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("roleList");
			dataSet_4.parseData({
				"columns" : [
					{
						"name": "roleId",
						"dataType": "number"
					},
					{
						"name": "roleName",
						"dataType": "string"
					},
					{"name": "roleDescription"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("comboList");
			dataSet_5.parseData({
				"columns": [
					{
						"name": "statusId",
						"dataType": "number"
					},
					{"name": "statusName"}
				],
				"rows": [
					{"statusId": "1", "statusName": "수락"},
					{"statusId": "2", "statusName": "거절"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("deleteGroupList");
			dataSet_6.parseData({
				"columns" : [
					{"name": "memberName"},
					{"name": "joinDate"},
					{
						"name": "roleStatus",
						"dataType": "string"
					},
					{"name": "permissionName"},
					{"name": "memberId"},
					{"name": "fridgeMemberId"}
				]
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("updateGroupList");
			dataSet_7.parseData({
				"columns" : [
					{"name": "memberName"},
					{"name": "joinDate"},
					{
						"name": "roleStatus",
						"dataType": "string"
					},
					{"name": "permissionName"},
					{"name": "memberId"},
					{"name": "fridgeMemberId"}
				]
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("resultInviteList");
			dataSet_8.parseData({
				"columns" : [
					{
						"name": "fridgeId",
						"dataType": "number"
					},
					{"name": "fridgeName"},
					{"name": "joinDate"},
					{"name": "state"},
					{"name": "favoriteState"},
					{"name": "AcceptBool"}
				]
			});
			app.register(dataSet_8);
			var dataMap_1 = new cpr.data.DataMap("dmFridgeParam");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "fridgeId",
						"dataType": "number"
					},
					{
						"name": "memberId",
						"dataType": "number"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("addGroupMemberParam");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "memberId",
						"dataType": "number"
					},
					{"name": "memberName"}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("addInviteParam");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "fridgeId",
						"dataType": "number"
					},
					{"name": "fridgeName"}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("getJoinGroupList");
			submission_1.action = "/api/fridge/members";
			submission_1.addRequestData(dataMap_1);
			if(typeof onGetJoinGroupListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onGetJoinGroupListSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("getRoleList");
			submission_2.action = "/api/fridge/role/checkbox";
			submission_2.addResponseData(dataSet_4, false);
			if(typeof onGetRoleListSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onGetRoleListSubmitSuccess);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("getPendIngGroupList");
			submission_3.action = "/api/fridge/role/pending/groupList";
			submission_3.mediaType = "application/json";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataSet_3, false);
			if(typeof onGetPendIngGroupListSubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onGetPendIngGroupListSubmitSuccess);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sendEditGroupList");
			submission_4.action = "/api/fridge/role/group/edit";
			submission_4.addRequestData(dataSet_7);
			submission_4.addRequestData(dataSet_6);
			if(typeof onSendEditGroupListSubmitSuccess == "function") {
				submission_4.addEventListener("submit-success", onSendEditGroupListSubmitSuccess);
			}
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("sendSearchMemberName");
			submission_5.action = "/api/ocr/search";
			if(typeof onSendSearchMemberNameSubmitSuccess == "function") {
				submission_5.addEventListener("submit-success", onSendSearchMemberNameSubmitSuccess);
			}
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("addGroup");
			submission_6.action = "/api/ocr/invite";
			submission_6.addRequestData(dataMap_2);
			if(typeof onAddGroupSubmitSuccess == "function") {
				submission_6.addEventListener("submit-success", onAddGroupSubmitSuccess);
			}
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("inviteSubMission");
			submission_7.action = "/api/ocr/accept";
			submission_7.addRequestData(dataMap_3);
			app.register(submission_7);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
			app.supportMedia("all and (max-width: 499.984px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["contents-container"]);
			container.style.css({
				"background-color" : "#FFFFFF",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.leftMargin = 0;
			verticalLayout_1.rightMargin = 0;
			verticalLayout_1.topMargin = 0;
			verticalLayout_1.bottomMargin = 0;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "냉장고 그룹원 관리";
			output_1.style.css({
				"background-color" : "#F59760",
				"border-radius" : "7px",
				"color" : "#FFFFFF",
				"font-weight" : "bold",
				"font-size" : "20px",
				"font-family" : "Kim jung chul Myungjo Regular",
				"text-align" : "center"
			});
			container.addChild(output_1, {
				"autoSize": "none",
				"width": "490px",
				"height": "40px"
			});
			
			var group_1 = new cpr.controls.Container();
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container();
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.horizontalAlign = "right";
				group_2.setLayout(flowLayout_1);
				(function(container){
					var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.fridge.fridgeCRUD();
					userDefinedControl_1.visibleAddButton = false;
					userDefinedControl_1.deleteStr = "퇴출";
					if(typeof onFridgeCRUDSaveClick == "function") {
						userDefinedControl_1.addEventListener("save-click", onFridgeCRUDSaveClick);
					}
					container.addChild(userDefinedControl_1, {
						"autoSize": "none",
						"width": "200px",
						"height": "38px"
					});
				})(group_2);
				container.addChild(group_2, {
					"width": "400px",
					"height": "45px"
				});
				var grid_1 = linker.grid_1 = new cpr.controls.Grid("JoinGroupMemeberGrid");
				grid_1.overscrollBehavior = "none";
				grid_1.init({
					"dataSet": app.lookup("searchGroupList"),
					"hScroll": "hidden",
					"vScroll": "hidden",
					"columns": [
						{
							"width": "28px",
							"visible": false
						},
						{"width": "48px"},
						{"width": "57px"},
						{"width": "59px"},
						{
							"width": "253px",
							"visible": true
						},
						{
							"width": "84px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "memberName";
									cell.text = "이름";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "joinDate";
									cell.text = "참여일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "roleStatus";
									cell.text = "직위";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "permissionName";
									cell.text = "권한";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "memberId";
									cell.text = "memberId";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "fridgeMemberId";
									cell.text = "fridgeMemberId";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "memberName";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "joinDate";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "roleStatus";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "permissionName";
									cell.control = (function(){
										var checkBoxGroup_1 = new cpr.controls.CheckBoxGroup("cbg1");
										(function(checkBoxGroup_1){
											checkBoxGroup_1.setItemSet(app.lookup("roleList"), {
												"label": "roleName",
												"value": "roleId"
											})
										})(checkBoxGroup_1);
										checkBoxGroup_1.bind("value").toDataColumn("permissionName");
										return checkBoxGroup_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "memberId";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "fridgeMemberId";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"autoSize": "none",
					"width": "360px",
					"height": "176px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "none",
				"width": "400px",
				"height": "233px"
			});
			
			var group_3 = new cpr.controls.Container();
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_1);
			container.addChild(group_3, {
				"width": "400px",
				"height": "10px"
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "냉장고 초대 관리";
			output_2.style.css({
				"background-color" : "#F59760",
				"border-radius" : "7px",
				"color" : "#FFFFFF",
				"font-weight" : "bold",
				"font-size" : "20px",
				"font-family" : "Kim jung chul Myungjo Regular",
				"text-align" : "center"
			});
			container.addChild(output_2, {
				"autoSize": "none",
				"width": "400px",
				"height": "40px"
			});
			
			var group_4 = new cpr.controls.Container();
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "1px";
			formLayout_1.verticalSpacing = "1px";
			formLayout_1.topMargin = "10px";
			formLayout_1.rightMargin = "10px";
			formLayout_1.bottomMargin = "10px";
			formLayout_1.leftMargin = "10px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["30px", "10px", "1fr"]);
			group_4.setLayout(formLayout_1);
			(function(container){
				var output_3 = new cpr.controls.Output();
				output_3.value = "초대 받은 목록";
				output_3.style.css({
					"border-right-style" : "solid",
					"color" : "#F59760",
					"border-bottom-color" : "#f59760",
					"border-top-width" : "2px",
					"font-weight" : "bold",
					"border-right-width" : "2px",
					"border-left-color" : "#f59760",
					"font-size" : "15px",
					"border-right-color" : "#f59760",
					"border-left-width" : "2px",
					"border-top-style" : "solid",
					"background-color" : "#ffffff",
					"border-radius" : "7px",
					"border-left-style" : "solid",
					"border-bottom-width" : "2px",
					"border-top-color" : "#f59760",
					"font-family" : "Kim jung chul Myungjo Regular",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var grid_2 = new cpr.controls.Grid("inviteMemberGrid");
				grid_2.init({
					"dataSet": app.lookup("inviteList"),
					"columns": [
						{
							"width": "25px",
							"visible": false
						},
						{"width": "33px"},
						{
							"width": "62px",
							"visible": false
						},
						{"width": "75px"},
						{"width": "83px"},
						{
							"width": "92px",
							"visible": true
						}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "fridgeId";
									cell.text = "fridgeId";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "fridgeName";
									cell.text = "초대받은 냉장고";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "joinDate";
									cell.text = "초대일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortColumnName = "inviteImportantBtn";
									cell.sortable = false;
									cell.targetColumnName = "state";
									cell.text = "상태";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "fridgeId";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "fridgeName";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "joinDate";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.control = (function(){
										var button_1 = new cpr.controls.Button("inviteSelectBtn");
										button_1.value = "수락";
										return button_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("cbx1");
										return checkBox_1;
									})();
								}
							}
						]
					}
				});
				if(typeof onInviteMemberGridCellClick == "function") {
					grid_2.addEventListener("cell-click", onInviteMemberGridCellClick);
				}
				container.addChild(grid_2, {
					"colIndex": 0,
					"rowIndex": 2,
					"colSpan": 1,
					"rowSpan": 1
				});
				var group_5 = new cpr.controls.Container();
				var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
				flowLayout_2.horizontalAlign = "right";
				group_5.setLayout(flowLayout_2);
				container.addChild(group_5, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_4);
			container.addChild(group_4, {
				"autoSize": "none",
				"width": "155px",
				"height": "172px"
			});
			
			var group_6 = new cpr.controls.Container();
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_6.setLayout(xYLayout_2);
			container.addChild(group_6, {
				"autoSize": "none",
				"width": "260px",
				"height": "10px"
			});
			
			var group_7 = new cpr.controls.Container();
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 10;
			verticalLayout_3.rightMargin = 10;
			verticalLayout_3.topMargin = 10;
			verticalLayout_3.bottomMargin = 0;
			group_7.setLayout(verticalLayout_3);
			(function(container){
				var output_4 = new cpr.controls.Output();
				output_4.value = "그룹원 초대하기";
				output_4.style.css({
					"border-right-style" : "solid",
					"color" : "#F59760",
					"border-bottom-color" : "#f59760",
					"border-top-width" : "2px",
					"font-weight" : "bold",
					"border-right-width" : "2px",
					"border-left-color" : "#f59760",
					"font-size" : "15px",
					"border-right-color" : "#f59760",
					"border-left-width" : "2px",
					"border-top-style" : "solid",
					"background-color" : "#ffffff",
					"border-radius" : "7px",
					"border-left-style" : "solid",
					"border-bottom-width" : "2px",
					"border-top-color" : "#f59760",
					"font-family" : "Kim jung chul Myungjo Regular",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_4, {
					"autoSize": "none",
					"width": "260px",
					"height": "30px"
				});
				var group_8 = new cpr.controls.Container();
				var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
				flowLayout_3.horizontalAlign = "right";
				group_8.setLayout(flowLayout_3);
				(function(container){
					var inputBox_1 = new cpr.controls.InputBox("searchNameInput");
					container.addChild(inputBox_1, {
						"width": "134px",
						"height": "24px"
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "검색";
					if(typeof onButtonClick2 == "function") {
						button_2.addEventListener("click", onButtonClick2);
					}
					container.addChild(button_2, {
						"width": "55px",
						"height": "24px"
					});
				})(group_8);
				container.addChild(group_8, {
					"width": "260px",
					"height": "29px"
				});
				var grid_3 = new cpr.controls.Grid("searchMemberGrid");
				grid_3.init({
					"dataSet": app.lookup("searchMemberList"),
					"columns": [
						{"width": "67px"},
						{"width": "69px"},
						{"width": "79px"},
						{"width": "100px"},
						{
							"width": "129px",
							"visible": false
						},
						{
							"width": "100px",
							"visible": false
						}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "memberName";
									cell.text = "이름";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "nickname";
									cell.text = "닉네임";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "email";
									cell.text = "email";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "추가";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "memberId";
									cell.text = "memberId";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.targetColumnName = "fridgeId";
									cell.text = "fridgeId";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "memberName";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "nickname";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "email";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.control = (function(){
										var button_3 = new cpr.controls.Button();
										button_3.value = "추가하기";
										return button_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "memberId";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "fridgeId";
								}
							}
						]
					}
				});
				if(typeof onSearchMemberGridCellClick2 == "function") {
					grid_3.addEventListener("cell-click", onSearchMemberGridCellClick2);
				}
				container.addChild(grid_3, {
					"width": "253px",
					"height": "98px"
				});
			})(group_7);
			container.addChild(group_7, {
				"width": "400px",
				"height": "209px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_1.grdCtrl = linker.grid_1;
		}
	});
	app.title = "fridge_group";
	cpr.core.Platform.INSTANCE.register(app);
})();
