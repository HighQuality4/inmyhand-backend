/*
 * App URI: app/admin/admin-recipe
 * Source Location: app/admin/admin-recipe.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.5545), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("app/admin/admin-recipe", { 
		onPrepare: function(loader) {
			loader.addCSS("theme/custom/fridge/button.part.css");
			loader.addCSS("theme/custom/web.part.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * admin-recipe.js
			 * Created at 2025. 4. 23. 오후 3:48:33.
			 *
			 * @author choeyeongbeom
			 ************************************************/

			/**
			 * URL에서 마지막 세그먼트를 추출하는 함수
			 * @return {String} URL의 마지막 세그먼트
			 */
			function getLastUrlSegment() {
			    const path = window.location.pathname; 
			    return path.substring(path.lastIndexOf('/') + 1);
			}

			/**
			 * 레시피 데이터 조회 함수
			 * @param {Number} pageIdx 페이지 인덱스 (선택적)
			 */
			function loadRecipeData(pageIdx) {
			    const recipe = app.lookup("adminRecipeGet");
			    const lastSegment = getLastUrlSegment();
			    const ipb1 = app.lookup("ipb1").value;
			    
			    if (ipb1?.trim()) {
			   		recipe.setParameters("name", ipb1);   
				}
				
				if (ipb1.trim().length === 0) {
			       recipe.removeAllParameters();
			    }
				
			    
			    // 요청 URL 설정
			    recipe.setRequestActionUrl(recipe.action + "/" + lastSegment);
			    
			    // 페이지 파라미터가 있는 경우 설정
			    if (pageIdx !== undefined) {
			        recipe.setParameters("page", pageIdx);
			    }
			    
			    // 서브미션 전송
			    recipe.send();
			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e) {
			    // 초기 데이터 로드
			    loadRecipeData();
			}

			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onRecipeIndexSelectionChange(e) {
			    // 페이지 인덱스 업데이트
			    var dmPage = app.lookup("pageIndex");
			    dmPage.setValue("pageIdx", e.newSelection);
			    
			    
			    // 페이지 인덱스로 데이터 로드
			    loadRecipeData(dmPage.getDatas().pageIdx);
			}

			/*
			 * "검색" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을.클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e) {
			    var button = e.control;
			    const searchValue = app.lookup("ipb1");
			    
			    // 검색어 유효성 검사
			    if (!searchValue || searchValue.value.trim() === "") {
			        // 검색어가 비어있는 경우
			        app.lookup("ipb1").value = ""; // 입력 필드 초기화
			        loadRecipeData(); // 모든 데이터 로드
			        return;
			    }
			    
			    
			    // 검색어 길이 검사
			    if (searchValue.value.trim().length === 1) {
			        alert("2글자 이상 입력해주세요.");
			        return;
			    }
			    
			    // 검색 실행
			    loadRecipeData();
			}

			/*
			 * 그리드에서 cell-click 이벤트 발생 시 호출.
			 * Grid의 Cell 클릭시 발생하는 이벤트.
			 */
			function onGrd1CellClick(e){
				var grd1 = e.control;
				var usersDataset = app.lookup("content");
				   // 클릭된 열의 이름 가져오기
			    var clickedColumnName =  e.columnName;
			    
			  console.log("clickedColumnName : " + clickedColumnName);
			    // "레시피 보러가기" 컬럼인지 확인
			    if(clickedColumnName === "id") {
			        var recipeId = usersDataset.getValue(e.rowIndex, clickedColumnName);
			        if(recipeId) {
			            window.location.href = "/recipe/" + recipeId;
			        }
			    }
			}

			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick(e){
				var group = e.control;
				window.location.href = "/server/grafana";
			}

			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGroupClick2(e){
				var group = e.control;
				window.location.href = "/";
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("content");
			dataSet_1.parseData({
				"columns" : [
					{"name": "recipeName"},
					{"name": "createdAt"},
					{"name": "likeCount"},
					{"name": "viewCount"},
					{"name": "id"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("pageIndex");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "totCnt",
						"dataType": "string",
						"defaultValue": "30"
					},
					{
						"name": "rowSize",
						"dataType": "string",
						"defaultValue": "10"
					},
					{
						"name": "pageIdx",
						"dataType": "string",
						"defaultValue": "1"
					},
					{
						"name": "sortCondition",
						"dataType": "string",
						"defaultValue": "asc"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("adminRecipeGet");
			submission_1.method = "get";
			submission_1.action = "/api/admin/recipe";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onAdminRecipeGetSubmitSuccess2 == "function") {
				submission_1.addEventListener("submit-success", onAdminRecipeGetSubmitSuccess2);
			}
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023.984px)", "tablet");
			app.supportMedia("all and (max-width: 499.984px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-image" : "none",
				"background-color" : "#f3f1f0",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container();
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				group_2.setLayout(verticalLayout_1);
				(function(container){
					var grid_1 = new cpr.controls.Grid("grd1");
					grid_1.init({
						"dataSet": app.lookup("content"),
						"autoRowHeight": "all",
						"leftSplit": 0,
						"topSplitHeight": 0,
						"columns": [
							{"width": "50px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"}
						],
						"header": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "번호";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.filterable = true;
										cell.sortable = true;
										cell.targetColumnName = "recipeName";
										cell.text = "제목";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.filterable = true;
										cell.sortable = true;
										cell.targetColumnName = "createdAt";
										cell.text = "작성 날짜";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = true;
										cell.targetColumnName = "likeCount";
										cell.text = "좋아요 수";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = true;
										cell.targetColumnName = "viewCount";
										cell.text = "조회수";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = true;
										cell.targetColumnName = "id";
										cell.text = "보러가기";
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.columnType = "rowindex";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.columnName = "recipeName";
										cell.control = (function(){
											var output_1 = new cpr.controls.Output();
											output_1.bind("value").toDataColumn("recipeName");
											return output_1;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.columnName = "createdAt";
										cell.control = (function(){
											var output_2 = new cpr.controls.Output();
											output_2.bind("value").toDataColumn("createdAt");
											return output_2;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.columnName = "likeCount";
										cell.control = (function(){
											var output_3 = new cpr.controls.Output();
											output_3.bind("value").toDataColumn("likeCount");
											return output_3;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.columnName = "viewCount";
										cell.control = (function(){
											var output_4 = new cpr.controls.Output();
											output_4.bind("value").toDataColumn("viewCount");
											return output_4;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.columnName = "id";
										cell.control = (function(){
											var output_5 = new cpr.controls.Output();
											output_5.displayExp = "\"보러가기\"";
											output_5.bind("value").toDataColumn("id");
											return output_5;
										})();
									}
								}
							]
						}
					});
					grid_1.style.css({
						"background-color" : "#eaf1f3",
						"background-image" : "none"
					});
					if(typeof onGrd1Click == "function") {
						grid_1.addEventListener("click", onGrd1Click);
					}
					if(typeof onGrd1CellClick == "function") {
						grid_1.addEventListener("cell-click", onGrd1CellClick);
					}
					container.addChild(grid_1, {
						"autoSize": "both",
						"width": "824px",
						"height": "475px"
					});
					var pageIndexer_1 = new cpr.controls.PageIndexer("RecipeIndex");
					pageIndexer_1.startPageIndex = 1;
					pageIndexer_1.viewPageCount = 5;
					pageIndexer_1.bind("totalRowCount").toDataMap(app.lookup("pageIndex"), "totCnt");
					pageIndexer_1.bind("pageRowCount").toDataMap(app.lookup("pageIndex"), "rowSize");
					pageIndexer_1.bind("currentPageIndex").toDataMap(app.lookup("pageIndex"), "pageIdx");
					if(typeof onRecipeIndexSelectionChange == "function") {
						pageIndexer_1.addEventListener("selection-change", onRecipeIndexSelectionChange);
					}
					container.addChild(pageIndexer_1, {
						"autoSize": "width",
						"width": "844px",
						"height": "40px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "0px",
					"right": "20px",
					"bottom": "20px",
					"left": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "125px",
				"right": "80px",
				"bottom": "80px",
				"left": "80px"
			});
			
			var group_3 = new cpr.controls.Container("header");
			group_3.style.css({
				"background-color" : "#FBF3EB"
			});
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.setColumns(["40px", "1fr", "1fr", "48px", "10px", "48px", "40px"]);
			formLayout_1.setRows(["10px", "1fr", "22px", "1px"]);
			group_3.setLayout(formLayout_1);
			(function(container){
				var output_6 = new cpr.controls.Output();
				output_6.value = "내손안의 냉장고";
				output_6.style.css({
					"color" : "#856C66",
					"font-weight" : "bold",
					"font-size" : "20px",
					"font-family" : "Kim jung chul Myungjo Regular"
				});
				container.addChild(output_6, {
					"colIndex": 1,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 2
				});
				var group_4 = new cpr.controls.Container();
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_4.setLayout(xYLayout_3);
				(function(container){
					var image_1 = new cpr.controls.Image();
					image_1.src = "theme/images/grafana.svg";
					container.addChild(image_1, {
						"top": "0px",
						"right": "0px",
						"left": "0px",
						"height": "41px"
					});
					var output_7 = new cpr.controls.Output();
					output_7.value = "모니터링";
					output_7.style.setClasses(["page-nav"]);
					container.addChild(output_7, {
						"top": "40px",
						"right": "0px",
						"left": "0px",
						"height": "22px"
					});
				})(group_4);
				if(typeof onGroupClick == "function") {
					group_4.addEventListener("click", onGroupClick);
				}
				container.addChild(group_4, {
					"colIndex": 3,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 2
				});
				var group_5 = new cpr.controls.Container();
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_5.setLayout(xYLayout_4);
				(function(container){
					var output_8 = new cpr.controls.Output();
					output_8.value = "홈";
					output_8.style.setClasses(["page-nav"]);
					container.addChild(output_8, {
						"top": "40px",
						"right": "0px",
						"left": "0px",
						"height": "22px"
					});
					var image_2 = new cpr.controls.Image();
					image_2.src = "theme/images/home.svg";
					container.addChild(image_2, {
						"top": "0px",
						"right": "0px",
						"left": "0px",
						"height": "41px"
					});
				})(group_5);
				if(typeof onGroupClick2 == "function") {
					group_5.addEventListener("click", onGroupClick2);
				}
				container.addChild(group_5, {
					"colIndex": 5,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 2
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "0px",
				"right": "0px",
				"left": "0px",
				"height": "73px"
			});
			
			var group_6 = new cpr.controls.Container("footer");
			group_6.style.setClasses(["page-nav"]);
			group_6.style.css({
				"background-color" : "#FFFFFF"
			});
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.scrollable = false;
			formLayout_2.horizontalSpacing = "0px";
			formLayout_2.verticalSpacing = "0px";
			formLayout_2.topMargin = "0px";
			formLayout_2.rightMargin = "0px";
			formLayout_2.bottomMargin = "0px";
			formLayout_2.leftMargin = "0px";
			formLayout_2.setColumns(["40px", "40px", "1fr", "40px", "1fr", "40px", "2fr"]);
			formLayout_2.setRows(["10px", "50px", "10px"]);
			group_6.setLayout(formLayout_2);
			(function(container){
				var group_7 = new cpr.controls.Container();
				var xYLayout_5 = new cpr.controls.layouts.XYLayout();
				group_7.setLayout(xYLayout_5);
				(function(container){
					var output_9 = new cpr.controls.Output();
					output_9.value = "Copyright © 내손안의 냉장고!. All rights reserved.";
					output_9.style.css({
						"text-align" : "right"
					});
					container.addChild(output_9, {
						"top": "0px",
						"right": "50px",
						"bottom": "0px",
						"left": "0px"
					});
				})(group_7);
				container.addChild(group_7, {
					"colIndex": 6,
					"rowIndex": 1
				});
			})(group_6);
			container.addChild(group_6, {
				"right": "0px",
				"bottom": "0px",
				"left": "0px",
				"height": "70px"
			});
			
			var group_8 = new cpr.controls.Container();
			var xYLayout_6 = new cpr.controls.layouts.XYLayout();
			group_8.setLayout(xYLayout_6);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				container.addChild(inputBox_1, {
					"top": "5px",
					"right": "90px",
					"bottom": "5px",
					"width": "180px"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "검색";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"top": "5px",
					"right": "30px",
					"width": "48px",
					"height": "30px"
				});
				var output_10 = new cpr.controls.Output();
				output_10.value = "레시피명 검색 : ";
				container.addChild(output_10, {
					"top": "5px",
					"right": "280px",
					"bottom": "5px",
					"width": "100px"
				});
			})(group_8);
			container.addChild(group_8, {
				"top": "80px",
				"right": "80px",
				"left": "80px",
				"height": "40px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "admin-recipe";
	cpr.core.Platform.INSTANCE.register(app);
})();
